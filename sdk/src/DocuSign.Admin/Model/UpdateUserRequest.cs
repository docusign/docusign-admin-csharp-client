/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Admin.Client.SwaggerDateConverter;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// UpdateUserRequest
    /// </summary>
    [DataContract]
    public partial class UpdateUserRequest :  IEquatable<UpdateUserRequest>, IValidatableObject
    {
        public UpdateUserRequest()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUserRequest" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="SiteId">SiteId (required).</param>
        /// <param name="UserName">UserName.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="Email">Email.</param>
        /// <param name="DefaultAccountId">DefaultAccountId.</param>
        /// <param name="LanguageCulture">LanguageCulture.</param>
        /// <param name="SelectedLanguages">SelectedLanguages.</param>
        /// <param name="FederatedStatus">FederatedStatus.</param>
        /// <param name="ForcePasswordChange">ForcePasswordChange.</param>
        /// <param name="Memberships">Memberships.</param>
        /// <param name="DeviceVerificationEnabled">DeviceVerificationEnabled.</param>
        public UpdateUserRequest(Guid? Id = default(Guid?), int? SiteId = default(int?), string UserName = default(string), string FirstName = default(string), string LastName = default(string), string Email = default(string), Guid? DefaultAccountId = default(Guid?), string LanguageCulture = default(string), string SelectedLanguages = default(string), string FederatedStatus = default(string), bool? ForcePasswordChange = default(bool?), List<UpdateMembershipRequest> Memberships = default(List<UpdateMembershipRequest>), bool? DeviceVerificationEnabled = default(bool?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for UpdateUserRequest and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "SiteId" is required (not null)
            if (SiteId == null)
            {
                throw new InvalidDataException("SiteId is a required property for UpdateUserRequest and cannot be null");
            }
            else
            {
                this.SiteId = SiteId;
            }
            this.UserName = UserName;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Email = Email;
            this.DefaultAccountId = DefaultAccountId;
            this.LanguageCulture = LanguageCulture;
            this.SelectedLanguages = SelectedLanguages;
            this.FederatedStatus = FederatedStatus;
            this.ForcePasswordChange = ForcePasswordChange;
            this.Memberships = Memberships;
            this.DeviceVerificationEnabled = DeviceVerificationEnabled;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets SiteId
        /// </summary>
        [DataMember(Name="site_id", EmitDefaultValue=false)]
        public int? SiteId { get; set; }
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets DefaultAccountId
        /// </summary>
        [DataMember(Name="default_account_id", EmitDefaultValue=false)]
        public Guid? DefaultAccountId { get; set; }
        /// <summary>
        /// Gets or Sets LanguageCulture
        /// </summary>
        [DataMember(Name="language_culture", EmitDefaultValue=false)]
        public string LanguageCulture { get; set; }
        /// <summary>
        /// Gets or Sets SelectedLanguages
        /// </summary>
        [DataMember(Name="selected_languages", EmitDefaultValue=false)]
        public string SelectedLanguages { get; set; }
        /// <summary>
        /// Gets or Sets FederatedStatus
        /// </summary>
        [DataMember(Name="federated_status", EmitDefaultValue=false)]
        public string FederatedStatus { get; set; }
        /// <summary>
        /// Gets or Sets ForcePasswordChange
        /// </summary>
        [DataMember(Name="force_password_change", EmitDefaultValue=false)]
        public bool? ForcePasswordChange { get; set; }
        /// <summary>
        /// Gets or Sets Memberships
        /// </summary>
        [DataMember(Name="memberships", EmitDefaultValue=false)]
        public List<UpdateMembershipRequest> Memberships { get; set; }
        /// <summary>
        /// Gets or Sets DeviceVerificationEnabled
        /// </summary>
        [DataMember(Name="device_verification_enabled", EmitDefaultValue=false)]
        public bool? DeviceVerificationEnabled { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateUserRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  DefaultAccountId: ").Append(DefaultAccountId).Append("\n");
            sb.Append("  LanguageCulture: ").Append(LanguageCulture).Append("\n");
            sb.Append("  SelectedLanguages: ").Append(SelectedLanguages).Append("\n");
            sb.Append("  FederatedStatus: ").Append(FederatedStatus).Append("\n");
            sb.Append("  ForcePasswordChange: ").Append(ForcePasswordChange).Append("\n");
            sb.Append("  Memberships: ").Append(Memberships).Append("\n");
            sb.Append("  DeviceVerificationEnabled: ").Append(DeviceVerificationEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdateUserRequest);
        }

        /// <summary>
        /// Returns true if UpdateUserRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateUserRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.SiteId == other.SiteId ||
                    this.SiteId != null &&
                    this.SiteId.Equals(other.SiteId)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.DefaultAccountId == other.DefaultAccountId ||
                    this.DefaultAccountId != null &&
                    this.DefaultAccountId.Equals(other.DefaultAccountId)
                ) && 
                (
                    this.LanguageCulture == other.LanguageCulture ||
                    this.LanguageCulture != null &&
                    this.LanguageCulture.Equals(other.LanguageCulture)
                ) && 
                (
                    this.SelectedLanguages == other.SelectedLanguages ||
                    this.SelectedLanguages != null &&
                    this.SelectedLanguages.Equals(other.SelectedLanguages)
                ) && 
                (
                    this.FederatedStatus == other.FederatedStatus ||
                    this.FederatedStatus != null &&
                    this.FederatedStatus.Equals(other.FederatedStatus)
                ) && 
                (
                    this.ForcePasswordChange == other.ForcePasswordChange ||
                    this.ForcePasswordChange != null &&
                    this.ForcePasswordChange.Equals(other.ForcePasswordChange)
                ) && 
                (
                    this.Memberships == other.Memberships ||
                    this.Memberships != null &&
                    this.Memberships.SequenceEqual(other.Memberships)
                ) && 
                (
                    this.DeviceVerificationEnabled == other.DeviceVerificationEnabled ||
                    this.DeviceVerificationEnabled != null &&
                    this.DeviceVerificationEnabled.Equals(other.DeviceVerificationEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.SiteId != null)
                    hash = hash * 59 + this.SiteId.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.DefaultAccountId != null)
                    hash = hash * 59 + this.DefaultAccountId.GetHashCode();
                if (this.LanguageCulture != null)
                    hash = hash * 59 + this.LanguageCulture.GetHashCode();
                if (this.SelectedLanguages != null)
                    hash = hash * 59 + this.SelectedLanguages.GetHashCode();
                if (this.FederatedStatus != null)
                    hash = hash * 59 + this.FederatedStatus.GetHashCode();
                if (this.ForcePasswordChange != null)
                    hash = hash * 59 + this.ForcePasswordChange.GetHashCode();
                if (this.Memberships != null)
                    hash = hash * 59 + this.Memberships.GetHashCode();
                if (this.DeviceVerificationEnabled != null)
                    hash = hash * 59 + this.DeviceVerificationEnabled.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
