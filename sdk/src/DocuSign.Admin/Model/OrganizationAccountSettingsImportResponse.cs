/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Admin.Client.SwaggerDateConverter;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// OrganizationAccountSettingsImportResponse
    /// </summary>
    [DataContract]
    public partial class OrganizationAccountSettingsImportResponse :  IEquatable<OrganizationAccountSettingsImportResponse>, IValidatableObject
    {
        public OrganizationAccountSettingsImportResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationAccountSettingsImportResponse" /> class.
        /// </summary>
        /// <param name="Created">Created.</param>
        /// <param name="LastModified">LastModified.</param>
        /// <param name="Completed">Completed.</param>
        /// <param name="Expires">Expires.</param>
        /// <param name="PercentCompleted">PercentCompleted.</param>
        /// <param name="NumberProcessedAccounts">NumberProcessedAccounts.</param>
        /// <param name="NumberUnprocessedAccounts">NumberUnprocessedAccounts.</param>
        /// <param name="Results">Results.</param>
        /// <param name="Success">Success.</param>
        /// <param name="SkippedSettingsByAccount">SkippedSettingsByAccount.</param>
        /// <param name="Id">Id.</param>
        /// <param name="OrganizationId">OrganizationId.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Requestor">Requestor.</param>
        public OrganizationAccountSettingsImportResponse(DateTime? Created = default(DateTime?), DateTime? LastModified = default(DateTime?), DateTime? Completed = default(DateTime?), DateTime? Expires = default(DateTime?), int? PercentCompleted = default(int?), long? NumberProcessedAccounts = default(long?), long? NumberUnprocessedAccounts = default(long?), List<OrganizationAccountSettingsImportResultResponse> Results = default(List<OrganizationAccountSettingsImportResultResponse>), bool? Success = default(bool?), Dictionary<string, List<string>> SkippedSettingsByAccount = default(Dictionary<string, List<string>>), string Id = default(string), string OrganizationId = default(string), string Status = default(string), string Type = default(string), OrganizationAccountSettingsImportRequestorResponse Requestor = default(OrganizationAccountSettingsImportRequestorResponse))
        {
            this.Created = Created;
            this.LastModified = LastModified;
            this.Completed = Completed;
            this.Expires = Expires;
            this.PercentCompleted = PercentCompleted;
            this.NumberProcessedAccounts = NumberProcessedAccounts;
            this.NumberUnprocessedAccounts = NumberUnprocessedAccounts;
            this.Results = Results;
            this.Success = Success;
            this.SkippedSettingsByAccount = SkippedSettingsByAccount;
            this.Id = Id;
            this.OrganizationId = OrganizationId;
            this.Status = Status;
            this.Type = Type;
            this.Requestor = Requestor;
        }
        
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public DateTime? LastModified { get; set; }
        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public DateTime? Completed { get; set; }
        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name="expires", EmitDefaultValue=false)]
        public DateTime? Expires { get; set; }
        /// <summary>
        /// Gets or Sets PercentCompleted
        /// </summary>
        [DataMember(Name="percent_completed", EmitDefaultValue=false)]
        public int? PercentCompleted { get; set; }
        /// <summary>
        /// Gets or Sets NumberProcessedAccounts
        /// </summary>
        [DataMember(Name="number_processed_accounts", EmitDefaultValue=false)]
        public long? NumberProcessedAccounts { get; set; }
        /// <summary>
        /// Gets or Sets NumberUnprocessedAccounts
        /// </summary>
        [DataMember(Name="number_unprocessed_accounts", EmitDefaultValue=false)]
        public long? NumberUnprocessedAccounts { get; set; }
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<OrganizationAccountSettingsImportResultResponse> Results { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }
        /// <summary>
        /// Gets or Sets SkippedSettingsByAccount
        /// </summary>
        [DataMember(Name="skipped_settings_by_account", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> SkippedSettingsByAccount { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="organization_id", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Requestor
        /// </summary>
        [DataMember(Name="requestor", EmitDefaultValue=false)]
        public OrganizationAccountSettingsImportRequestorResponse Requestor { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationAccountSettingsImportResponse {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  PercentCompleted: ").Append(PercentCompleted).Append("\n");
            sb.Append("  NumberProcessedAccounts: ").Append(NumberProcessedAccounts).Append("\n");
            sb.Append("  NumberUnprocessedAccounts: ").Append(NumberUnprocessedAccounts).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  SkippedSettingsByAccount: ").Append(SkippedSettingsByAccount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Requestor: ").Append(Requestor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrganizationAccountSettingsImportResponse);
        }

        /// <summary>
        /// Returns true if OrganizationAccountSettingsImportResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OrganizationAccountSettingsImportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationAccountSettingsImportResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.LastModified == other.LastModified ||
                    this.LastModified != null &&
                    this.LastModified.Equals(other.LastModified)
                ) && 
                (
                    this.Completed == other.Completed ||
                    this.Completed != null &&
                    this.Completed.Equals(other.Completed)
                ) && 
                (
                    this.Expires == other.Expires ||
                    this.Expires != null &&
                    this.Expires.Equals(other.Expires)
                ) && 
                (
                    this.PercentCompleted == other.PercentCompleted ||
                    this.PercentCompleted != null &&
                    this.PercentCompleted.Equals(other.PercentCompleted)
                ) && 
                (
                    this.NumberProcessedAccounts == other.NumberProcessedAccounts ||
                    this.NumberProcessedAccounts != null &&
                    this.NumberProcessedAccounts.Equals(other.NumberProcessedAccounts)
                ) && 
                (
                    this.NumberUnprocessedAccounts == other.NumberUnprocessedAccounts ||
                    this.NumberUnprocessedAccounts != null &&
                    this.NumberUnprocessedAccounts.Equals(other.NumberUnprocessedAccounts)
                ) && 
                (
                    this.Results == other.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(other.Results)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.SkippedSettingsByAccount == other.SkippedSettingsByAccount ||
                    this.SkippedSettingsByAccount != null &&
                    this.SkippedSettingsByAccount.SequenceEqual(other.SkippedSettingsByAccount)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Requestor == other.Requestor ||
                    this.Requestor != null &&
                    this.Requestor.Equals(other.Requestor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.LastModified != null)
                    hash = hash * 59 + this.LastModified.GetHashCode();
                if (this.Completed != null)
                    hash = hash * 59 + this.Completed.GetHashCode();
                if (this.Expires != null)
                    hash = hash * 59 + this.Expires.GetHashCode();
                if (this.PercentCompleted != null)
                    hash = hash * 59 + this.PercentCompleted.GetHashCode();
                if (this.NumberProcessedAccounts != null)
                    hash = hash * 59 + this.NumberProcessedAccounts.GetHashCode();
                if (this.NumberUnprocessedAccounts != null)
                    hash = hash * 59 + this.NumberUnprocessedAccounts.GetHashCode();
                if (this.Results != null)
                    hash = hash * 59 + this.Results.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.SkippedSettingsByAccount != null)
                    hash = hash * 59 + this.SkippedSettingsByAccount.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Requestor != null)
                    hash = hash * 59 + this.Requestor.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
