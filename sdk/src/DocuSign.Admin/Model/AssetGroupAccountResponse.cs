/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// AssetGroupAccountResponse
    /// </summary>
    [DataContract]
    public partial class AssetGroupAccountResponse :  IEquatable<AssetGroupAccountResponse>, IValidatableObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetGroupAccountResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AssetGroupAccountResponse()
        {
        }
        
        /// <summary>
        /// The asset group id that the asset group account belongs to.
        /// </summary>
        /// <value>The asset group id that the asset group account belongs to.</value>
        [DataMember(Name="assetGroupId", EmitDefaultValue=false)]
        public Guid? AssetGroupId { get; private set; }
        /// <summary>
        /// The name of asset group that the asset group account belongs to.
        /// </summary>
        /// <value>The name of asset group that the asset group account belongs to.</value>
        [DataMember(Name="assetGroupName", EmitDefaultValue=false)]
        public string AssetGroupName { get; private set; }
        /// <summary>
        /// The account id of the asset group account.
        /// </summary>
        /// <value>The account id of the asset group account.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public Guid? AccountId { get; private set; }
        /// <summary>
        /// The account name of the asset group account.
        /// </summary>
        /// <value>The account name of the asset group account.</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; private set; }
        /// <summary>
        /// The external account id of the asset group account.
        /// </summary>
        /// <value>The external account id of the asset group account.</value>
        [DataMember(Name="externalAccountId", EmitDefaultValue=false)]
        public long? ExternalAccountId { get; private set; }
        /// <summary>
        /// The compliant status for the account.
        /// </summary>
        /// <value>The compliant status for the account.</value>
        [DataMember(Name="compliant", EmitDefaultValue=false)]
        public bool? Compliant { get; private set; }
        /// <summary>
        /// The site id of the asset group account.
        /// </summary>
        /// <value>The site id of the asset group account.</value>
        [DataMember(Name="siteId", EmitDefaultValue=false)]
        public int? SiteId { get; private set; }
        /// <summary>
        /// The site name of the asset group account.
        /// </summary>
        /// <value>The site name of the asset group account.</value>
        [DataMember(Name="siteName", EmitDefaultValue=false)]
        public string SiteName { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetGroupAccountResponse {\n");
            sb.Append("  AssetGroupId: ").Append(AssetGroupId).Append("\n");
            sb.Append("  AssetGroupName: ").Append(AssetGroupName).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ExternalAccountId: ").Append(ExternalAccountId).Append("\n");
            sb.Append("  Compliant: ").Append(Compliant).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AssetGroupAccountResponse);
        }

        /// <summary>
        /// Returns true if AssetGroupAccountResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetGroupAccountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetGroupAccountResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AssetGroupId == other.AssetGroupId ||
                    this.AssetGroupId != null &&
                    this.AssetGroupId.Equals(other.AssetGroupId)
                ) && 
                (
                    this.AssetGroupName == other.AssetGroupName ||
                    this.AssetGroupName != null &&
                    this.AssetGroupName.Equals(other.AssetGroupName)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.AccountName == other.AccountName ||
                    this.AccountName != null &&
                    this.AccountName.Equals(other.AccountName)
                ) && 
                (
                    this.ExternalAccountId == other.ExternalAccountId ||
                    this.ExternalAccountId != null &&
                    this.ExternalAccountId.Equals(other.ExternalAccountId)
                ) && 
                (
                    this.Compliant == other.Compliant ||
                    this.Compliant != null &&
                    this.Compliant.Equals(other.Compliant)
                ) && 
                (
                    this.SiteId == other.SiteId ||
                    this.SiteId != null &&
                    this.SiteId.Equals(other.SiteId)
                ) && 
                (
                    this.SiteName == other.SiteName ||
                    this.SiteName != null &&
                    this.SiteName.Equals(other.SiteName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AssetGroupId != null)
                    hash = hash * 59 + this.AssetGroupId.GetHashCode();
                if (this.AssetGroupName != null)
                    hash = hash * 59 + this.AssetGroupName.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.AccountName != null)
                    hash = hash * 59 + this.AccountName.GetHashCode();
                if (this.ExternalAccountId != null)
                    hash = hash * 59 + this.ExternalAccountId.GetHashCode();
                if (this.Compliant != null)
                    hash = hash * 59 + this.Compliant.GetHashCode();
                if (this.SiteId != null)
                    hash = hash * 59 + this.SiteId.GetHashCode();
                if (this.SiteName != null)
                    hash = hash * 59 + this.SiteName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
