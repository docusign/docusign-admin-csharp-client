/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// Saml2IdentityProviderResponse
    /// </summary>
    [DataContract]
    public partial class Saml2IdentityProviderResponse :  IEquatable<Saml2IdentityProviderResponse>, IValidatableObject
    {
        public Saml2IdentityProviderResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Saml2IdentityProviderResponse" /> class.
        /// </summary>
        /// <param name="Issuer">Issuer.</param>
        /// <param name="Settings">Settings.</param>
        /// <param name="Certificates">Certificates.</param>
        /// <param name="AttributeMappings">AttributeMappings.</param>
        public Saml2IdentityProviderResponse(string Issuer = default(string), List<SettingResponse> Settings = default(List<SettingResponse>), List<CertificateResponse> Certificates = default(List<CertificateResponse>), List<RequiredAttributeMappingResponse> AttributeMappings = default(List<RequiredAttributeMappingResponse>))
        {
            this.Issuer = Issuer;
            this.Settings = Settings;
            this.Certificates = Certificates;
            this.AttributeMappings = AttributeMappings;
        }
        
        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public string Issuer { get; set; }
        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<SettingResponse> Settings { get; set; }
        /// <summary>
        /// Gets or Sets Certificates
        /// </summary>
        [DataMember(Name="certificates", EmitDefaultValue=false)]
        public List<CertificateResponse> Certificates { get; set; }
        /// <summary>
        /// Gets or Sets AttributeMappings
        /// </summary>
        [DataMember(Name="attribute_mappings", EmitDefaultValue=false)]
        public List<RequiredAttributeMappingResponse> AttributeMappings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Saml2IdentityProviderResponse {\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  AttributeMappings: ").Append(AttributeMappings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Saml2IdentityProviderResponse);
        }

        /// <summary>
        /// Returns true if Saml2IdentityProviderResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of Saml2IdentityProviderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Saml2IdentityProviderResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Issuer == other.Issuer ||
                    this.Issuer != null &&
                    this.Issuer.Equals(other.Issuer)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.SequenceEqual(other.Settings)
                ) && 
                (
                    this.Certificates == other.Certificates ||
                    this.Certificates != null &&
                    this.Certificates.SequenceEqual(other.Certificates)
                ) && 
                (
                    this.AttributeMappings == other.AttributeMappings ||
                    this.AttributeMappings != null &&
                    this.AttributeMappings.SequenceEqual(other.AttributeMappings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Issuer != null)
                    hash = hash * 59 + this.Issuer.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.Certificates != null)
                    hash = hash * 59 + this.Certificates.GetHashCode();
                if (this.AttributeMappings != null)
                    hash = hash * 59 + this.AttributeMappings.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
