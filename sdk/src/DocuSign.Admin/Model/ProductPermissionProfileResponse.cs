/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Admin.Client.SwaggerDateConverter;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// ProductPermissionProfileResponse
    /// </summary>
    [DataContract]
    public partial class ProductPermissionProfileResponse :  IEquatable<ProductPermissionProfileResponse>, IValidatableObject
    {
        public ProductPermissionProfileResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPermissionProfileResponse" /> class.
        /// </summary>
        /// <param name="ProductId">ProductId.</param>
        /// <param name="ProductName">ProductName.</param>
        /// <param name="PermissionProfiles">PermissionProfiles.</param>
        /// <param name="ErrorMessage">ErrorMessage.</param>
        public ProductPermissionProfileResponse(Guid? ProductId = default(Guid?), string ProductName = default(string), List<PermissionProfileResponse21> PermissionProfiles = default(List<PermissionProfileResponse21>), string ErrorMessage = default(string))
        {
            this.ProductId = ProductId;
            this.ProductName = ProductName;
            this.PermissionProfiles = PermissionProfiles;
            this.ErrorMessage = ErrorMessage;
        }
        
        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="product_id", EmitDefaultValue=false)]
        public Guid? ProductId { get; set; }
        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="product_name", EmitDefaultValue=false)]
        public string ProductName { get; set; }
        /// <summary>
        /// Gets or Sets PermissionProfiles
        /// </summary>
        [DataMember(Name="permission_profiles", EmitDefaultValue=false)]
        public List<PermissionProfileResponse21> PermissionProfiles { get; set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductPermissionProfileResponse {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  PermissionProfiles: ").Append(PermissionProfiles).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProductPermissionProfileResponse);
        }

        /// <summary>
        /// Returns true if ProductPermissionProfileResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductPermissionProfileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductPermissionProfileResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.ProductName == other.ProductName ||
                    this.ProductName != null &&
                    this.ProductName.Equals(other.ProductName)
                ) && 
                (
                    this.PermissionProfiles == other.PermissionProfiles ||
                    this.PermissionProfiles != null &&
                    this.PermissionProfiles.SequenceEqual(other.PermissionProfiles)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                if (this.ProductName != null)
                    hash = hash * 59 + this.ProductName.GetHashCode();
                if (this.PermissionProfiles != null)
                    hash = hash * 59 + this.PermissionProfiles.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
