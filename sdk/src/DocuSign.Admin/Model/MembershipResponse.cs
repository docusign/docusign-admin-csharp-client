/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Admin.Client.SwaggerDateConverter;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// MembershipResponse
    /// </summary>
    [DataContract]
    public partial class MembershipResponse :  IEquatable<MembershipResponse>, IValidatableObject
    {
        public MembershipResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipResponse" /> class.
        /// </summary>
        /// <param name="Email">Email.</param>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="ExternalAccountId">ExternalAccountId.</param>
        /// <param name="AccountName">AccountName.</param>
        /// <param name="IsExternalAccount">IsExternalAccount.</param>
        /// <param name="Status">Status.</param>
        /// <param name="PermissionProfile">PermissionProfile.</param>
        /// <param name="CreatedOn">CreatedOn.</param>
        /// <param name="Groups">Groups.</param>
        /// <param name="IsAdmin">IsAdmin.</param>
        public MembershipResponse(string Email = default(string), Guid? AccountId = default(Guid?), string ExternalAccountId = default(string), string AccountName = default(string), bool? IsExternalAccount = default(bool?), string Status = default(string), PermissionProfileResponse PermissionProfile = default(PermissionProfileResponse), DateTime CreatedOn = default(DateTime), List<MemberGroupResponse> Groups = default(List<MemberGroupResponse>), bool? IsAdmin = default(bool?))
        {
            this.Email = Email;
            this.AccountId = AccountId;
            this.ExternalAccountId = ExternalAccountId;
            this.AccountName = AccountName;
            this.IsExternalAccount = IsExternalAccount;
            this.Status = Status;
            this.PermissionProfile = PermissionProfile;
            this.CreatedOn = CreatedOn;
            this.Groups = Groups;
            this.IsAdmin = IsAdmin;
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }
        /// <summary>
        /// Gets or Sets ExternalAccountId
        /// </summary>
        [DataMember(Name="external_account_id", EmitDefaultValue=false)]
        public string ExternalAccountId { get; set; }
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }
        /// <summary>
        /// Gets or Sets IsExternalAccount
        /// </summary>
        [DataMember(Name="is_external_account", EmitDefaultValue=false)]
        public bool? IsExternalAccount { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets PermissionProfile
        /// </summary>
        [DataMember(Name="permission_profile", EmitDefaultValue=false)]
        public PermissionProfileResponse PermissionProfile { get; set; }
        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="created_on", EmitDefaultValue=false)]
        public DateTime CreatedOn { get; set; }
        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<MemberGroupResponse> Groups { get; set; }
        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [DataMember(Name="is_admin", EmitDefaultValue=false)]
        public bool? IsAdmin { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MembershipResponse {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ExternalAccountId: ").Append(ExternalAccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  IsExternalAccount: ").Append(IsExternalAccount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PermissionProfile: ").Append(PermissionProfile).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MembershipResponse);
        }

        /// <summary>
        /// Returns true if MembershipResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of MembershipResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MembershipResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ExternalAccountId == other.ExternalAccountId ||
                    this.ExternalAccountId != null &&
                    this.ExternalAccountId.Equals(other.ExternalAccountId)
                ) && 
                (
                    this.AccountName == other.AccountName ||
                    this.AccountName != null &&
                    this.AccountName.Equals(other.AccountName)
                ) && 
                (
                    this.IsExternalAccount == other.IsExternalAccount ||
                    this.IsExternalAccount != null &&
                    this.IsExternalAccount.Equals(other.IsExternalAccount)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.PermissionProfile == other.PermissionProfile ||
                    this.PermissionProfile != null &&
                    this.PermissionProfile.Equals(other.PermissionProfile)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.Groups == other.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    this.IsAdmin == other.IsAdmin ||
                    this.IsAdmin != null &&
                    this.IsAdmin.Equals(other.IsAdmin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ExternalAccountId != null)
                    hash = hash * 59 + this.ExternalAccountId.GetHashCode();
                if (this.AccountName != null)
                    hash = hash * 59 + this.AccountName.GetHashCode();
                if (this.IsExternalAccount != null)
                    hash = hash * 59 + this.IsExternalAccount.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.PermissionProfile != null)
                    hash = hash * 59 + this.PermissionProfile.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.Groups != null)
                    hash = hash * 59 + this.Groups.GetHashCode();
                if (this.IsAdmin != null)
                    hash = hash * 59 + this.IsAdmin.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
