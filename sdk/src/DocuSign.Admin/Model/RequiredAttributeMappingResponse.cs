/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// RequiredAttributeMappingResponse
    /// </summary>
    [DataContract]
    public partial class RequiredAttributeMappingResponse :  IEquatable<RequiredAttributeMappingResponse>, IValidatableObject
    {
        public RequiredAttributeMappingResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredAttributeMappingResponse" /> class.
        /// </summary>
        /// <param name="RequiredAttributeId">RequiredAttributeId.</param>
        /// <param name="RequiredAttributeName">RequiredAttributeName.</param>
        /// <param name="RequiredAttributeFriendlyName">RequiredAttributeFriendlyName.</param>
        /// <param name="SubstituteAttributeName">SubstituteAttributeName.</param>
        public RequiredAttributeMappingResponse(int? RequiredAttributeId = default(int?), string RequiredAttributeName = default(string), string RequiredAttributeFriendlyName = default(string), string SubstituteAttributeName = default(string))
        {
            this.RequiredAttributeId = RequiredAttributeId;
            this.RequiredAttributeName = RequiredAttributeName;
            this.RequiredAttributeFriendlyName = RequiredAttributeFriendlyName;
            this.SubstituteAttributeName = SubstituteAttributeName;
        }
        
        /// <summary>
        /// Gets or Sets RequiredAttributeId
        /// </summary>
        [DataMember(Name="required_attribute_id", EmitDefaultValue=false)]
        public int? RequiredAttributeId { get; set; }
        /// <summary>
        /// Gets or Sets RequiredAttributeName
        /// </summary>
        [DataMember(Name="required_attribute_name", EmitDefaultValue=false)]
        public string RequiredAttributeName { get; set; }
        /// <summary>
        /// Gets or Sets RequiredAttributeFriendlyName
        /// </summary>
        [DataMember(Name="required_attribute_friendly_name", EmitDefaultValue=false)]
        public string RequiredAttributeFriendlyName { get; set; }
        /// <summary>
        /// Gets or Sets SubstituteAttributeName
        /// </summary>
        [DataMember(Name="substitute_attribute_name", EmitDefaultValue=false)]
        public string SubstituteAttributeName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequiredAttributeMappingResponse {\n");
            sb.Append("  RequiredAttributeId: ").Append(RequiredAttributeId).Append("\n");
            sb.Append("  RequiredAttributeName: ").Append(RequiredAttributeName).Append("\n");
            sb.Append("  RequiredAttributeFriendlyName: ").Append(RequiredAttributeFriendlyName).Append("\n");
            sb.Append("  SubstituteAttributeName: ").Append(SubstituteAttributeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RequiredAttributeMappingResponse);
        }

        /// <summary>
        /// Returns true if RequiredAttributeMappingResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RequiredAttributeMappingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequiredAttributeMappingResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RequiredAttributeId == other.RequiredAttributeId ||
                    this.RequiredAttributeId != null &&
                    this.RequiredAttributeId.Equals(other.RequiredAttributeId)
                ) && 
                (
                    this.RequiredAttributeName == other.RequiredAttributeName ||
                    this.RequiredAttributeName != null &&
                    this.RequiredAttributeName.Equals(other.RequiredAttributeName)
                ) && 
                (
                    this.RequiredAttributeFriendlyName == other.RequiredAttributeFriendlyName ||
                    this.RequiredAttributeFriendlyName != null &&
                    this.RequiredAttributeFriendlyName.Equals(other.RequiredAttributeFriendlyName)
                ) && 
                (
                    this.SubstituteAttributeName == other.SubstituteAttributeName ||
                    this.SubstituteAttributeName != null &&
                    this.SubstituteAttributeName.Equals(other.SubstituteAttributeName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RequiredAttributeId != null)
                    hash = hash * 59 + this.RequiredAttributeId.GetHashCode();
                if (this.RequiredAttributeName != null)
                    hash = hash * 59 + this.RequiredAttributeName.GetHashCode();
                if (this.RequiredAttributeFriendlyName != null)
                    hash = hash * 59 + this.RequiredAttributeFriendlyName.GetHashCode();
                if (this.SubstituteAttributeName != null)
                    hash = hash * 59 + this.SubstituteAttributeName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
