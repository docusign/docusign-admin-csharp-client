/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// DSGroupResponse
    /// </summary>
    [DataContract]
    public partial class DSGroupResponse :  IEquatable<DSGroupResponse>, IValidatableObject
    {
        public DSGroupResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DSGroupResponse" /> class.
        /// </summary>
        /// <param name="DsGroupId">DsGroupId.</param>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="SourceProductName">SourceProductName.</param>
        /// <param name="GroupId">GroupId.</param>
        /// <param name="GroupName">GroupName.</param>
        /// <param name="Description">Description.</param>
        /// <param name="IsAdmin">IsAdmin.</param>
        /// <param name="LastModifiedOn">LastModifiedOn.</param>
        /// <param name="UserCount">UserCount.</param>
        /// <param name="ExternalAccountId">ExternalAccountId.</param>
        /// <param name="AccountName">AccountName.</param>
        public DSGroupResponse(Guid? DsGroupId = default(Guid?), Guid? AccountId = default(Guid?), string SourceProductName = default(string), string GroupId = default(string), string GroupName = default(string), string Description = default(string), bool? IsAdmin = default(bool?), DateTime? LastModifiedOn = default(DateTime?), int? UserCount = default(int?), long? ExternalAccountId = default(long?), string AccountName = default(string))
        {
            this.DsGroupId = DsGroupId;
            this.AccountId = AccountId;
            this.SourceProductName = SourceProductName;
            this.GroupId = GroupId;
            this.GroupName = GroupName;
            this.Description = Description;
            this.IsAdmin = IsAdmin;
            this.LastModifiedOn = LastModifiedOn;
            this.UserCount = UserCount;
            this.ExternalAccountId = ExternalAccountId;
            this.AccountName = AccountName;
        }
        
        /// <summary>
        /// Gets or Sets DsGroupId
        /// </summary>
        [DataMember(Name="ds_group_id", EmitDefaultValue=false)]
        public Guid? DsGroupId { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }
        /// <summary>
        /// Gets or Sets SourceProductName
        /// </summary>
        [DataMember(Name="source_product_name", EmitDefaultValue=false)]
        public string SourceProductName { get; set; }
        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="group_id", EmitDefaultValue=false)]
        public string GroupId { get; set; }
        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name="group_name", EmitDefaultValue=false)]
        public string GroupName { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [DataMember(Name="is_admin", EmitDefaultValue=false)]
        public bool? IsAdmin { get; set; }
        /// <summary>
        /// Gets or Sets LastModifiedOn
        /// </summary>
        [DataMember(Name="last_modified_on", EmitDefaultValue=false)]
        public DateTime? LastModifiedOn { get; set; }
        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name="user_count", EmitDefaultValue=false)]
        public int? UserCount { get; set; }
        /// <summary>
        /// Gets or Sets ExternalAccountId
        /// </summary>
        [DataMember(Name="external_account_id", EmitDefaultValue=false)]
        public long? ExternalAccountId { get; set; }
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DSGroupResponse {\n");
            sb.Append("  DsGroupId: ").Append(DsGroupId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  SourceProductName: ").Append(SourceProductName).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  LastModifiedOn: ").Append(LastModifiedOn).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  ExternalAccountId: ").Append(ExternalAccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DSGroupResponse);
        }

        /// <summary>
        /// Returns true if DSGroupResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of DSGroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DSGroupResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DsGroupId == other.DsGroupId ||
                    this.DsGroupId != null &&
                    this.DsGroupId.Equals(other.DsGroupId)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.SourceProductName == other.SourceProductName ||
                    this.SourceProductName != null &&
                    this.SourceProductName.Equals(other.SourceProductName)
                ) && 
                (
                    this.GroupId == other.GroupId ||
                    this.GroupId != null &&
                    this.GroupId.Equals(other.GroupId)
                ) && 
                (
                    this.GroupName == other.GroupName ||
                    this.GroupName != null &&
                    this.GroupName.Equals(other.GroupName)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.IsAdmin == other.IsAdmin ||
                    this.IsAdmin != null &&
                    this.IsAdmin.Equals(other.IsAdmin)
                ) && 
                (
                    this.LastModifiedOn == other.LastModifiedOn ||
                    this.LastModifiedOn != null &&
                    this.LastModifiedOn.Equals(other.LastModifiedOn)
                ) && 
                (
                    this.UserCount == other.UserCount ||
                    this.UserCount != null &&
                    this.UserCount.Equals(other.UserCount)
                ) && 
                (
                    this.ExternalAccountId == other.ExternalAccountId ||
                    this.ExternalAccountId != null &&
                    this.ExternalAccountId.Equals(other.ExternalAccountId)
                ) && 
                (
                    this.AccountName == other.AccountName ||
                    this.AccountName != null &&
                    this.AccountName.Equals(other.AccountName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DsGroupId != null)
                    hash = hash * 59 + this.DsGroupId.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.SourceProductName != null)
                    hash = hash * 59 + this.SourceProductName.GetHashCode();
                if (this.GroupId != null)
                    hash = hash * 59 + this.GroupId.GetHashCode();
                if (this.GroupName != null)
                    hash = hash * 59 + this.GroupName.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.IsAdmin != null)
                    hash = hash * 59 + this.IsAdmin.GetHashCode();
                if (this.LastModifiedOn != null)
                    hash = hash * 59 + this.LastModifiedOn.GetHashCode();
                if (this.UserCount != null)
                    hash = hash * 59 + this.UserCount.GetHashCode();
                if (this.ExternalAccountId != null)
                    hash = hash * 59 + this.ExternalAccountId.GetHashCode();
                if (this.AccountName != null)
                    hash = hash * 59 + this.AccountName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
