/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// OrganizationUserResponse
    /// </summary>
    [DataContract]
    public partial class OrganizationUserResponse :  IEquatable<OrganizationUserResponse>, IValidatableObject
    {
        public OrganizationUserResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationUserResponse" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="UserName">UserName.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="UserStatus">UserStatus.</param>
        /// <param name="MembershipStatus">MembershipStatus.</param>
        /// <param name="Email">Email.</param>
        /// <param name="CreatedOn">CreatedOn.</param>
        /// <param name="MembershipCreatedOn">MembershipCreatedOn.</param>
        /// <param name="DsGroups">DsGroups.</param>
        /// <param name="MembershipId">MembershipId.</param>
        public OrganizationUserResponse(Guid? Id = default(Guid?), string UserName = default(string), string FirstName = default(string), string LastName = default(string), string UserStatus = default(string), string MembershipStatus = default(string), string Email = default(string), DateTime? CreatedOn = default(DateTime?), DateTime? MembershipCreatedOn = default(DateTime?), List<DSGroupResponse> DsGroups = default(List<DSGroupResponse>), Guid? MembershipId = default(Guid?))
        {
            this.Id = Id;
            this.UserName = UserName;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.UserStatus = UserStatus;
            this.MembershipStatus = MembershipStatus;
            this.Email = Email;
            this.CreatedOn = CreatedOn;
            this.MembershipCreatedOn = MembershipCreatedOn;
            this.DsGroups = DsGroups;
            this.MembershipId = MembershipId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets UserStatus
        /// </summary>
        [DataMember(Name="user_status", EmitDefaultValue=false)]
        public string UserStatus { get; set; }
        /// <summary>
        /// Gets or Sets MembershipStatus
        /// </summary>
        [DataMember(Name="membership_status", EmitDefaultValue=false)]
        public string MembershipStatus { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="created_on", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }
        /// <summary>
        /// Gets or Sets MembershipCreatedOn
        /// </summary>
        [DataMember(Name="membership_created_on", EmitDefaultValue=false)]
        public DateTime? MembershipCreatedOn { get; set; }
        /// <summary>
        /// Gets or Sets DsGroups
        /// </summary>
        [DataMember(Name="ds_groups", EmitDefaultValue=false)]
        public List<DSGroupResponse> DsGroups { get; set; }
        /// <summary>
        /// Gets or Sets MembershipId
        /// </summary>
        [DataMember(Name="membership_id", EmitDefaultValue=false)]
        public Guid? MembershipId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationUserResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  UserStatus: ").Append(UserStatus).Append("\n");
            sb.Append("  MembershipStatus: ").Append(MembershipStatus).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  MembershipCreatedOn: ").Append(MembershipCreatedOn).Append("\n");
            sb.Append("  DsGroups: ").Append(DsGroups).Append("\n");
            sb.Append("  MembershipId: ").Append(MembershipId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrganizationUserResponse);
        }

        /// <summary>
        /// Returns true if OrganizationUserResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OrganizationUserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationUserResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.UserStatus == other.UserStatus ||
                    this.UserStatus != null &&
                    this.UserStatus.Equals(other.UserStatus)
                ) && 
                (
                    this.MembershipStatus == other.MembershipStatus ||
                    this.MembershipStatus != null &&
                    this.MembershipStatus.Equals(other.MembershipStatus)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.MembershipCreatedOn == other.MembershipCreatedOn ||
                    this.MembershipCreatedOn != null &&
                    this.MembershipCreatedOn.Equals(other.MembershipCreatedOn)
                ) && 
                (
                    this.DsGroups == other.DsGroups ||
                    this.DsGroups != null &&
                    this.DsGroups.SequenceEqual(other.DsGroups)
                ) && 
                (
                    this.MembershipId == other.MembershipId ||
                    this.MembershipId != null &&
                    this.MembershipId.Equals(other.MembershipId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.UserStatus != null)
                    hash = hash * 59 + this.UserStatus.GetHashCode();
                if (this.MembershipStatus != null)
                    hash = hash * 59 + this.MembershipStatus.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.MembershipCreatedOn != null)
                    hash = hash * 59 + this.MembershipCreatedOn.GetHashCode();
                if (this.DsGroups != null)
                    hash = hash * 59 + this.DsGroups.GetHashCode();
                if (this.MembershipId != null)
                    hash = hash * 59 + this.MembershipId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
