/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// SubscriptionProvisionModelAssetGroupWork
    /// </summary>
    [DataContract]
    public partial class SubscriptionProvisionModelAssetGroupWork :  IEquatable<SubscriptionProvisionModelAssetGroupWork>, IValidatableObject
    {
        public SubscriptionProvisionModelAssetGroupWork()
        {
            // Empty Constructor
        }

                /// <summary>
        /// Defines AssetGroupWorkType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetGroupWorkTypeEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum GroupAssetFulfillment for value: GroupAssetFulfillment
            /// </summary>
            [EnumMember(Value = "GroupAssetFulfillment")]
            GroupAssetFulfillment = 2,
            
            /// <summary>
            /// Enum AccountAssetFulfillment for value: AccountAssetFulfillment
            /// </summary>
            [EnumMember(Value = "AccountAssetFulfillment")]
            AccountAssetFulfillment = 3,
            
            /// <summary>
            /// Enum AccountAssetClone for value: AccountAssetClone
            /// </summary>
            [EnumMember(Value = "AccountAssetClone")]
            AccountAssetClone = 4,
            
            /// <summary>
            /// Enum AccountAssetCreate for value: AccountAssetCreate
            /// </summary>
            [EnumMember(Value = "AccountAssetCreate")]
            AccountAssetCreate = 5,
            
            /// <summary>
            /// Enum SubscriptionSync for value: SubscriptionSync
            /// </summary>
            [EnumMember(Value = "SubscriptionSync")]
            SubscriptionSync = 6
        }

                /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,
            
            /// <summary>
            /// Enum Processing for value: Processing
            /// </summary>
            [EnumMember(Value = "Processing")]
            Processing = 3,
            
            /// <summary>
            /// Enum ProcessingOnHold for value: ProcessingOnHold
            /// </summary>
            [EnumMember(Value = "ProcessingOnHold")]
            ProcessingOnHold = 4,
            
            /// <summary>
            /// Enum PendingError for value: PendingError
            /// </summary>
            [EnumMember(Value = "PendingError")]
            PendingError = 5,
            
            /// <summary>
            /// Enum ProcessingError for value: ProcessingError
            /// </summary>
            [EnumMember(Value = "ProcessingError")]
            ProcessingError = 6,
            
            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 7,
            
            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 8,
            
            /// <summary>
            /// Enum PermanentFailure for value: PermanentFailure
            /// </summary>
            [EnumMember(Value = "PermanentFailure")]
            PermanentFailure = 9
        }

                /// <summary>
        /// Defines CreatedByType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreatedByTypeEnum
        {
            
            /// <summary>
            /// Enum Application for value: Application
            /// </summary>
            [EnumMember(Value = "Application")]
            Application = 1,
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 2,
            
            /// <summary>
            /// Enum Generic for value: Generic
            /// </summary>
            [EnumMember(Value = "Generic")]
            Generic = 3,
            
            /// <summary>
            /// Enum RestAPIAuth for value: RestAPIAuth
            /// </summary>
            [EnumMember(Value = "RestAPIAuth")]
            RestAPIAuth = 4,
            
            /// <summary>
            /// Enum Resource for value: Resource
            /// </summary>
            [EnumMember(Value = "Resource")]
            Resource = 5,
            
            /// <summary>
            /// Enum Restricted for value: Restricted
            /// </summary>
            [EnumMember(Value = "Restricted")]
            Restricted = 6
        }

                /// <summary>
        /// Defines UpdatedByType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpdatedByTypeEnum
        {
            
            /// <summary>
            /// Enum Application for value: Application
            /// </summary>
            [EnumMember(Value = "Application")]
            Application = 1,
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 2,
            
            /// <summary>
            /// Enum Generic for value: Generic
            /// </summary>
            [EnumMember(Value = "Generic")]
            Generic = 3,
            
            /// <summary>
            /// Enum RestAPIAuth for value: RestAPIAuth
            /// </summary>
            [EnumMember(Value = "RestAPIAuth")]
            RestAPIAuth = 4,
            
            /// <summary>
            /// Enum Resource for value: Resource
            /// </summary>
            [EnumMember(Value = "Resource")]
            Resource = 5,
            
            /// <summary>
            /// Enum Restricted for value: Restricted
            /// </summary>
            [EnumMember(Value = "Restricted")]
            Restricted = 6
        }

        /// <summary>
        /// Gets or Sets AssetGroupWorkType
        /// </summary>
        [DataMember(Name="AssetGroupWorkType", EmitDefaultValue=false)]
        public AssetGroupWorkTypeEnum? AssetGroupWorkType { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Gets or Sets CreatedByType
        /// </summary>
        [DataMember(Name="CreatedByType", EmitDefaultValue=false)]
        public CreatedByTypeEnum? CreatedByType { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedByType
        /// </summary>
        [DataMember(Name="UpdatedByType", EmitDefaultValue=false)]
        public UpdatedByTypeEnum? UpdatedByType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionProvisionModelAssetGroupWork" /> class.
        /// </summary>
        /// <param name="AssetGroupWorkId">AssetGroupWorkId.</param>
        /// <param name="AssetGroupId">AssetGroupId.</param>
        /// <param name="AssetGroupWorkType">AssetGroupWorkType.</param>
        /// <param name="Status">Status.</param>
        /// <param name="OrderId">OrderId.</param>
        /// <param name="TargetAccountId">TargetAccountId.</param>
        /// <param name="SourceAccountId">SourceAccountId.</param>
        /// <param name="SourceAccountExternalId">SourceAccountExternalId.</param>
        /// <param name="SourceAccountName">SourceAccountName.</param>
        /// <param name="SourceAccountSite">SourceAccountSite.</param>
        /// <param name="CloneRequestId">CloneRequestId.</param>
        /// <param name="CloneAccountDetails">CloneAccountDetails.</param>
        /// <param name="CreateSubAccountDetails">CreateSubAccountDetails.</param>
        /// <param name="Attempts">Attempts.</param>
        /// <param name="RetryOn">RetryOn.</param>
        /// <param name="Message">Message.</param>
        /// <param name="CreatedByName">CreatedByName.</param>
        /// <param name="CreatedByEmail">CreatedByEmail.</param>
        /// <param name="ErrorDetails">ErrorDetails.</param>
        /// <param name="OldAssetGroupSubscriptionId">OldAssetGroupSubscriptionId.</param>
        /// <param name="NewAssetGroupSubscriptionId">NewAssetGroupSubscriptionId.</param>
        /// <param name="SourceSystem">SourceSystem.</param>
        /// <param name="SourceId">SourceId.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        /// <param name="CreatedByType">CreatedByType.</param>
        /// <param name="CreatedDate">CreatedDate.</param>
        /// <param name="UpdatedBy">UpdatedBy.</param>
        /// <param name="UpdatedByType">UpdatedByType.</param>
        /// <param name="UpdatedDate">UpdatedDate.</param>
        /// <param name="UpdateHistory">UpdateHistory.</param>
        public SubscriptionProvisionModelAssetGroupWork(Guid? AssetGroupWorkId = default(Guid?), Guid? AssetGroupId = default(Guid?), AssetGroupWorkTypeEnum? AssetGroupWorkType = default(AssetGroupWorkTypeEnum?), StatusEnum? Status = default(StatusEnum?), Guid? OrderId = default(Guid?), Guid? TargetAccountId = default(Guid?), Guid? SourceAccountId = default(Guid?), long? SourceAccountExternalId = default(long?), string SourceAccountName = default(string), string SourceAccountSite = default(string), Guid? CloneRequestId = default(Guid?), SubscriptionProvisionModelAccountCreateCreateAccountDetails CloneAccountDetails = default(SubscriptionProvisionModelAccountCreateCreateAccountDetails), SubscriptionProvisionModelAccountCreateCreateSubAccountDetails CreateSubAccountDetails = default(SubscriptionProvisionModelAccountCreateCreateSubAccountDetails), int? Attempts = default(int?), DateTime? RetryOn = default(DateTime?), string Message = default(string), string CreatedByName = default(string), string CreatedByEmail = default(string), SubscriptionProvisionModelServiceErrorDetails ErrorDetails = default(SubscriptionProvisionModelServiceErrorDetails), Guid? OldAssetGroupSubscriptionId = default(Guid?), Guid? NewAssetGroupSubscriptionId = default(Guid?), string SourceSystem = default(string), string SourceId = default(string), string CreatedBy = default(string), CreatedByTypeEnum? CreatedByType = default(CreatedByTypeEnum?), DateTime? CreatedDate = default(DateTime?), string UpdatedBy = default(string), UpdatedByTypeEnum? UpdatedByType = default(UpdatedByTypeEnum?), DateTime? UpdatedDate = default(DateTime?), List<SubscriptionProvisionModelChangeEvent> UpdateHistory = default(List<SubscriptionProvisionModelChangeEvent>))
        {
            this.AssetGroupWorkId = AssetGroupWorkId;
            this.AssetGroupId = AssetGroupId;
            this.AssetGroupWorkType = AssetGroupWorkType;
            this.Status = Status;
            this.OrderId = OrderId;
            this.TargetAccountId = TargetAccountId;
            this.SourceAccountId = SourceAccountId;
            this.SourceAccountExternalId = SourceAccountExternalId;
            this.SourceAccountName = SourceAccountName;
            this.SourceAccountSite = SourceAccountSite;
            this.CloneRequestId = CloneRequestId;
            this.CloneAccountDetails = CloneAccountDetails;
            this.CreateSubAccountDetails = CreateSubAccountDetails;
            this.Attempts = Attempts;
            this.RetryOn = RetryOn;
            this.Message = Message;
            this.CreatedByName = CreatedByName;
            this.CreatedByEmail = CreatedByEmail;
            this.ErrorDetails = ErrorDetails;
            this.OldAssetGroupSubscriptionId = OldAssetGroupSubscriptionId;
            this.NewAssetGroupSubscriptionId = NewAssetGroupSubscriptionId;
            this.SourceSystem = SourceSystem;
            this.SourceId = SourceId;
            this.CreatedBy = CreatedBy;
            this.CreatedByType = CreatedByType;
            this.CreatedDate = CreatedDate;
            this.UpdatedBy = UpdatedBy;
            this.UpdatedByType = UpdatedByType;
            this.UpdatedDate = UpdatedDate;
            this.UpdateHistory = UpdateHistory;
        }
        
        /// <summary>
        /// Gets or Sets AssetGroupWorkId
        /// </summary>
        [DataMember(Name="AssetGroupWorkId", EmitDefaultValue=false)]
        public Guid? AssetGroupWorkId { get; set; }
        /// <summary>
        /// Gets or Sets AssetGroupId
        /// </summary>
        [DataMember(Name="AssetGroupId", EmitDefaultValue=false)]
        public Guid? AssetGroupId { get; set; }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="OrderId", EmitDefaultValue=false)]
        public Guid? OrderId { get; set; }
        /// <summary>
        /// Gets or Sets TargetAccountId
        /// </summary>
        [DataMember(Name="TargetAccountId", EmitDefaultValue=false)]
        public Guid? TargetAccountId { get; set; }
        /// <summary>
        /// Gets or Sets SourceAccountId
        /// </summary>
        [DataMember(Name="SourceAccountId", EmitDefaultValue=false)]
        public Guid? SourceAccountId { get; set; }
        /// <summary>
        /// Gets or Sets SourceAccountExternalId
        /// </summary>
        [DataMember(Name="SourceAccountExternalId", EmitDefaultValue=false)]
        public long? SourceAccountExternalId { get; set; }
        /// <summary>
        /// Gets or Sets SourceAccountName
        /// </summary>
        [DataMember(Name="SourceAccountName", EmitDefaultValue=false)]
        public string SourceAccountName { get; set; }
        /// <summary>
        /// Gets or Sets SourceAccountSite
        /// </summary>
        [DataMember(Name="SourceAccountSite", EmitDefaultValue=false)]
        public string SourceAccountSite { get; set; }
        /// <summary>
        /// Gets or Sets CloneRequestId
        /// </summary>
        [DataMember(Name="CloneRequestId", EmitDefaultValue=false)]
        public Guid? CloneRequestId { get; set; }
        /// <summary>
        /// Gets or Sets CloneAccountDetails
        /// </summary>
        [DataMember(Name="CloneAccountDetails", EmitDefaultValue=false)]
        public SubscriptionProvisionModelAccountCreateCreateAccountDetails CloneAccountDetails { get; set; }
        /// <summary>
        /// Gets or Sets CreateSubAccountDetails
        /// </summary>
        [DataMember(Name="CreateSubAccountDetails", EmitDefaultValue=false)]
        public SubscriptionProvisionModelAccountCreateCreateSubAccountDetails CreateSubAccountDetails { get; set; }
        /// <summary>
        /// Gets or Sets Attempts
        /// </summary>
        [DataMember(Name="Attempts", EmitDefaultValue=false)]
        public int? Attempts { get; set; }
        /// <summary>
        /// Gets or Sets RetryOn
        /// </summary>
        [DataMember(Name="RetryOn", EmitDefaultValue=false)]
        public DateTime? RetryOn { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets CreatedByName
        /// </summary>
        [DataMember(Name="CreatedByName", EmitDefaultValue=false)]
        public string CreatedByName { get; set; }
        /// <summary>
        /// Gets or Sets CreatedByEmail
        /// </summary>
        [DataMember(Name="CreatedByEmail", EmitDefaultValue=false)]
        public string CreatedByEmail { get; set; }
        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="ErrorDetails", EmitDefaultValue=false)]
        public SubscriptionProvisionModelServiceErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Gets or Sets OldAssetGroupSubscriptionId
        /// </summary>
        [DataMember(Name="OldAssetGroupSubscriptionId", EmitDefaultValue=false)]
        public Guid? OldAssetGroupSubscriptionId { get; set; }
        /// <summary>
        /// Gets or Sets NewAssetGroupSubscriptionId
        /// </summary>
        [DataMember(Name="NewAssetGroupSubscriptionId", EmitDefaultValue=false)]
        public Guid? NewAssetGroupSubscriptionId { get; set; }
        /// <summary>
        /// Gets or Sets SourceSystem
        /// </summary>
        [DataMember(Name="SourceSystem", EmitDefaultValue=false)]
        public string SourceSystem { get; set; }
        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name="SourceId", EmitDefaultValue=false)]
        public string SourceId { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="CreatedBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="CreatedDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name="UpdatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="UpdatedDate", EmitDefaultValue=false)]
        public DateTime? UpdatedDate { get; set; }
        /// <summary>
        /// Gets or Sets UpdateHistory
        /// </summary>
        [DataMember(Name="UpdateHistory", EmitDefaultValue=false)]
        public List<SubscriptionProvisionModelChangeEvent> UpdateHistory { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionProvisionModelAssetGroupWork {\n");
            sb.Append("  AssetGroupWorkId: ").Append(AssetGroupWorkId).Append("\n");
            sb.Append("  AssetGroupId: ").Append(AssetGroupId).Append("\n");
            sb.Append("  AssetGroupWorkType: ").Append(AssetGroupWorkType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TargetAccountId: ").Append(TargetAccountId).Append("\n");
            sb.Append("  SourceAccountId: ").Append(SourceAccountId).Append("\n");
            sb.Append("  SourceAccountExternalId: ").Append(SourceAccountExternalId).Append("\n");
            sb.Append("  SourceAccountName: ").Append(SourceAccountName).Append("\n");
            sb.Append("  SourceAccountSite: ").Append(SourceAccountSite).Append("\n");
            sb.Append("  CloneRequestId: ").Append(CloneRequestId).Append("\n");
            sb.Append("  CloneAccountDetails: ").Append(CloneAccountDetails).Append("\n");
            sb.Append("  CreateSubAccountDetails: ").Append(CreateSubAccountDetails).Append("\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  RetryOn: ").Append(RetryOn).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  CreatedByEmail: ").Append(CreatedByEmail).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  OldAssetGroupSubscriptionId: ").Append(OldAssetGroupSubscriptionId).Append("\n");
            sb.Append("  NewAssetGroupSubscriptionId: ").Append(NewAssetGroupSubscriptionId).Append("\n");
            sb.Append("  SourceSystem: ").Append(SourceSystem).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedByType: ").Append(CreatedByType).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedByType: ").Append(UpdatedByType).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdateHistory: ").Append(UpdateHistory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubscriptionProvisionModelAssetGroupWork);
        }

        /// <summary>
        /// Returns true if SubscriptionProvisionModelAssetGroupWork instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionProvisionModelAssetGroupWork to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionProvisionModelAssetGroupWork other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AssetGroupWorkId == other.AssetGroupWorkId ||
                    this.AssetGroupWorkId != null &&
                    this.AssetGroupWorkId.Equals(other.AssetGroupWorkId)
                ) && 
                (
                    this.AssetGroupId == other.AssetGroupId ||
                    this.AssetGroupId != null &&
                    this.AssetGroupId.Equals(other.AssetGroupId)
                ) && 
                (
                    this.AssetGroupWorkType == other.AssetGroupWorkType ||
                    this.AssetGroupWorkType != null &&
                    this.AssetGroupWorkType.Equals(other.AssetGroupWorkType)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.TargetAccountId == other.TargetAccountId ||
                    this.TargetAccountId != null &&
                    this.TargetAccountId.Equals(other.TargetAccountId)
                ) && 
                (
                    this.SourceAccountId == other.SourceAccountId ||
                    this.SourceAccountId != null &&
                    this.SourceAccountId.Equals(other.SourceAccountId)
                ) && 
                (
                    this.SourceAccountExternalId == other.SourceAccountExternalId ||
                    this.SourceAccountExternalId != null &&
                    this.SourceAccountExternalId.Equals(other.SourceAccountExternalId)
                ) && 
                (
                    this.SourceAccountName == other.SourceAccountName ||
                    this.SourceAccountName != null &&
                    this.SourceAccountName.Equals(other.SourceAccountName)
                ) && 
                (
                    this.SourceAccountSite == other.SourceAccountSite ||
                    this.SourceAccountSite != null &&
                    this.SourceAccountSite.Equals(other.SourceAccountSite)
                ) && 
                (
                    this.CloneRequestId == other.CloneRequestId ||
                    this.CloneRequestId != null &&
                    this.CloneRequestId.Equals(other.CloneRequestId)
                ) && 
                (
                    this.CloneAccountDetails == other.CloneAccountDetails ||
                    this.CloneAccountDetails != null &&
                    this.CloneAccountDetails.Equals(other.CloneAccountDetails)
                ) && 
                (
                    this.CreateSubAccountDetails == other.CreateSubAccountDetails ||
                    this.CreateSubAccountDetails != null &&
                    this.CreateSubAccountDetails.Equals(other.CreateSubAccountDetails)
                ) && 
                (
                    this.Attempts == other.Attempts ||
                    this.Attempts != null &&
                    this.Attempts.Equals(other.Attempts)
                ) && 
                (
                    this.RetryOn == other.RetryOn ||
                    this.RetryOn != null &&
                    this.RetryOn.Equals(other.RetryOn)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.CreatedByName == other.CreatedByName ||
                    this.CreatedByName != null &&
                    this.CreatedByName.Equals(other.CreatedByName)
                ) && 
                (
                    this.CreatedByEmail == other.CreatedByEmail ||
                    this.CreatedByEmail != null &&
                    this.CreatedByEmail.Equals(other.CreatedByEmail)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.OldAssetGroupSubscriptionId == other.OldAssetGroupSubscriptionId ||
                    this.OldAssetGroupSubscriptionId != null &&
                    this.OldAssetGroupSubscriptionId.Equals(other.OldAssetGroupSubscriptionId)
                ) && 
                (
                    this.NewAssetGroupSubscriptionId == other.NewAssetGroupSubscriptionId ||
                    this.NewAssetGroupSubscriptionId != null &&
                    this.NewAssetGroupSubscriptionId.Equals(other.NewAssetGroupSubscriptionId)
                ) && 
                (
                    this.SourceSystem == other.SourceSystem ||
                    this.SourceSystem != null &&
                    this.SourceSystem.Equals(other.SourceSystem)
                ) && 
                (
                    this.SourceId == other.SourceId ||
                    this.SourceId != null &&
                    this.SourceId.Equals(other.SourceId)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.CreatedByType == other.CreatedByType ||
                    this.CreatedByType != null &&
                    this.CreatedByType.Equals(other.CreatedByType)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.UpdatedBy == other.UpdatedBy ||
                    this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(other.UpdatedBy)
                ) && 
                (
                    this.UpdatedByType == other.UpdatedByType ||
                    this.UpdatedByType != null &&
                    this.UpdatedByType.Equals(other.UpdatedByType)
                ) && 
                (
                    this.UpdatedDate == other.UpdatedDate ||
                    this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    this.UpdateHistory == other.UpdateHistory ||
                    this.UpdateHistory != null &&
                    this.UpdateHistory.SequenceEqual(other.UpdateHistory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AssetGroupWorkId != null)
                    hash = hash * 59 + this.AssetGroupWorkId.GetHashCode();
                if (this.AssetGroupId != null)
                    hash = hash * 59 + this.AssetGroupId.GetHashCode();
                if (this.AssetGroupWorkType != null)
                    hash = hash * 59 + this.AssetGroupWorkType.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.TargetAccountId != null)
                    hash = hash * 59 + this.TargetAccountId.GetHashCode();
                if (this.SourceAccountId != null)
                    hash = hash * 59 + this.SourceAccountId.GetHashCode();
                if (this.SourceAccountExternalId != null)
                    hash = hash * 59 + this.SourceAccountExternalId.GetHashCode();
                if (this.SourceAccountName != null)
                    hash = hash * 59 + this.SourceAccountName.GetHashCode();
                if (this.SourceAccountSite != null)
                    hash = hash * 59 + this.SourceAccountSite.GetHashCode();
                if (this.CloneRequestId != null)
                    hash = hash * 59 + this.CloneRequestId.GetHashCode();
                if (this.CloneAccountDetails != null)
                    hash = hash * 59 + this.CloneAccountDetails.GetHashCode();
                if (this.CreateSubAccountDetails != null)
                    hash = hash * 59 + this.CreateSubAccountDetails.GetHashCode();
                if (this.Attempts != null)
                    hash = hash * 59 + this.Attempts.GetHashCode();
                if (this.RetryOn != null)
                    hash = hash * 59 + this.RetryOn.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.CreatedByName != null)
                    hash = hash * 59 + this.CreatedByName.GetHashCode();
                if (this.CreatedByEmail != null)
                    hash = hash * 59 + this.CreatedByEmail.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.OldAssetGroupSubscriptionId != null)
                    hash = hash * 59 + this.OldAssetGroupSubscriptionId.GetHashCode();
                if (this.NewAssetGroupSubscriptionId != null)
                    hash = hash * 59 + this.NewAssetGroupSubscriptionId.GetHashCode();
                if (this.SourceSystem != null)
                    hash = hash * 59 + this.SourceSystem.GetHashCode();
                if (this.SourceId != null)
                    hash = hash * 59 + this.SourceId.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedByType != null)
                    hash = hash * 59 + this.CreatedByType.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.UpdatedBy != null)
                    hash = hash * 59 + this.UpdatedBy.GetHashCode();
                if (this.UpdatedByType != null)
                    hash = hash * 59 + this.UpdatedByType.GetHashCode();
                if (this.UpdatedDate != null)
                    hash = hash * 59 + this.UpdatedDate.GetHashCode();
                if (this.UpdateHistory != null)
                    hash = hash * 59 + this.UpdateHistory.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
