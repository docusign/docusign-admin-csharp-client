/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// SubAccountCreateSubscriptionModuleDetails
    /// </summary>
    [DataContract]
    public partial class SubAccountCreateSubscriptionModuleDetails :  IEquatable<SubAccountCreateSubscriptionModuleDetails>, IValidatableObject
    {
        public SubAccountCreateSubscriptionModuleDetails()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountCreateSubscriptionModuleDetails" /> class.
        /// </summary>
        /// <param name="ModuleId">Module ID.</param>
        /// <param name="ModuleName">Module Name.</param>
        public SubAccountCreateSubscriptionModuleDetails(Guid? ModuleId = default(Guid?), string ModuleName = default(string))
        {
            this.ModuleId = ModuleId;
            this.ModuleName = ModuleName;
        }
        
        /// <summary>
        /// Module ID
        /// </summary>
        /// <value>Module ID</value>
        [DataMember(Name="moduleId", EmitDefaultValue=false)]
        public Guid? ModuleId { get; set; }
        /// <summary>
        /// Module Name
        /// </summary>
        /// <value>Module Name</value>
        [DataMember(Name="moduleName", EmitDefaultValue=false)]
        public string ModuleName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountCreateSubscriptionModuleDetails {\n");
            sb.Append("  ModuleId: ").Append(ModuleId).Append("\n");
            sb.Append("  ModuleName: ").Append(ModuleName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubAccountCreateSubscriptionModuleDetails);
        }

        /// <summary>
        /// Returns true if SubAccountCreateSubscriptionModuleDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of SubAccountCreateSubscriptionModuleDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountCreateSubscriptionModuleDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ModuleId == other.ModuleId ||
                    this.ModuleId != null &&
                    this.ModuleId.Equals(other.ModuleId)
                ) && 
                (
                    this.ModuleName == other.ModuleName ||
                    this.ModuleName != null &&
                    this.ModuleName.Equals(other.ModuleName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ModuleId != null)
                    hash = hash * 59 + this.ModuleId.GetHashCode();
                if (this.ModuleName != null)
                    hash = hash * 59 + this.ModuleName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
