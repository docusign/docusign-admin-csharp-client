/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// SubAccountErrorDetails
    /// </summary>
    [DataContract]
    public partial class SubAccountErrorDetails :  IEquatable<SubAccountErrorDetails>, IValidatableObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountErrorDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SubAccountErrorDetails()
        {
        }
        
        /// <summary>
        /// The error code.
        /// </summary>
        /// <value>The error code.</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; private set; }
        /// <summary>
        /// The error description.
        /// </summary>
        /// <value>The error description.</value>
        [DataMember(Name="errorDescription", EmitDefaultValue=false)]
        public string ErrorDescription { get; private set; }
        /// <summary>
        /// Whether the error is caused by the system or user.
        /// </summary>
        /// <value>Whether the error is caused by the system or user.</value>
        [DataMember(Name="isSystemError", EmitDefaultValue=false)]
        public bool? IsSystemError { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountErrorDetails {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorDescription: ").Append(ErrorDescription).Append("\n");
            sb.Append("  IsSystemError: ").Append(IsSystemError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubAccountErrorDetails);
        }

        /// <summary>
        /// Returns true if SubAccountErrorDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of SubAccountErrorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountErrorDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.ErrorDescription == other.ErrorDescription ||
                    this.ErrorDescription != null &&
                    this.ErrorDescription.Equals(other.ErrorDescription)
                ) && 
                (
                    this.IsSystemError == other.IsSystemError ||
                    this.IsSystemError != null &&
                    this.IsSystemError.Equals(other.IsSystemError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.ErrorDescription != null)
                    hash = hash * 59 + this.ErrorDescription.GetHashCode();
                if (this.IsSystemError != null)
                    hash = hash * 59 + this.IsSystemError.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
