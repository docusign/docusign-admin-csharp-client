/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// OrganizationImportResponse
    /// </summary>
    [DataContract]
    public partial class OrganizationImportResponse :  IEquatable<OrganizationImportResponse>, IValidatableObject
    {
        public OrganizationImportResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationImportResponse" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Requestor">Requestor.</param>
        /// <param name="Created">Created.</param>
        /// <param name="LastModified">LastModified.</param>
        /// <param name="Status">Status.</param>
        /// <param name="UserCount">UserCount.</param>
        /// <param name="ProcessedUserCount">ProcessedUserCount.</param>
        /// <param name="AddedUserCount">AddedUserCount.</param>
        /// <param name="UpdatedUserCount">UpdatedUserCount.</param>
        /// <param name="ClosedUserCount">ClosedUserCount.</param>
        /// <param name="NoActionRequiredUserCount">NoActionRequiredUserCount.</param>
        /// <param name="ErrorCount">ErrorCount.</param>
        /// <param name="WarningCount">WarningCount.</param>
        /// <param name="InvalidColumnHeaders">InvalidColumnHeaders.</param>
        /// <param name="ImportsNotFoundOrNotAvailableForAccounts">ImportsNotFoundOrNotAvailableForAccounts.</param>
        /// <param name="ImportsFailedForAccounts">ImportsFailedForAccounts.</param>
        /// <param name="ImportsTimedOutForAccounts">ImportsTimedOutForAccounts.</param>
        /// <param name="ImportsNotFoundOrNotAvailableForSites">ImportsNotFoundOrNotAvailableForSites.</param>
        /// <param name="ImportsFailedForSites">ImportsFailedForSites.</param>
        /// <param name="ImportsTimedOutForSites">ImportsTimedOutForSites.</param>
        /// <param name="FileLevelErrorRollups">FileLevelErrorRollups.</param>
        /// <param name="UserLevelErrorRollups">UserLevelErrorRollups.</param>
        /// <param name="UserLevelWarningRollups">UserLevelWarningRollups.</param>
        /// <param name="HasCsvResults">HasCsvResults.</param>
        /// <param name="ResultsUri">ResultsUri.</param>
        public OrganizationImportResponse(Guid? Id = default(Guid?), string Type = default(string), OrganizationImportResponseRequestor Requestor = default(OrganizationImportResponseRequestor), DateTime? Created = default(DateTime?), DateTime? LastModified = default(DateTime?), string Status = default(string), int? UserCount = default(int?), int? ProcessedUserCount = default(int?), int? AddedUserCount = default(int?), int? UpdatedUserCount = default(int?), int? ClosedUserCount = default(int?), int? NoActionRequiredUserCount = default(int?), int? ErrorCount = default(int?), int? WarningCount = default(int?), string InvalidColumnHeaders = default(string), string ImportsNotFoundOrNotAvailableForAccounts = default(string), string ImportsFailedForAccounts = default(string), string ImportsTimedOutForAccounts = default(string), string ImportsNotFoundOrNotAvailableForSites = default(string), string ImportsFailedForSites = default(string), string ImportsTimedOutForSites = default(string), List<OrganizationImportResponseErrorRollup> FileLevelErrorRollups = default(List<OrganizationImportResponseErrorRollup>), List<OrganizationImportResponseErrorRollup> UserLevelErrorRollups = default(List<OrganizationImportResponseErrorRollup>), List<OrganizationImportResponseWarningRollup> UserLevelWarningRollups = default(List<OrganizationImportResponseWarningRollup>), bool? HasCsvResults = default(bool?), string ResultsUri = default(string))
        {
            this.Id = Id;
            this.Type = Type;
            this.Requestor = Requestor;
            this.Created = Created;
            this.LastModified = LastModified;
            this.Status = Status;
            this.UserCount = UserCount;
            this.ProcessedUserCount = ProcessedUserCount;
            this.AddedUserCount = AddedUserCount;
            this.UpdatedUserCount = UpdatedUserCount;
            this.ClosedUserCount = ClosedUserCount;
            this.NoActionRequiredUserCount = NoActionRequiredUserCount;
            this.ErrorCount = ErrorCount;
            this.WarningCount = WarningCount;
            this.InvalidColumnHeaders = InvalidColumnHeaders;
            this.ImportsNotFoundOrNotAvailableForAccounts = ImportsNotFoundOrNotAvailableForAccounts;
            this.ImportsFailedForAccounts = ImportsFailedForAccounts;
            this.ImportsTimedOutForAccounts = ImportsTimedOutForAccounts;
            this.ImportsNotFoundOrNotAvailableForSites = ImportsNotFoundOrNotAvailableForSites;
            this.ImportsFailedForSites = ImportsFailedForSites;
            this.ImportsTimedOutForSites = ImportsTimedOutForSites;
            this.FileLevelErrorRollups = FileLevelErrorRollups;
            this.UserLevelErrorRollups = UserLevelErrorRollups;
            this.UserLevelWarningRollups = UserLevelWarningRollups;
            this.HasCsvResults = HasCsvResults;
            this.ResultsUri = ResultsUri;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Requestor
        /// </summary>
        [DataMember(Name="requestor", EmitDefaultValue=false)]
        public OrganizationImportResponseRequestor Requestor { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public DateTime? LastModified { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets UserCount
        /// </summary>
        [DataMember(Name="user_count", EmitDefaultValue=false)]
        public int? UserCount { get; set; }
        /// <summary>
        /// Gets or Sets ProcessedUserCount
        /// </summary>
        [DataMember(Name="processed_user_count", EmitDefaultValue=false)]
        public int? ProcessedUserCount { get; set; }
        /// <summary>
        /// Gets or Sets AddedUserCount
        /// </summary>
        [DataMember(Name="added_user_count", EmitDefaultValue=false)]
        public int? AddedUserCount { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedUserCount
        /// </summary>
        [DataMember(Name="updated_user_count", EmitDefaultValue=false)]
        public int? UpdatedUserCount { get; set; }
        /// <summary>
        /// Gets or Sets ClosedUserCount
        /// </summary>
        [DataMember(Name="closed_user_count", EmitDefaultValue=false)]
        public int? ClosedUserCount { get; set; }
        /// <summary>
        /// Gets or Sets NoActionRequiredUserCount
        /// </summary>
        [DataMember(Name="no_action_required_user_count", EmitDefaultValue=false)]
        public int? NoActionRequiredUserCount { get; set; }
        /// <summary>
        /// Gets or Sets ErrorCount
        /// </summary>
        [DataMember(Name="error_count", EmitDefaultValue=false)]
        public int? ErrorCount { get; set; }
        /// <summary>
        /// Gets or Sets WarningCount
        /// </summary>
        [DataMember(Name="warning_count", EmitDefaultValue=false)]
        public int? WarningCount { get; set; }
        /// <summary>
        /// Gets or Sets InvalidColumnHeaders
        /// </summary>
        [DataMember(Name="invalid_column_headers", EmitDefaultValue=false)]
        public string InvalidColumnHeaders { get; set; }
        /// <summary>
        /// Gets or Sets ImportsNotFoundOrNotAvailableForAccounts
        /// </summary>
        [DataMember(Name="imports_not_found_or_not_available_for_accounts", EmitDefaultValue=false)]
        public string ImportsNotFoundOrNotAvailableForAccounts { get; set; }
        /// <summary>
        /// Gets or Sets ImportsFailedForAccounts
        /// </summary>
        [DataMember(Name="imports_failed_for_accounts", EmitDefaultValue=false)]
        public string ImportsFailedForAccounts { get; set; }
        /// <summary>
        /// Gets or Sets ImportsTimedOutForAccounts
        /// </summary>
        [DataMember(Name="imports_timed_out_for_accounts", EmitDefaultValue=false)]
        public string ImportsTimedOutForAccounts { get; set; }
        /// <summary>
        /// Gets or Sets ImportsNotFoundOrNotAvailableForSites
        /// </summary>
        [DataMember(Name="imports_not_found_or_not_available_for_sites", EmitDefaultValue=false)]
        public string ImportsNotFoundOrNotAvailableForSites { get; set; }
        /// <summary>
        /// Gets or Sets ImportsFailedForSites
        /// </summary>
        [DataMember(Name="imports_failed_for_sites", EmitDefaultValue=false)]
        public string ImportsFailedForSites { get; set; }
        /// <summary>
        /// Gets or Sets ImportsTimedOutForSites
        /// </summary>
        [DataMember(Name="imports_timed_out_for_sites", EmitDefaultValue=false)]
        public string ImportsTimedOutForSites { get; set; }
        /// <summary>
        /// Gets or Sets FileLevelErrorRollups
        /// </summary>
        [DataMember(Name="file_level_error_rollups", EmitDefaultValue=false)]
        public List<OrganizationImportResponseErrorRollup> FileLevelErrorRollups { get; set; }
        /// <summary>
        /// Gets or Sets UserLevelErrorRollups
        /// </summary>
        [DataMember(Name="user_level_error_rollups", EmitDefaultValue=false)]
        public List<OrganizationImportResponseErrorRollup> UserLevelErrorRollups { get; set; }
        /// <summary>
        /// Gets or Sets UserLevelWarningRollups
        /// </summary>
        [DataMember(Name="user_level_warning_rollups", EmitDefaultValue=false)]
        public List<OrganizationImportResponseWarningRollup> UserLevelWarningRollups { get; set; }
        /// <summary>
        /// Gets or Sets HasCsvResults
        /// </summary>
        [DataMember(Name="has_csv_results", EmitDefaultValue=false)]
        public bool? HasCsvResults { get; set; }
        /// <summary>
        /// Gets or Sets ResultsUri
        /// </summary>
        [DataMember(Name="results_uri", EmitDefaultValue=false)]
        public string ResultsUri { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationImportResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Requestor: ").Append(Requestor).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  ProcessedUserCount: ").Append(ProcessedUserCount).Append("\n");
            sb.Append("  AddedUserCount: ").Append(AddedUserCount).Append("\n");
            sb.Append("  UpdatedUserCount: ").Append(UpdatedUserCount).Append("\n");
            sb.Append("  ClosedUserCount: ").Append(ClosedUserCount).Append("\n");
            sb.Append("  NoActionRequiredUserCount: ").Append(NoActionRequiredUserCount).Append("\n");
            sb.Append("  ErrorCount: ").Append(ErrorCount).Append("\n");
            sb.Append("  WarningCount: ").Append(WarningCount).Append("\n");
            sb.Append("  InvalidColumnHeaders: ").Append(InvalidColumnHeaders).Append("\n");
            sb.Append("  ImportsNotFoundOrNotAvailableForAccounts: ").Append(ImportsNotFoundOrNotAvailableForAccounts).Append("\n");
            sb.Append("  ImportsFailedForAccounts: ").Append(ImportsFailedForAccounts).Append("\n");
            sb.Append("  ImportsTimedOutForAccounts: ").Append(ImportsTimedOutForAccounts).Append("\n");
            sb.Append("  ImportsNotFoundOrNotAvailableForSites: ").Append(ImportsNotFoundOrNotAvailableForSites).Append("\n");
            sb.Append("  ImportsFailedForSites: ").Append(ImportsFailedForSites).Append("\n");
            sb.Append("  ImportsTimedOutForSites: ").Append(ImportsTimedOutForSites).Append("\n");
            sb.Append("  FileLevelErrorRollups: ").Append(FileLevelErrorRollups).Append("\n");
            sb.Append("  UserLevelErrorRollups: ").Append(UserLevelErrorRollups).Append("\n");
            sb.Append("  UserLevelWarningRollups: ").Append(UserLevelWarningRollups).Append("\n");
            sb.Append("  HasCsvResults: ").Append(HasCsvResults).Append("\n");
            sb.Append("  ResultsUri: ").Append(ResultsUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrganizationImportResponse);
        }

        /// <summary>
        /// Returns true if OrganizationImportResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OrganizationImportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationImportResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Requestor == other.Requestor ||
                    this.Requestor != null &&
                    this.Requestor.Equals(other.Requestor)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.LastModified == other.LastModified ||
                    this.LastModified != null &&
                    this.LastModified.Equals(other.LastModified)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.UserCount == other.UserCount ||
                    this.UserCount != null &&
                    this.UserCount.Equals(other.UserCount)
                ) && 
                (
                    this.ProcessedUserCount == other.ProcessedUserCount ||
                    this.ProcessedUserCount != null &&
                    this.ProcessedUserCount.Equals(other.ProcessedUserCount)
                ) && 
                (
                    this.AddedUserCount == other.AddedUserCount ||
                    this.AddedUserCount != null &&
                    this.AddedUserCount.Equals(other.AddedUserCount)
                ) && 
                (
                    this.UpdatedUserCount == other.UpdatedUserCount ||
                    this.UpdatedUserCount != null &&
                    this.UpdatedUserCount.Equals(other.UpdatedUserCount)
                ) && 
                (
                    this.ClosedUserCount == other.ClosedUserCount ||
                    this.ClosedUserCount != null &&
                    this.ClosedUserCount.Equals(other.ClosedUserCount)
                ) && 
                (
                    this.NoActionRequiredUserCount == other.NoActionRequiredUserCount ||
                    this.NoActionRequiredUserCount != null &&
                    this.NoActionRequiredUserCount.Equals(other.NoActionRequiredUserCount)
                ) && 
                (
                    this.ErrorCount == other.ErrorCount ||
                    this.ErrorCount != null &&
                    this.ErrorCount.Equals(other.ErrorCount)
                ) && 
                (
                    this.WarningCount == other.WarningCount ||
                    this.WarningCount != null &&
                    this.WarningCount.Equals(other.WarningCount)
                ) && 
                (
                    this.InvalidColumnHeaders == other.InvalidColumnHeaders ||
                    this.InvalidColumnHeaders != null &&
                    this.InvalidColumnHeaders.Equals(other.InvalidColumnHeaders)
                ) && 
                (
                    this.ImportsNotFoundOrNotAvailableForAccounts == other.ImportsNotFoundOrNotAvailableForAccounts ||
                    this.ImportsNotFoundOrNotAvailableForAccounts != null &&
                    this.ImportsNotFoundOrNotAvailableForAccounts.Equals(other.ImportsNotFoundOrNotAvailableForAccounts)
                ) && 
                (
                    this.ImportsFailedForAccounts == other.ImportsFailedForAccounts ||
                    this.ImportsFailedForAccounts != null &&
                    this.ImportsFailedForAccounts.Equals(other.ImportsFailedForAccounts)
                ) && 
                (
                    this.ImportsTimedOutForAccounts == other.ImportsTimedOutForAccounts ||
                    this.ImportsTimedOutForAccounts != null &&
                    this.ImportsTimedOutForAccounts.Equals(other.ImportsTimedOutForAccounts)
                ) && 
                (
                    this.ImportsNotFoundOrNotAvailableForSites == other.ImportsNotFoundOrNotAvailableForSites ||
                    this.ImportsNotFoundOrNotAvailableForSites != null &&
                    this.ImportsNotFoundOrNotAvailableForSites.Equals(other.ImportsNotFoundOrNotAvailableForSites)
                ) && 
                (
                    this.ImportsFailedForSites == other.ImportsFailedForSites ||
                    this.ImportsFailedForSites != null &&
                    this.ImportsFailedForSites.Equals(other.ImportsFailedForSites)
                ) && 
                (
                    this.ImportsTimedOutForSites == other.ImportsTimedOutForSites ||
                    this.ImportsTimedOutForSites != null &&
                    this.ImportsTimedOutForSites.Equals(other.ImportsTimedOutForSites)
                ) && 
                (
                    this.FileLevelErrorRollups == other.FileLevelErrorRollups ||
                    this.FileLevelErrorRollups != null &&
                    this.FileLevelErrorRollups.SequenceEqual(other.FileLevelErrorRollups)
                ) && 
                (
                    this.UserLevelErrorRollups == other.UserLevelErrorRollups ||
                    this.UserLevelErrorRollups != null &&
                    this.UserLevelErrorRollups.SequenceEqual(other.UserLevelErrorRollups)
                ) && 
                (
                    this.UserLevelWarningRollups == other.UserLevelWarningRollups ||
                    this.UserLevelWarningRollups != null &&
                    this.UserLevelWarningRollups.SequenceEqual(other.UserLevelWarningRollups)
                ) && 
                (
                    this.HasCsvResults == other.HasCsvResults ||
                    this.HasCsvResults != null &&
                    this.HasCsvResults.Equals(other.HasCsvResults)
                ) && 
                (
                    this.ResultsUri == other.ResultsUri ||
                    this.ResultsUri != null &&
                    this.ResultsUri.Equals(other.ResultsUri)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Requestor != null)
                    hash = hash * 59 + this.Requestor.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.LastModified != null)
                    hash = hash * 59 + this.LastModified.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.UserCount != null)
                    hash = hash * 59 + this.UserCount.GetHashCode();
                if (this.ProcessedUserCount != null)
                    hash = hash * 59 + this.ProcessedUserCount.GetHashCode();
                if (this.AddedUserCount != null)
                    hash = hash * 59 + this.AddedUserCount.GetHashCode();
                if (this.UpdatedUserCount != null)
                    hash = hash * 59 + this.UpdatedUserCount.GetHashCode();
                if (this.ClosedUserCount != null)
                    hash = hash * 59 + this.ClosedUserCount.GetHashCode();
                if (this.NoActionRequiredUserCount != null)
                    hash = hash * 59 + this.NoActionRequiredUserCount.GetHashCode();
                if (this.ErrorCount != null)
                    hash = hash * 59 + this.ErrorCount.GetHashCode();
                if (this.WarningCount != null)
                    hash = hash * 59 + this.WarningCount.GetHashCode();
                if (this.InvalidColumnHeaders != null)
                    hash = hash * 59 + this.InvalidColumnHeaders.GetHashCode();
                if (this.ImportsNotFoundOrNotAvailableForAccounts != null)
                    hash = hash * 59 + this.ImportsNotFoundOrNotAvailableForAccounts.GetHashCode();
                if (this.ImportsFailedForAccounts != null)
                    hash = hash * 59 + this.ImportsFailedForAccounts.GetHashCode();
                if (this.ImportsTimedOutForAccounts != null)
                    hash = hash * 59 + this.ImportsTimedOutForAccounts.GetHashCode();
                if (this.ImportsNotFoundOrNotAvailableForSites != null)
                    hash = hash * 59 + this.ImportsNotFoundOrNotAvailableForSites.GetHashCode();
                if (this.ImportsFailedForSites != null)
                    hash = hash * 59 + this.ImportsFailedForSites.GetHashCode();
                if (this.ImportsTimedOutForSites != null)
                    hash = hash * 59 + this.ImportsTimedOutForSites.GetHashCode();
                if (this.FileLevelErrorRollups != null)
                    hash = hash * 59 + this.FileLevelErrorRollups.GetHashCode();
                if (this.UserLevelErrorRollups != null)
                    hash = hash * 59 + this.UserLevelErrorRollups.GetHashCode();
                if (this.UserLevelWarningRollups != null)
                    hash = hash * 59 + this.UserLevelWarningRollups.GetHashCode();
                if (this.HasCsvResults != null)
                    hash = hash * 59 + this.HasCsvResults.GetHashCode();
                if (this.ResultsUri != null)
                    hash = hash * 59 + this.ResultsUri.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
