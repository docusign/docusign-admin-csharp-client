/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// OrganizationSubscriptionResponse
    /// </summary>
    [DataContract]
    public partial class OrganizationSubscriptionResponse :  IEquatable<OrganizationSubscriptionResponse>, IValidatableObject
    {
        public OrganizationSubscriptionResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSubscriptionResponse" /> class.
        /// </summary>
        /// <param name="PlanId">PlanId.</param>
        /// <param name="PlanName">PlanName.</param>
        /// <param name="AssociatedAccountsCount">AssociatedAccountsCount.</param>
        /// <param name="AssetGroupName">AssetGroupName.</param>
        /// <param name="AssetGroupId">AssetGroupId.</param>
        /// <param name="SubscriptionName">SubscriptionName.</param>
        /// <param name="SubscriptionId">SubscriptionId.</param>
        /// <param name="Modules">Modules.</param>
        public OrganizationSubscriptionResponse(Guid? PlanId = default(Guid?), string PlanName = default(string), int? AssociatedAccountsCount = default(int?), string AssetGroupName = default(string), Guid? AssetGroupId = default(Guid?), string SubscriptionName = default(string), string SubscriptionId = default(string), List<SubscriptionPlanItemResponse> Modules = default(List<SubscriptionPlanItemResponse>))
        {
            this.PlanId = PlanId;
            this.PlanName = PlanName;
            this.AssociatedAccountsCount = AssociatedAccountsCount;
            this.AssetGroupName = AssetGroupName;
            this.AssetGroupId = AssetGroupId;
            this.SubscriptionName = SubscriptionName;
            this.SubscriptionId = SubscriptionId;
            this.Modules = Modules;
        }
        
        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        [DataMember(Name="plan_id", EmitDefaultValue=false)]
        public Guid? PlanId { get; set; }
        /// <summary>
        /// Gets or Sets PlanName
        /// </summary>
        [DataMember(Name="plan_name", EmitDefaultValue=false)]
        public string PlanName { get; set; }
        /// <summary>
        /// Gets or Sets AssociatedAccountsCount
        /// </summary>
        [DataMember(Name="associated_accounts_count", EmitDefaultValue=false)]
        public int? AssociatedAccountsCount { get; set; }
        /// <summary>
        /// Gets or Sets AssetGroupName
        /// </summary>
        [DataMember(Name="asset_group_name", EmitDefaultValue=false)]
        public string AssetGroupName { get; set; }
        /// <summary>
        /// Gets or Sets AssetGroupId
        /// </summary>
        [DataMember(Name="asset_group_id", EmitDefaultValue=false)]
        public Guid? AssetGroupId { get; set; }
        /// <summary>
        /// Gets or Sets SubscriptionName
        /// </summary>
        [DataMember(Name="subscription_name", EmitDefaultValue=false)]
        public string SubscriptionName { get; set; }
        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name="subscription_id", EmitDefaultValue=false)]
        public string SubscriptionId { get; set; }
        /// <summary>
        /// Gets or Sets Modules
        /// </summary>
        [DataMember(Name="modules", EmitDefaultValue=false)]
        public List<SubscriptionPlanItemResponse> Modules { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationSubscriptionResponse {\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  AssociatedAccountsCount: ").Append(AssociatedAccountsCount).Append("\n");
            sb.Append("  AssetGroupName: ").Append(AssetGroupName).Append("\n");
            sb.Append("  AssetGroupId: ").Append(AssetGroupId).Append("\n");
            sb.Append("  SubscriptionName: ").Append(SubscriptionName).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrganizationSubscriptionResponse);
        }

        /// <summary>
        /// Returns true if OrganizationSubscriptionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OrganizationSubscriptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationSubscriptionResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PlanId == other.PlanId ||
                    this.PlanId != null &&
                    this.PlanId.Equals(other.PlanId)
                ) && 
                (
                    this.PlanName == other.PlanName ||
                    this.PlanName != null &&
                    this.PlanName.Equals(other.PlanName)
                ) && 
                (
                    this.AssociatedAccountsCount == other.AssociatedAccountsCount ||
                    this.AssociatedAccountsCount != null &&
                    this.AssociatedAccountsCount.Equals(other.AssociatedAccountsCount)
                ) && 
                (
                    this.AssetGroupName == other.AssetGroupName ||
                    this.AssetGroupName != null &&
                    this.AssetGroupName.Equals(other.AssetGroupName)
                ) && 
                (
                    this.AssetGroupId == other.AssetGroupId ||
                    this.AssetGroupId != null &&
                    this.AssetGroupId.Equals(other.AssetGroupId)
                ) && 
                (
                    this.SubscriptionName == other.SubscriptionName ||
                    this.SubscriptionName != null &&
                    this.SubscriptionName.Equals(other.SubscriptionName)
                ) && 
                (
                    this.SubscriptionId == other.SubscriptionId ||
                    this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(other.SubscriptionId)
                ) && 
                (
                    this.Modules == other.Modules ||
                    this.Modules != null &&
                    this.Modules.SequenceEqual(other.Modules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PlanId != null)
                    hash = hash * 59 + this.PlanId.GetHashCode();
                if (this.PlanName != null)
                    hash = hash * 59 + this.PlanName.GetHashCode();
                if (this.AssociatedAccountsCount != null)
                    hash = hash * 59 + this.AssociatedAccountsCount.GetHashCode();
                if (this.AssetGroupName != null)
                    hash = hash * 59 + this.AssetGroupName.GetHashCode();
                if (this.AssetGroupId != null)
                    hash = hash * 59 + this.AssetGroupId.GetHashCode();
                if (this.SubscriptionName != null)
                    hash = hash * 59 + this.SubscriptionName.GetHashCode();
                if (this.SubscriptionId != null)
                    hash = hash * 59 + this.SubscriptionId.GetHashCode();
                if (this.Modules != null)
                    hash = hash * 59 + this.Modules.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
