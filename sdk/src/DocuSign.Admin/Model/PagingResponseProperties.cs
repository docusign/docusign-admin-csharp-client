/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// PagingResponseProperties
    /// </summary>
    [DataContract]
    public partial class PagingResponseProperties :  IEquatable<PagingResponseProperties>, IValidatableObject
    {
        public PagingResponseProperties()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PagingResponseProperties" /> class.
        /// </summary>
        /// <param name="ResultSetSize">ResultSetSize.</param>
        /// <param name="ResultSetStartPosition">ResultSetStartPosition.</param>
        /// <param name="ResultSetEndPosition">ResultSetEndPosition.</param>
        /// <param name="TotalSetSize">TotalSetSize.</param>
        /// <param name="Next">Next.</param>
        /// <param name="Previous">Previous.</param>
        public PagingResponseProperties(int? ResultSetSize = default(int?), int? ResultSetStartPosition = default(int?), int? ResultSetEndPosition = default(int?), int? TotalSetSize = default(int?), string Next = default(string), string Previous = default(string))
        {
            this.ResultSetSize = ResultSetSize;
            this.ResultSetStartPosition = ResultSetStartPosition;
            this.ResultSetEndPosition = ResultSetEndPosition;
            this.TotalSetSize = TotalSetSize;
            this.Next = Next;
            this.Previous = Previous;
        }
        
        /// <summary>
        /// Gets or Sets ResultSetSize
        /// </summary>
        [DataMember(Name="result_set_size", EmitDefaultValue=false)]
        public int? ResultSetSize { get; set; }
        /// <summary>
        /// Gets or Sets ResultSetStartPosition
        /// </summary>
        [DataMember(Name="result_set_start_position", EmitDefaultValue=false)]
        public int? ResultSetStartPosition { get; set; }
        /// <summary>
        /// Gets or Sets ResultSetEndPosition
        /// </summary>
        [DataMember(Name="result_set_end_position", EmitDefaultValue=false)]
        public int? ResultSetEndPosition { get; set; }
        /// <summary>
        /// Gets or Sets TotalSetSize
        /// </summary>
        [DataMember(Name="total_set_size", EmitDefaultValue=false)]
        public int? TotalSetSize { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public string Next { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name="previous", EmitDefaultValue=false)]
        public string Previous { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagingResponseProperties {\n");
            sb.Append("  ResultSetSize: ").Append(ResultSetSize).Append("\n");
            sb.Append("  ResultSetStartPosition: ").Append(ResultSetStartPosition).Append("\n");
            sb.Append("  ResultSetEndPosition: ").Append(ResultSetEndPosition).Append("\n");
            sb.Append("  TotalSetSize: ").Append(TotalSetSize).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PagingResponseProperties);
        }

        /// <summary>
        /// Returns true if PagingResponseProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of PagingResponseProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagingResponseProperties other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ResultSetSize == other.ResultSetSize ||
                    this.ResultSetSize != null &&
                    this.ResultSetSize.Equals(other.ResultSetSize)
                ) && 
                (
                    this.ResultSetStartPosition == other.ResultSetStartPosition ||
                    this.ResultSetStartPosition != null &&
                    this.ResultSetStartPosition.Equals(other.ResultSetStartPosition)
                ) && 
                (
                    this.ResultSetEndPosition == other.ResultSetEndPosition ||
                    this.ResultSetEndPosition != null &&
                    this.ResultSetEndPosition.Equals(other.ResultSetEndPosition)
                ) && 
                (
                    this.TotalSetSize == other.TotalSetSize ||
                    this.TotalSetSize != null &&
                    this.TotalSetSize.Equals(other.TotalSetSize)
                ) && 
                (
                    this.Next == other.Next ||
                    this.Next != null &&
                    this.Next.Equals(other.Next)
                ) && 
                (
                    this.Previous == other.Previous ||
                    this.Previous != null &&
                    this.Previous.Equals(other.Previous)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ResultSetSize != null)
                    hash = hash * 59 + this.ResultSetSize.GetHashCode();
                if (this.ResultSetStartPosition != null)
                    hash = hash * 59 + this.ResultSetStartPosition.GetHashCode();
                if (this.ResultSetEndPosition != null)
                    hash = hash * 59 + this.ResultSetEndPosition.GetHashCode();
                if (this.TotalSetSize != null)
                    hash = hash * 59 + this.TotalSetSize.GetHashCode();
                if (this.Next != null)
                    hash = hash * 59 + this.Next.GetHashCode();
                if (this.Previous != null)
                    hash = hash * 59 + this.Previous.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
