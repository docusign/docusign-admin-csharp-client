/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// SubAccountCreateRequestSubAccountCreationSubscription
    /// </summary>
    [DataContract]
    public partial class SubAccountCreateRequestSubAccountCreationSubscription :  IEquatable<SubAccountCreateRequestSubAccountCreationSubscription>, IValidatableObject
    {
        public SubAccountCreateRequestSubAccountCreationSubscription()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountCreateRequestSubAccountCreationSubscription" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="PlanId">PlanId.</param>
        /// <param name="Modules">Modules.</param>
        public SubAccountCreateRequestSubAccountCreationSubscription(string Id = default(string), Guid? PlanId = default(Guid?), List<Guid?> Modules = default(List<Guid?>))
        {
            this.Id = Id;
            this.PlanId = PlanId;
            this.Modules = Modules;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        [DataMember(Name="planId", EmitDefaultValue=false)]
        public Guid? PlanId { get; set; }
        /// <summary>
        /// Gets or Sets Modules
        /// </summary>
        [DataMember(Name="modules", EmitDefaultValue=false)]
        public List<Guid?> Modules { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountCreateRequestSubAccountCreationSubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubAccountCreateRequestSubAccountCreationSubscription);
        }

        /// <summary>
        /// Returns true if SubAccountCreateRequestSubAccountCreationSubscription instances are equal
        /// </summary>
        /// <param name="other">Instance of SubAccountCreateRequestSubAccountCreationSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountCreateRequestSubAccountCreationSubscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.PlanId == other.PlanId ||
                    this.PlanId != null &&
                    this.PlanId.Equals(other.PlanId)
                ) && 
                (
                    this.Modules == other.Modules ||
                    this.Modules != null &&
                    this.Modules.SequenceEqual(other.Modules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.PlanId != null)
                    hash = hash * 59 + this.PlanId.GetHashCode();
                if (this.Modules != null)
                    hash = hash * 59 + this.Modules.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
