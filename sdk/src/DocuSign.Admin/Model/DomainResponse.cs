/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// DomainResponse
    /// </summary>
    [DataContract]
    public partial class DomainResponse :  IEquatable<DomainResponse>, IValidatableObject
    {
        public DomainResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainResponse" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Status">Status.</param>
        /// <param name="HostName">HostName.</param>
        /// <param name="TxtToken">TxtToken.</param>
        /// <param name="IdentityProviderId">IdentityProviderId.</param>
        /// <param name="Settings">Settings.</param>
        /// <param name="Links">Links.</param>
        public DomainResponse(Guid? Id = default(Guid?), string Status = default(string), string HostName = default(string), string TxtToken = default(string), Guid? IdentityProviderId = default(Guid?), List<SettingResponse> Settings = default(List<SettingResponse>), List<LinkResponse> Links = default(List<LinkResponse>))
        {
            this.Id = Id;
            this.Status = Status;
            this.HostName = HostName;
            this.TxtToken = TxtToken;
            this.IdentityProviderId = IdentityProviderId;
            this.Settings = Settings;
            this.Links = Links;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name="host_name", EmitDefaultValue=false)]
        public string HostName { get; set; }
        /// <summary>
        /// Gets or Sets TxtToken
        /// </summary>
        [DataMember(Name="txt_token", EmitDefaultValue=false)]
        public string TxtToken { get; set; }
        /// <summary>
        /// Gets or Sets IdentityProviderId
        /// </summary>
        [DataMember(Name="identity_provider_id", EmitDefaultValue=false)]
        public Guid? IdentityProviderId { get; set; }
        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<SettingResponse> Settings { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<LinkResponse> Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  TxtToken: ").Append(TxtToken).Append("\n");
            sb.Append("  IdentityProviderId: ").Append(IdentityProviderId).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DomainResponse);
        }

        /// <summary>
        /// Returns true if DomainResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of DomainResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DomainResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.HostName == other.HostName ||
                    this.HostName != null &&
                    this.HostName.Equals(other.HostName)
                ) && 
                (
                    this.TxtToken == other.TxtToken ||
                    this.TxtToken != null &&
                    this.TxtToken.Equals(other.TxtToken)
                ) && 
                (
                    this.IdentityProviderId == other.IdentityProviderId ||
                    this.IdentityProviderId != null &&
                    this.IdentityProviderId.Equals(other.IdentityProviderId)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.SequenceEqual(other.Settings)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.HostName != null)
                    hash = hash * 59 + this.HostName.GetHashCode();
                if (this.TxtToken != null)
                    hash = hash * 59 + this.TxtToken.GetHashCode();
                if (this.IdentityProviderId != null)
                    hash = hash * 59 + this.IdentityProviderId.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
