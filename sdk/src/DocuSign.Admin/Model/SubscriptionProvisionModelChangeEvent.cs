/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// SubscriptionProvisionModelChangeEvent
    /// </summary>
    [DataContract]
    public partial class SubscriptionProvisionModelChangeEvent :  IEquatable<SubscriptionProvisionModelChangeEvent>, IValidatableObject
    {
        public SubscriptionProvisionModelChangeEvent()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionProvisionModelChangeEvent" /> class.
        /// </summary>
        /// <param name="EventDate">EventDate.</param>
        /// <param name="Action">Action.</param>
        /// <param name="TraceToken">TraceToken.</param>
        public SubscriptionProvisionModelChangeEvent(DateTime? EventDate = default(DateTime?), string Action = default(string), Guid? TraceToken = default(Guid?))
        {
            this.EventDate = EventDate;
            this.Action = Action;
            this.TraceToken = TraceToken;
        }
        
        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name="EventDate", EmitDefaultValue=false)]
        public DateTime? EventDate { get; set; }
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="Action", EmitDefaultValue=false)]
        public string Action { get; set; }
        /// <summary>
        /// Gets or Sets TraceToken
        /// </summary>
        [DataMember(Name="TraceToken", EmitDefaultValue=false)]
        public Guid? TraceToken { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionProvisionModelChangeEvent {\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  TraceToken: ").Append(TraceToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubscriptionProvisionModelChangeEvent);
        }

        /// <summary>
        /// Returns true if SubscriptionProvisionModelChangeEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionProvisionModelChangeEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionProvisionModelChangeEvent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EventDate == other.EventDate ||
                    this.EventDate != null &&
                    this.EventDate.Equals(other.EventDate)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.TraceToken == other.TraceToken ||
                    this.TraceToken != null &&
                    this.TraceToken.Equals(other.TraceToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EventDate != null)
                    hash = hash * 59 + this.EventDate.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.TraceToken != null)
                    hash = hash * 59 + this.TraceToken.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
