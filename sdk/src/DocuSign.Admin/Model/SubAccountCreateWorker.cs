/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// SubAccountCreateWorker
    /// </summary>
    [DataContract]
    public partial class SubAccountCreateWorker :  IEquatable<SubAccountCreateWorker>, IValidatableObject
    {
        public SubAccountCreateWorker()
        {
            // Empty Constructor
        }

                /// <summary>
        /// The type of asset group work.
        /// </summary>
        /// <value>The type of asset group work.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetGroupWorkTypeEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum GroupAssetFulfillment for value: GroupAssetFulfillment
            /// </summary>
            [EnumMember(Value = "GroupAssetFulfillment")]
            GroupAssetFulfillment = 2,
            
            /// <summary>
            /// Enum AccountAssetFulfillment for value: AccountAssetFulfillment
            /// </summary>
            [EnumMember(Value = "AccountAssetFulfillment")]
            AccountAssetFulfillment = 3,
            
            /// <summary>
            /// Enum AccountAssetClone for value: AccountAssetClone
            /// </summary>
            [EnumMember(Value = "AccountAssetClone")]
            AccountAssetClone = 4,
            
            /// <summary>
            /// Enum AccountAssetCreate for value: AccountAssetCreate
            /// </summary>
            [EnumMember(Value = "AccountAssetCreate")]
            AccountAssetCreate = 5,
            
            /// <summary>
            /// Enum SubscriptionSync for value: SubscriptionSync
            /// </summary>
            [EnumMember(Value = "SubscriptionSync")]
            SubscriptionSync = 6
        }

                /// <summary>
        /// The account creation status.
        /// </summary>
        /// <value>The account creation status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,
            
            /// <summary>
            /// Enum Processing for value: Processing
            /// </summary>
            [EnumMember(Value = "Processing")]
            Processing = 3,
            
            /// <summary>
            /// Enum ProcessingOnHold for value: ProcessingOnHold
            /// </summary>
            [EnumMember(Value = "ProcessingOnHold")]
            ProcessingOnHold = 4,
            
            /// <summary>
            /// Enum PendingError for value: PendingError
            /// </summary>
            [EnumMember(Value = "PendingError")]
            PendingError = 5,
            
            /// <summary>
            /// Enum ProcessingError for value: ProcessingError
            /// </summary>
            [EnumMember(Value = "ProcessingError")]
            ProcessingError = 6,
            
            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 7,
            
            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 8,
            
            /// <summary>
            /// Enum PermanentFailure for value: PermanentFailure
            /// </summary>
            [EnumMember(Value = "PermanentFailure")]
            PermanentFailure = 9
        }

        /// <summary>
        /// The type of asset group work.
        /// </summary>
        /// <value>The type of asset group work.</value>
        [DataMember(Name="assetGroupWorkType", EmitDefaultValue=false)]
        public AssetGroupWorkTypeEnum? AssetGroupWorkType { get; set; }
        /// <summary>
        /// The account creation status.
        /// </summary>
        /// <value>The account creation status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountCreateWorker" /> class.
        /// </summary>
        /// <param name="TargetAccount">The target account being created (required).</param>
        /// <param name="SubscriptionDetails">The subscription info to create the account (required).</param>
        public SubAccountCreateWorker(SubAccountCreateTargetAccount TargetAccount = default(SubAccountCreateTargetAccount), SubAccountCreateSubscriptionDetails SubscriptionDetails = default(SubAccountCreateSubscriptionDetails))
        {
            // to ensure "TargetAccount" is required (not null)
            if (TargetAccount == null)
            {
                throw new InvalidDataException("TargetAccount is a required property for SubAccountCreateWorker and cannot be null");
            }
            else
            {
                this.TargetAccount = TargetAccount;
            }
            // to ensure "SubscriptionDetails" is required (not null)
            if (SubscriptionDetails == null)
            {
                throw new InvalidDataException("SubscriptionDetails is a required property for SubAccountCreateWorker and cannot be null");
            }
            else
            {
                this.SubscriptionDetails = SubscriptionDetails;
            }
        }
        
        /// <summary>
        /// The target account being created
        /// </summary>
        /// <value>The target account being created</value>
        [DataMember(Name="targetAccount", EmitDefaultValue=false)]
        public SubAccountCreateTargetAccount TargetAccount { get; set; }
        /// <summary>
        /// The subscription info to create the account
        /// </summary>
        /// <value>The subscription info to create the account</value>
        [DataMember(Name="subscriptionDetails", EmitDefaultValue=false)]
        public SubAccountCreateSubscriptionDetails SubscriptionDetails { get; set; }
        /// <summary>
        /// The create account work id.
        /// </summary>
        /// <value>The create account work id.</value>
        [DataMember(Name="assetGroupWorkId", EmitDefaultValue=false)]
        public Guid? AssetGroupWorkId { get; private set; }
        /// <summary>
        /// The asset group id the accounts belong to.
        /// </summary>
        /// <value>The asset group id the accounts belong to.</value>
        [DataMember(Name="assetGroupId", EmitDefaultValue=false)]
        public Guid? AssetGroupId { get; private set; }
        /// <summary>
        /// The order id created by the creation work.
        /// </summary>
        /// <value>The order id created by the creation work.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public Guid? OrderId { get; private set; }
        /// <summary>
        /// The number of times the work has been attempted.
        /// </summary>
        /// <value>The number of times the work has been attempted.</value>
        [DataMember(Name="attempts", EmitDefaultValue=false)]
        public int? Attempts { get; private set; }
        /// <summary>
        /// The date the account creation work is initiated.
        /// </summary>
        /// <value>The date the account creation work is initiated.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The name of the initiator of the account creation work.
        /// </summary>
        /// <value>The name of the initiator of the account creation work.</value>
        [DataMember(Name="createdByName", EmitDefaultValue=false)]
        public string CreatedByName { get; private set; }
        /// <summary>
        /// The email of the creator of the account creation work.
        /// </summary>
        /// <value>The email of the creator of the account creation work.</value>
        [DataMember(Name="createdByEmail", EmitDefaultValue=false)]
        public string CreatedByEmail { get; private set; }
        /// <summary>
        /// The message associated with the account creation work.
        /// </summary>
        /// <value>The message associated with the account creation work.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; private set; }
        /// <summary>
        /// The processing failures if the work is in PendingError/ProcessingError status.
        /// </summary>
        /// <value>The processing failures if the work is in PendingError/ProcessingError status.</value>
        [DataMember(Name="createAccountProcessingFailureDetails", EmitDefaultValue=false)]
        public SubAccountErrorDetails CreateAccountProcessingFailureDetails { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountCreateWorker {\n");
            sb.Append("  TargetAccount: ").Append(TargetAccount).Append("\n");
            sb.Append("  SubscriptionDetails: ").Append(SubscriptionDetails).Append("\n");
            sb.Append("  AssetGroupWorkId: ").Append(AssetGroupWorkId).Append("\n");
            sb.Append("  AssetGroupId: ").Append(AssetGroupId).Append("\n");
            sb.Append("  AssetGroupWorkType: ").Append(AssetGroupWorkType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  CreatedByEmail: ").Append(CreatedByEmail).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CreateAccountProcessingFailureDetails: ").Append(CreateAccountProcessingFailureDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubAccountCreateWorker);
        }

        /// <summary>
        /// Returns true if SubAccountCreateWorker instances are equal
        /// </summary>
        /// <param name="other">Instance of SubAccountCreateWorker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountCreateWorker other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TargetAccount == other.TargetAccount ||
                    this.TargetAccount != null &&
                    this.TargetAccount.Equals(other.TargetAccount)
                ) && 
                (
                    this.SubscriptionDetails == other.SubscriptionDetails ||
                    this.SubscriptionDetails != null &&
                    this.SubscriptionDetails.Equals(other.SubscriptionDetails)
                ) && 
                (
                    this.AssetGroupWorkId == other.AssetGroupWorkId ||
                    this.AssetGroupWorkId != null &&
                    this.AssetGroupWorkId.Equals(other.AssetGroupWorkId)
                ) && 
                (
                    this.AssetGroupId == other.AssetGroupId ||
                    this.AssetGroupId != null &&
                    this.AssetGroupId.Equals(other.AssetGroupId)
                ) && 
                (
                    this.AssetGroupWorkType == other.AssetGroupWorkType ||
                    this.AssetGroupWorkType != null &&
                    this.AssetGroupWorkType.Equals(other.AssetGroupWorkType)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.Attempts == other.Attempts ||
                    this.Attempts != null &&
                    this.Attempts.Equals(other.Attempts)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedByName == other.CreatedByName ||
                    this.CreatedByName != null &&
                    this.CreatedByName.Equals(other.CreatedByName)
                ) && 
                (
                    this.CreatedByEmail == other.CreatedByEmail ||
                    this.CreatedByEmail != null &&
                    this.CreatedByEmail.Equals(other.CreatedByEmail)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.CreateAccountProcessingFailureDetails == other.CreateAccountProcessingFailureDetails ||
                    this.CreateAccountProcessingFailureDetails != null &&
                    this.CreateAccountProcessingFailureDetails.Equals(other.CreateAccountProcessingFailureDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TargetAccount != null)
                    hash = hash * 59 + this.TargetAccount.GetHashCode();
                if (this.SubscriptionDetails != null)
                    hash = hash * 59 + this.SubscriptionDetails.GetHashCode();
                if (this.AssetGroupWorkId != null)
                    hash = hash * 59 + this.AssetGroupWorkId.GetHashCode();
                if (this.AssetGroupId != null)
                    hash = hash * 59 + this.AssetGroupId.GetHashCode();
                if (this.AssetGroupWorkType != null)
                    hash = hash * 59 + this.AssetGroupWorkType.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.Attempts != null)
                    hash = hash * 59 + this.Attempts.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedByName != null)
                    hash = hash * 59 + this.CreatedByName.GetHashCode();
                if (this.CreatedByEmail != null)
                    hash = hash * 59 + this.CreatedByEmail.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.CreateAccountProcessingFailureDetails != null)
                    hash = hash * 59 + this.CreateAccountProcessingFailureDetails.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
