/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Admin.Model
{
    /// <summary>
    /// SubscriptionPlanItemResponse
    /// </summary>
    [DataContract]
    public partial class SubscriptionPlanItemResponse :  IEquatable<SubscriptionPlanItemResponse>, IValidatableObject
    {
        public SubscriptionPlanItemResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlanItemResponse" /> class.
        /// </summary>
        /// <param name="PlanItemId">PlanItemId.</param>
        /// <param name="PlanItemName">PlanItemName.</param>
        /// <param name="PlanItemDescription">PlanItemDescription.</param>
        /// <param name="PlanItemInternalId">PlanItemInternalId.</param>
        public SubscriptionPlanItemResponse(Guid? PlanItemId = default(Guid?), string PlanItemName = default(string), string PlanItemDescription = default(string), string PlanItemInternalId = default(string))
        {
            this.PlanItemId = PlanItemId;
            this.PlanItemName = PlanItemName;
            this.PlanItemDescription = PlanItemDescription;
            this.PlanItemInternalId = PlanItemInternalId;
        }
        
        /// <summary>
        /// Gets or Sets PlanItemId
        /// </summary>
        [DataMember(Name="plan_item_id", EmitDefaultValue=false)]
        public Guid? PlanItemId { get; set; }
        /// <summary>
        /// Gets or Sets PlanItemName
        /// </summary>
        [DataMember(Name="plan_item_name", EmitDefaultValue=false)]
        public string PlanItemName { get; set; }
        /// <summary>
        /// Gets or Sets PlanItemDescription
        /// </summary>
        [DataMember(Name="plan_item_description", EmitDefaultValue=false)]
        public string PlanItemDescription { get; set; }
        /// <summary>
        /// Gets or Sets PlanItemInternalId
        /// </summary>
        [DataMember(Name="plan_item_internal_id", EmitDefaultValue=false)]
        public string PlanItemInternalId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPlanItemResponse {\n");
            sb.Append("  PlanItemId: ").Append(PlanItemId).Append("\n");
            sb.Append("  PlanItemName: ").Append(PlanItemName).Append("\n");
            sb.Append("  PlanItemDescription: ").Append(PlanItemDescription).Append("\n");
            sb.Append("  PlanItemInternalId: ").Append(PlanItemInternalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubscriptionPlanItemResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionPlanItemResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionPlanItemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPlanItemResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PlanItemId == other.PlanItemId ||
                    this.PlanItemId != null &&
                    this.PlanItemId.Equals(other.PlanItemId)
                ) && 
                (
                    this.PlanItemName == other.PlanItemName ||
                    this.PlanItemName != null &&
                    this.PlanItemName.Equals(other.PlanItemName)
                ) && 
                (
                    this.PlanItemDescription == other.PlanItemDescription ||
                    this.PlanItemDescription != null &&
                    this.PlanItemDescription.Equals(other.PlanItemDescription)
                ) && 
                (
                    this.PlanItemInternalId == other.PlanItemInternalId ||
                    this.PlanItemInternalId != null &&
                    this.PlanItemInternalId.Equals(other.PlanItemInternalId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PlanItemId != null)
                    hash = hash * 59 + this.PlanItemId.GetHashCode();
                if (this.PlanItemName != null)
                    hash = hash * 59 + this.PlanItemName.GetHashCode();
                if (this.PlanItemDescription != null)
                    hash = hash * 59 + this.PlanItemDescription.GetHashCode();
                if (this.PlanItemInternalId != null)
                    hash = hash * 59 + this.PlanItemInternalId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
