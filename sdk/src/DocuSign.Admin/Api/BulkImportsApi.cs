/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DocuSign.Admin.Client;
using DocuSign.Admin.Model;

namespace DocuSign.Admin.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBulkImportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new account settings import request.
        /// </summary>
        /// <remarks>
        /// Required scopes: account_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns></returns>
        OrganizationAccountSettingsImportResponse AddBulkAccountSettingsImport(Guid? organizationId,  byte[] fileCsv);

        /// <summary>
        /// Creates a new account settings import request.
        /// </summary>
        /// <remarks>
        /// Required scopes: account_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationAccountSettingsImportResponse> AddBulkAccountSettingsImportWithHttpInfo(Guid? organizationId,  byte[] fileCsv);
        /// <summary>
        /// Import request for adding users to accounts within the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns></returns>
        OrganizationImportResponse CreateBulkImportAddUsersRequest(Guid? organizationId,  byte[] fileCsv);

        /// <summary>
        /// Import request for adding users to accounts within the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationImportResponse> CreateBulkImportAddUsersRequestWithHttpInfo(Guid? organizationId,  byte[] fileCsv);
        /// <summary>
        /// Closes the Bulk User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns></returns>
        OrganizationImportResponse CreateBulkImportCloseUsersRequest(Guid? organizationId);

        /// <summary>
        /// Closes the Bulk User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationImportResponse> CreateBulkImportCloseUsersRequestWithHttpInfo(Guid? organizationId);
        /// <summary>
        /// Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns></returns>
        OrganizationImportResponse CreateBulkImportExternalCloseUsersRequest(Guid? organizationId);

        /// <summary>
        /// Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationImportResponse> CreateBulkImportExternalCloseUsersRequestWithHttpInfo(Guid? organizationId);
        /// <summary>
        /// Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns></returns>
        OrganizationImportResponse CreateBulkImportSingleAccountAddUsersRequest(Guid? organizationId, Guid? accountId,  byte[] fileCsv);

        /// <summary>
        /// Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationImportResponse> CreateBulkImportSingleAccountAddUsersRequestWithHttpInfo(Guid? organizationId, Guid? accountId,  byte[] fileCsv);
        /// <summary>
        /// Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns></returns>
        OrganizationImportResponse CreateBulkImportSingleAccountUpdateUsersRequest(Guid? organizationId, Guid? accountId,  byte[] fileCsv);

        /// <summary>
        /// Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationImportResponse> CreateBulkImportSingleAccountUpdateUsersRequestWithHttpInfo(Guid? organizationId, Guid? accountId,  byte[] fileCsv);
        /// <summary>
        /// Import request for updating users to accounts within the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns></returns>
        OrganizationImportResponse CreateBulkImportUpdateUsersRequest(Guid? organizationId,  byte[] fileCsv);

        /// <summary>
        /// Import request for updating users to accounts within the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationImportResponse> CreateBulkImportUpdateUsersRequestWithHttpInfo(Guid? organizationId,  byte[] fileCsv);
        /// <summary>
        /// Deletes a Bulk Account Settings Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns></returns>
        Object DeleteBulkAccountSettingsImport(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Deletes a Bulk Account Settings Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Object> DeleteBulkAccountSettingsImportWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Deletes a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns></returns>
        Object DeleteBulkUserImport(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Deletes a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Object> DeleteBulkUserImportWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Returns the details/metadata for a Bulk Account Settings Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns></returns>
        OrganizationAccountSettingsImportResponse GetBulkAccountSettingsImport(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Returns the details/metadata for a Bulk Account Settings Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationAccountSettingsImportResponse> GetBulkAccountSettingsImportWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Returns the details/metadata for Bulk Account Settings Import requests in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns></returns>
        List<OrganizationAccountSettingsImportResponse> GetBulkAccountSettingsImports(Guid? organizationId);

        /// <summary>
        /// Returns the details/metadata for Bulk Account Settings Import requests in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<List<OrganizationAccountSettingsImportResponse>> GetBulkAccountSettingsImportsWithHttpInfo(Guid? organizationId);
        /// <summary>
        /// Returns a text/csv file with user details for a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns></returns>
        Object GetBulkUserImportCSV(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Returns a text/csv file with user details for a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Object> GetBulkUserImportCSVWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Returns the details/metadata for a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns></returns>
        OrganizationImportResponse GetBulkUserImportRequest(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Returns the details/metadata for a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationImportResponse> GetBulkUserImportRequestWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Returns the details/metadata for Bulk User Import requests in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns></returns>
        OrganizationImportsResponse GetBulkUserImportRequests(Guid? organizationId);

        /// <summary>
        /// Returns the details/metadata for Bulk User Import requests in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationImportsResponse> GetBulkUserImportRequestsWithHttpInfo(Guid? organizationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new account settings import request.
        /// </summary>
        /// <remarks>
        /// Required scopes: account_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationAccountSettingsImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationAccountSettingsImportResponse> AddBulkAccountSettingsImportAsync(Guid? organizationId,  byte[] fileCsv);

        /// <summary>
        /// Creates a new account settings import request.
        /// </summary>
        /// <remarks>
        /// Required scopes: account_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationAccountSettingsImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationAccountSettingsImportResponse>> AddBulkAccountSettingsImportAsyncWithHttpInfo(Guid? organizationId,  byte[] fileCsv);
        /// <summary>
        /// Import request for adding users to accounts within the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportAddUsersRequestAsync(Guid? organizationId,  byte[] fileCsv);

        /// <summary>
        /// Import request for adding users to accounts within the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportAddUsersRequestAsyncWithHttpInfo(Guid? organizationId,  byte[] fileCsv);
        /// <summary>
        /// Closes the Bulk User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportCloseUsersRequestAsync(Guid? organizationId);

        /// <summary>
        /// Closes the Bulk User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportCloseUsersRequestAsyncWithHttpInfo(Guid? organizationId);
        /// <summary>
        /// Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportExternalCloseUsersRequestAsync(Guid? organizationId);

        /// <summary>
        /// Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportExternalCloseUsersRequestAsyncWithHttpInfo(Guid? organizationId);
        /// <summary>
        /// Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportSingleAccountAddUsersRequestAsync(Guid? organizationId, Guid? accountId,  byte[] fileCsv);

        /// <summary>
        /// Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportSingleAccountAddUsersRequestAsyncWithHttpInfo(Guid? organizationId, Guid? accountId,  byte[] fileCsv);
        /// <summary>
        /// Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportSingleAccountUpdateUsersRequestAsync(Guid? organizationId, Guid? accountId,  byte[] fileCsv);

        /// <summary>
        /// Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportSingleAccountUpdateUsersRequestAsyncWithHttpInfo(Guid? organizationId, Guid? accountId,  byte[] fileCsv);
        /// <summary>
        /// Import request for updating users to accounts within the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportUpdateUsersRequestAsync(Guid? organizationId,  byte[] fileCsv);

        /// <summary>
        /// Import request for updating users to accounts within the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportUpdateUsersRequestAsyncWithHttpInfo(Guid? organizationId,  byte[] fileCsv);
        /// <summary>
        /// Deletes a Bulk Account Settings Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteBulkAccountSettingsImportAsync(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Deletes a Bulk Account Settings Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBulkAccountSettingsImportAsyncWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Deletes a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteBulkUserImportAsync(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Deletes a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBulkUserImportAsyncWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Returns the details/metadata for a Bulk Account Settings Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of OrganizationAccountSettingsImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationAccountSettingsImportResponse> GetBulkAccountSettingsImportAsync(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Returns the details/metadata for a Bulk Account Settings Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (OrganizationAccountSettingsImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationAccountSettingsImportResponse>> GetBulkAccountSettingsImportAsyncWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Returns the details/metadata for Bulk Account Settings Import requests in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of List&lt;OrganizationAccountSettingsImportResponse&gt;</returns>
        System.Threading.Tasks.Task<List<OrganizationAccountSettingsImportResponse>> GetBulkAccountSettingsImportsAsync(Guid? organizationId);

        /// <summary>
        /// Returns the details/metadata for Bulk Account Settings Import requests in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (List&lt;OrganizationAccountSettingsImportResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrganizationAccountSettingsImportResponse>>> GetBulkAccountSettingsImportsAsyncWithHttpInfo(Guid? organizationId);
        /// <summary>
        /// Returns a text/csv file with user details for a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetBulkUserImportCSVAsync(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Returns a text/csv file with user details for a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBulkUserImportCSVAsyncWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Returns the details/metadata for a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        System.Threading.Tasks.Task<OrganizationImportResponse> GetBulkUserImportRequestAsync(Guid? organizationId, Guid? importId);

        /// <summary>
        /// Returns the details/metadata for a User Import request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> GetBulkUserImportRequestAsyncWithHttpInfo(Guid? organizationId, Guid? importId);
        /// <summary>
        /// Returns the details/metadata for Bulk User Import requests in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationImportsResponse</returns>
        System.Threading.Tasks.Task<OrganizationImportsResponse> GetBulkUserImportRequestsAsync(Guid? organizationId);

        /// <summary>
        /// Returns the details/metadata for Bulk User Import requests in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationImportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationImportsResponse>> GetBulkUserImportRequestsAsyncWithHttpInfo(Guid? organizationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BulkImportsApi : IBulkImportsApi
    {
        private DocuSign.Admin.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkImportsApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public BulkImportsApi(ApiClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Admin.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Creates a new account settings import request. Required scopes: account_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>OrganizationAccountSettingsImportResponse</returns>
        public OrganizationAccountSettingsImportResponse AddBulkAccountSettingsImport(Guid? organizationId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationAccountSettingsImportResponse> localVarResponse = AddBulkAccountSettingsImportWithHttpInfo(organizationId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new account settings import request. Required scopes: account_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of OrganizationAccountSettingsImportResponse</returns>
        public ApiResponse<OrganizationAccountSettingsImportResponse> AddBulkAccountSettingsImportWithHttpInfo(Guid? organizationId,  byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->AddBulkAccountSettingsImport");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->AddBulkAccountSettingsImport");

            var localVarPath = "/v2/organizations/{organizationId}/imports/account_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter



            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBulkAccountSettingsImport", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationAccountSettingsImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationAccountSettingsImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationAccountSettingsImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationAccountSettingsImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationAccountSettingsImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAccountSettingsImportResponse)));
            }
            
        }

        /// <summary>
        /// Creates a new account settings import request. Required scopes: account_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationAccountSettingsImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationAccountSettingsImportResponse> AddBulkAccountSettingsImportAsync(Guid? organizationId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationAccountSettingsImportResponse> localVarResponse = await AddBulkAccountSettingsImportAsyncWithHttpInfo(organizationId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new account settings import request. Required scopes: account_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationAccountSettingsImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationAccountSettingsImportResponse>> AddBulkAccountSettingsImportAsyncWithHttpInfo(Guid? organizationId, byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->AddBulkAccountSettingsImport");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->AddBulkAccountSettingsImport");

            var localVarPath = "/v2/organizations/{organizationId}/imports/account_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBulkAccountSettingsImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationAccountSettingsImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationAccountSettingsImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAccountSettingsImportResponse)));
            
        }



        /// <summary>
        /// Import request for adding users to accounts within the organization. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>OrganizationImportResponse</returns>
        public OrganizationImportResponse CreateBulkImportAddUsersRequest(Guid? organizationId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = CreateBulkImportAddUsersRequestWithHttpInfo(organizationId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import request for adding users to accounts within the organization. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of OrganizationImportResponse</returns>
        public ApiResponse<OrganizationImportResponse> CreateBulkImportAddUsersRequestWithHttpInfo(Guid? organizationId,  byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportAddUsersRequest");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->CreateBulkImportAddUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter



            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportAddUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            }
            
        }

        /// <summary>
        /// Import request for adding users to accounts within the organization. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportAddUsersRequestAsync(Guid? organizationId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = await CreateBulkImportAddUsersRequestAsyncWithHttpInfo(organizationId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import request for adding users to accounts within the organization. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportAddUsersRequestAsyncWithHttpInfo(Guid? organizationId, byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportAddUsersRequest");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->CreateBulkImportAddUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportAddUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            
        }



        /// <summary>
        /// Closes the Bulk User Import request Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>OrganizationImportResponse</returns>
        public OrganizationImportResponse CreateBulkImportCloseUsersRequest(Guid? organizationId)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = CreateBulkImportCloseUsersRequestWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closes the Bulk User Import request Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of OrganizationImportResponse</returns>
        public ApiResponse<OrganizationImportResponse> CreateBulkImportCloseUsersRequestWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportCloseUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportCloseUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            }
            
        }

        /// <summary>
        /// Closes the Bulk User Import request Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportCloseUsersRequestAsync(Guid? organizationId)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = await CreateBulkImportCloseUsersRequestAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closes the Bulk User Import request Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportCloseUsersRequestAsyncWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportCloseUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/close";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportCloseUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            
        }



        /// <summary>
        /// Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>OrganizationImportResponse</returns>
        public OrganizationImportResponse CreateBulkImportExternalCloseUsersRequest(Guid? organizationId)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = CreateBulkImportExternalCloseUsersRequestWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of OrganizationImportResponse</returns>
        public ApiResponse<OrganizationImportResponse> CreateBulkImportExternalCloseUsersRequestWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportExternalCloseUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/close_external";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportExternalCloseUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            }
            
        }

        /// <summary>
        /// Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportExternalCloseUsersRequestAsync(Guid? organizationId)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = await CreateBulkImportExternalCloseUsersRequestAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportExternalCloseUsersRequestAsyncWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportExternalCloseUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/close_external";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportExternalCloseUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            
        }



        /// <summary>
        /// Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>OrganizationImportResponse</returns>
        public OrganizationImportResponse CreateBulkImportSingleAccountAddUsersRequest(Guid? organizationId, Guid? accountId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = CreateBulkImportSingleAccountAddUsersRequestWithHttpInfo(organizationId, accountId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of OrganizationImportResponse</returns>
        public ApiResponse<OrganizationImportResponse> CreateBulkImportSingleAccountAddUsersRequestWithHttpInfo(Guid? organizationId, Guid? accountId,  byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportSingleAccountAddUsersRequest");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkImportsApi->CreateBulkImportSingleAccountAddUsersRequest");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->CreateBulkImportSingleAccountAddUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/accounts/{accountId}/imports/bulk_users/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter



            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportSingleAccountAddUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            }
            
        }

        /// <summary>
        /// Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportSingleAccountAddUsersRequestAsync(Guid? organizationId, Guid? accountId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = await CreateBulkImportSingleAccountAddUsersRequestAsyncWithHttpInfo(organizationId, accountId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportSingleAccountAddUsersRequestAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportSingleAccountAddUsersRequest");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkImportsApi->CreateBulkImportSingleAccountAddUsersRequest");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->CreateBulkImportSingleAccountAddUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/accounts/{accountId}/imports/bulk_users/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportSingleAccountAddUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            
        }



        /// <summary>
        /// Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>OrganizationImportResponse</returns>
        public OrganizationImportResponse CreateBulkImportSingleAccountUpdateUsersRequest(Guid? organizationId, Guid? accountId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = CreateBulkImportSingleAccountUpdateUsersRequestWithHttpInfo(organizationId, accountId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of OrganizationImportResponse</returns>
        public ApiResponse<OrganizationImportResponse> CreateBulkImportSingleAccountUpdateUsersRequestWithHttpInfo(Guid? organizationId, Guid? accountId,  byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportSingleAccountUpdateUsersRequest");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkImportsApi->CreateBulkImportSingleAccountUpdateUsersRequest");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->CreateBulkImportSingleAccountUpdateUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/accounts/{accountId}/imports/bulk_users/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter



            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportSingleAccountUpdateUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            }
            
        }

        /// <summary>
        /// Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportSingleAccountUpdateUsersRequestAsync(Guid? organizationId, Guid? accountId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = await CreateBulkImportSingleAccountUpdateUsersRequestAsyncWithHttpInfo(organizationId, accountId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportSingleAccountUpdateUsersRequestAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportSingleAccountUpdateUsersRequest");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkImportsApi->CreateBulkImportSingleAccountUpdateUsersRequest");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->CreateBulkImportSingleAccountUpdateUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/accounts/{accountId}/imports/bulk_users/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportSingleAccountUpdateUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            
        }



        /// <summary>
        /// Import request for updating users to accounts within the organization. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>OrganizationImportResponse</returns>
        public OrganizationImportResponse CreateBulkImportUpdateUsersRequest(Guid? organizationId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = CreateBulkImportUpdateUsersRequestWithHttpInfo(organizationId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import request for updating users to accounts within the organization. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>ApiResponse of OrganizationImportResponse</returns>
        public ApiResponse<OrganizationImportResponse> CreateBulkImportUpdateUsersRequestWithHttpInfo(Guid? organizationId,  byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportUpdateUsersRequest");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->CreateBulkImportUpdateUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter



            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportUpdateUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            }
            
        }

        /// <summary>
        /// Import request for updating users to accounts within the organization. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationImportResponse> CreateBulkImportUpdateUsersRequestAsync(Guid? organizationId,  byte[] fileCsv)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = await CreateBulkImportUpdateUsersRequestAsyncWithHttpInfo(organizationId,  fileCsv);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import request for updating users to accounts within the organization. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="fileCsv">CSV file.</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> CreateBulkImportUpdateUsersRequestAsyncWithHttpInfo(Guid? organizationId, byte[] fileCsv)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->CreateBulkImportUpdateUsersRequest");
            // verify the required parameter 'fileCsv' is set
            if (fileCsv == null)
                throw new ApiException(400, "Missing required parameter 'fileCsv' when calling BulkImportsApi->CreateBulkImportUpdateUsersRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (fileCsv != null && fileCsv.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(fileCsv); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fileCsv; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkImportUpdateUsersRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            
        }



        /// <summary>
        /// Deletes a Bulk Account Settings Import request Required scopes: account_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Object</returns>
        public Object DeleteBulkAccountSettingsImport(Guid? organizationId, Guid? importId)
        {
             ApiResponse<Object> localVarResponse = DeleteBulkAccountSettingsImportWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Bulk Account Settings Import request Required scopes: account_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteBulkAccountSettingsImportWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->DeleteBulkAccountSettingsImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->DeleteBulkAccountSettingsImport");

            var localVarPath = "/v2/organizations/{organizationId}/imports/account_settings/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBulkAccountSettingsImport", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<Object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Object)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(Object)));
            }
            else
            {
                return new ApiResponse<Object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            }
            
        }

        /// <summary>
        /// Deletes a Bulk Account Settings Import request Required scopes: account_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteBulkAccountSettingsImportAsync(Guid? organizationId, Guid? importId)
        {
             ApiResponse<Object> localVarResponse = await DeleteBulkAccountSettingsImportAsyncWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a Bulk Account Settings Import request Required scopes: account_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBulkAccountSettingsImportAsyncWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->DeleteBulkAccountSettingsImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->DeleteBulkAccountSettingsImport");

            var localVarPath = "/v2/organizations/{organizationId}/imports/account_settings/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBulkAccountSettingsImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }



        /// <summary>
        /// Deletes a User Import request Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Object</returns>
        public Object DeleteBulkUserImport(Guid? organizationId, Guid? importId)
        {
             ApiResponse<Object> localVarResponse = DeleteBulkUserImportWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a User Import request Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteBulkUserImportWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->DeleteBulkUserImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->DeleteBulkUserImport");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBulkUserImport", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<Object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Object)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(Object)));
            }
            else
            {
                return new ApiResponse<Object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            }
            
        }

        /// <summary>
        /// Deletes a User Import request Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteBulkUserImportAsync(Guid? organizationId, Guid? importId)
        {
             ApiResponse<Object> localVarResponse = await DeleteBulkUserImportAsyncWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a User Import request Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBulkUserImportAsyncWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->DeleteBulkUserImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->DeleteBulkUserImport");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBulkUserImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }



        /// <summary>
        /// Returns the details/metadata for a Bulk Account Settings Import request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>OrganizationAccountSettingsImportResponse</returns>
        public OrganizationAccountSettingsImportResponse GetBulkAccountSettingsImport(Guid? organizationId, Guid? importId)
        {
             ApiResponse<OrganizationAccountSettingsImportResponse> localVarResponse = GetBulkAccountSettingsImportWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for a Bulk Account Settings Import request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of OrganizationAccountSettingsImportResponse</returns>
        public ApiResponse<OrganizationAccountSettingsImportResponse> GetBulkAccountSettingsImportWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkAccountSettingsImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->GetBulkAccountSettingsImport");

            var localVarPath = "/v2/organizations/{organizationId}/imports/account_settings/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkAccountSettingsImport", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationAccountSettingsImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationAccountSettingsImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationAccountSettingsImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationAccountSettingsImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationAccountSettingsImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAccountSettingsImportResponse)));
            }
            
        }

        /// <summary>
        /// Returns the details/metadata for a Bulk Account Settings Import request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of OrganizationAccountSettingsImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationAccountSettingsImportResponse> GetBulkAccountSettingsImportAsync(Guid? organizationId, Guid? importId)
        {
             ApiResponse<OrganizationAccountSettingsImportResponse> localVarResponse = await GetBulkAccountSettingsImportAsyncWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for a Bulk Account Settings Import request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (OrganizationAccountSettingsImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationAccountSettingsImportResponse>> GetBulkAccountSettingsImportAsyncWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkAccountSettingsImport");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->GetBulkAccountSettingsImport");

            var localVarPath = "/v2/organizations/{organizationId}/imports/account_settings/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkAccountSettingsImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationAccountSettingsImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationAccountSettingsImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationAccountSettingsImportResponse)));
            
        }



        /// <summary>
        /// Returns the details/metadata for Bulk Account Settings Import requests in the organization Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>List&lt;OrganizationAccountSettingsImportResponse&gt;</returns>
        public List<OrganizationAccountSettingsImportResponse> GetBulkAccountSettingsImports(Guid? organizationId)
        {
             ApiResponse<List<OrganizationAccountSettingsImportResponse>> localVarResponse = GetBulkAccountSettingsImportsWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for Bulk Account Settings Import requests in the organization Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of List&lt;OrganizationAccountSettingsImportResponse&gt;</returns>
        public ApiResponse<List<OrganizationAccountSettingsImportResponse>> GetBulkAccountSettingsImportsWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkAccountSettingsImports");

            var localVarPath = "/v2/organizations/{organizationId}/imports/account_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkAccountSettingsImports", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<List<OrganizationAccountSettingsImportResponse>>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (List<OrganizationAccountSettingsImportResponse>)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(List<OrganizationAccountSettingsImportResponse>)));
            }
            else
            {
                return new ApiResponse<List<OrganizationAccountSettingsImportResponse>>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (List<OrganizationAccountSettingsImportResponse>)this.ApiClient.Deserialize(localVarResponse, typeof(List<OrganizationAccountSettingsImportResponse>)));
            }
            
        }

        /// <summary>
        /// Returns the details/metadata for Bulk Account Settings Import requests in the organization Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of List&lt;OrganizationAccountSettingsImportResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrganizationAccountSettingsImportResponse>> GetBulkAccountSettingsImportsAsync(Guid? organizationId)
        {
             ApiResponse<List<OrganizationAccountSettingsImportResponse>> localVarResponse = await GetBulkAccountSettingsImportsAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for Bulk Account Settings Import requests in the organization Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (List&lt;OrganizationAccountSettingsImportResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrganizationAccountSettingsImportResponse>>> GetBulkAccountSettingsImportsAsyncWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkAccountSettingsImports");

            var localVarPath = "/v2/organizations/{organizationId}/imports/account_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkAccountSettingsImports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrganizationAccountSettingsImportResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrganizationAccountSettingsImportResponse>)this.ApiClient.Deserialize(localVarResponse, typeof(List<OrganizationAccountSettingsImportResponse>)));
            
        }



        /// <summary>
        /// Returns a text/csv file with user details for a User Import request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Object</returns>
        public Object GetBulkUserImportCSV(Guid? organizationId, Guid? importId)
        {
             ApiResponse<Object> localVarResponse = GetBulkUserImportCSVWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a text/csv file with user details for a User Import request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetBulkUserImportCSVWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkUserImportCSV");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->GetBulkUserImportCSV");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}/results_csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkUserImportCSV", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<Object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Object)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(Object)));
            }
            else
            {
                return new ApiResponse<Object>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            }
            
        }

        /// <summary>
        /// Returns a text/csv file with user details for a User Import request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetBulkUserImportCSVAsync(Guid? organizationId, Guid? importId)
        {
             ApiResponse<Object> localVarResponse = await GetBulkUserImportCSVAsyncWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a text/csv file with user details for a User Import request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBulkUserImportCSVAsyncWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkUserImportCSV");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->GetBulkUserImportCSV");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}/results_csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkUserImportCSV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }



        /// <summary>
        /// Returns the details/metadata for a User Import request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>OrganizationImportResponse</returns>
        public OrganizationImportResponse GetBulkUserImportRequest(Guid? organizationId, Guid? importId)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = GetBulkUserImportRequestWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for a User Import request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>ApiResponse of OrganizationImportResponse</returns>
        public ApiResponse<OrganizationImportResponse> GetBulkUserImportRequestWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkUserImportRequest");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->GetBulkUserImportRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkUserImportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationImportResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationImportResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            }
            
        }

        /// <summary>
        /// Returns the details/metadata for a User Import request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of OrganizationImportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationImportResponse> GetBulkUserImportRequestAsync(Guid? organizationId, Guid? importId)
        {
             ApiResponse<OrganizationImportResponse> localVarResponse = await GetBulkUserImportRequestAsyncWithHttpInfo(organizationId, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for a User Import request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="importId">The import ID Guid for the request</param>
        /// <returns>Task of ApiResponse (OrganizationImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationImportResponse>> GetBulkUserImportRequestAsyncWithHttpInfo(Guid? organizationId, Guid? importId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkUserImportRequest");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling BulkImportsApi->GetBulkUserImportRequest");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (importId != null) localVarPathParams.Add("importId", this.ApiClient.ParameterToString(importId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkUserImportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationImportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportResponse)));
            
        }



        /// <summary>
        /// Returns the details/metadata for Bulk User Import requests in the organization Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>OrganizationImportsResponse</returns>
        public OrganizationImportsResponse GetBulkUserImportRequests(Guid? organizationId)
        {
             ApiResponse<OrganizationImportsResponse> localVarResponse = GetBulkUserImportRequestsWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for Bulk User Import requests in the organization Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of OrganizationImportsResponse</returns>
        public ApiResponse<OrganizationImportsResponse> GetBulkUserImportRequestsWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkUserImportRequests");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter




            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkUserImportRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<OrganizationImportsResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportsResponse)this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(OrganizationImportsResponse)));
            }
            else
            {
                return new ApiResponse<OrganizationImportsResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (OrganizationImportsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportsResponse)));
            }
            
        }

        /// <summary>
        /// Returns the details/metadata for Bulk User Import requests in the organization Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationImportsResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationImportsResponse> GetBulkUserImportRequestsAsync(Guid? organizationId)
        {
             ApiResponse<OrganizationImportsResponse> localVarResponse = await GetBulkUserImportRequestsAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for Bulk User Import requests in the organization Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationImportsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationImportsResponse>> GetBulkUserImportRequestsAsyncWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkImportsApi->GetBulkUserImportRequests");

            var localVarPath = "/v2/organizations/{organizationId}/imports/bulk_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkUserImportRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationImportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationImportsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationImportsResponse)));
            
        }

    }
}