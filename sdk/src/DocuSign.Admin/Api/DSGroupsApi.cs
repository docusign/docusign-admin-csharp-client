/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Admin.Client;
using DocuSign.Admin.Model;

namespace DocuSign.Admin.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDSGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="addRequest">Add DSGroup request object</param>
        /// <returns></returns>
        DSGroupResponse AddDSGroup(Guid? organizationId, Guid? accountId, DSGroupAddRequest addRequest);

        /// <summary>
        /// Add a new DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="addRequest">Add DSGroup request object</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DSGroupResponse> AddDSGroupWithHttpInfo(Guid? organizationId, Guid? accountId, DSGroupAddRequest addRequest);
        /// <summary>
        /// Add list of users to a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersAddRequest">Add DSGroup users request object</param>
        /// <returns></returns>
        AddDSGroupAndUsersResponse AddDSGroupUsers(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersAddRequest dSGroupUsersAddRequest);

        /// <summary>
        /// Add list of users to a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersAddRequest">Add DSGroup users request object</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<AddDSGroupAndUsersResponse> AddDSGroupUsersWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersAddRequest dSGroupUsersAddRequest);
        /// <summary>
        /// Delete a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <returns></returns>
        void DeleteDSGroup(Guid? organizationId, Guid? accountId, Guid? dsGroupId);

        /// <summary>
        /// Delete a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDSGroupWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId);
        /// <summary>
        /// Get list of DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The dsGroup ID GUID</param>
        /// <returns></returns>
        DSGroupResponse GetDSGroup(Guid? organizationId, Guid? accountId, Guid? dsGroupId);

        /// <summary>
        /// Get list of DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The dsGroup ID GUID</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DSGroupResponse> GetDSGroupWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId);
        /// <summary>
        /// Get list of users in a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        DSGroupAndUsersResponse GetDSGroupUsers(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupsApi.GetDSGroupUsersOptions options = null);

        /// <summary>
        /// Get list of users in a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DSGroupAndUsersResponse> GetDSGroupUsersWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupsApi.GetDSGroupUsersOptions options = null);
        /// <summary>
        /// Get list of DSGroups
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        DSGroupListResponse GetDSGroups(Guid? organizationId, Guid? accountId, DSGroupsApi.GetDSGroupsOptions options = null);

        /// <summary>
        /// Get list of DSGroups
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DSGroupListResponse> GetDSGroupsWithHttpInfo(Guid? organizationId, Guid? accountId, DSGroupsApi.GetDSGroupsOptions options = null);
        /// <summary>
        /// Remove users from a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersRemoveRequest">Remove DSGroup users request object</param>
        /// <returns></returns>
        RemoveDSGroupUsersResponse RemoveDSGroupUsers(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersRemoveRequest dSGroupUsersRemoveRequest);

        /// <summary>
        /// Remove users from a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersRemoveRequest">Remove DSGroup users request object</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<RemoveDSGroupUsersResponse> RemoveDSGroupUsersWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersRemoveRequest dSGroupUsersRemoveRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a new DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="addRequest">Add DSGroup request object</param>
        /// <returns>Task of DSGroupResponse</returns>
        System.Threading.Tasks.Task<DSGroupResponse> AddDSGroupAsync(Guid? organizationId, Guid? accountId, DSGroupAddRequest addRequest);

        /// <summary>
        /// Add a new DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="addRequest">Add DSGroup request object</param>
        /// <returns>Task of ApiResponse (DSGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSGroupResponse>> AddDSGroupAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, DSGroupAddRequest addRequest);
        /// <summary>
        /// Add list of users to a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersAddRequest">Add DSGroup users request object</param>
        /// <returns>Task of AddDSGroupAndUsersResponse</returns>
        System.Threading.Tasks.Task<AddDSGroupAndUsersResponse> AddDSGroupUsersAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersAddRequest dSGroupUsersAddRequest);

        /// <summary>
        /// Add list of users to a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersAddRequest">Add DSGroup users request object</param>
        /// <returns>Task of ApiResponse (AddDSGroupAndUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddDSGroupAndUsersResponse>> AddDSGroupUsersAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersAddRequest dSGroupUsersAddRequest);
        /// <summary>
        /// Delete a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDSGroupAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId);

        /// <summary>
        /// Delete a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDSGroupAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId);
        /// <summary>
        /// Get list of DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The dsGroup ID GUID</param>
        /// <returns>Task of DSGroupResponse</returns>
        System.Threading.Tasks.Task<DSGroupResponse> GetDSGroupAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId);

        /// <summary>
        /// Get list of DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The dsGroup ID GUID</param>
        /// <returns>Task of ApiResponse (DSGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSGroupResponse>> GetDSGroupAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId);
        /// <summary>
        /// Get list of users in a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of DSGroupAndUsersResponse</returns>
        System.Threading.Tasks.Task<DSGroupAndUsersResponse> GetDSGroupUsersAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupsApi.GetDSGroupUsersOptions options = null);

        /// <summary>
        /// Get list of users in a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (DSGroupAndUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSGroupAndUsersResponse>> GetDSGroupUsersAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupsApi.GetDSGroupUsersOptions options = null);
        /// <summary>
        /// Get list of DSGroups
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of DSGroupListResponse</returns>
        System.Threading.Tasks.Task<DSGroupListResponse> GetDSGroupsAsync(Guid? organizationId, Guid? accountId, DSGroupsApi.GetDSGroupsOptions options = null);

        /// <summary>
        /// Get list of DSGroups
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (DSGroupListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DSGroupListResponse>> GetDSGroupsAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, DSGroupsApi.GetDSGroupsOptions options = null);
        /// <summary>
        /// Remove users from a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersRemoveRequest">Remove DSGroup users request object</param>
        /// <returns>Task of RemoveDSGroupUsersResponse</returns>
        System.Threading.Tasks.Task<RemoveDSGroupUsersResponse> RemoveDSGroupUsersAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersRemoveRequest dSGroupUsersRemoveRequest);

        /// <summary>
        /// Remove users from a DSGroup
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersRemoveRequest">Remove DSGroup users request object</param>
        /// <returns>Task of ApiResponse (RemoveDSGroupUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveDSGroupUsersResponse>> RemoveDSGroupUsersAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersRemoveRequest dSGroupUsersRemoveRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DSGroupsApi : IDSGroupsApi
    {
        private DocuSign.Admin.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DSGroupsApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public DSGroupsApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Admin.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Add a new DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="addRequest">Add DSGroup request object</param>
        /// <returns>DSGroupResponse</returns>
        public DSGroupResponse AddDSGroup(Guid? organizationId, Guid? accountId, DSGroupAddRequest addRequest)
        {
             ApiResponse<DSGroupResponse> localVarResponse = AddDSGroupWithHttpInfo(organizationId, accountId, addRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="addRequest">Add DSGroup request object</param>
        /// <returns>ApiResponse of DSGroupResponse</returns>
        public ApiResponse<DSGroupResponse> AddDSGroupWithHttpInfo(Guid? organizationId, Guid? accountId, DSGroupAddRequest addRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->AddDSGroup");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->AddDSGroup");
            // verify the required parameter 'addRequest' is set
            if (addRequest == null)
                throw new ApiException(400, "Missing required parameter 'addRequest' when calling DSGroupsApi->AddDSGroup");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (addRequest != null && addRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(addRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDSGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSGroupResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DSGroupResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DSGroupResponse)));
        }

        /// <summary>
        /// Add a new DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="addRequest">Add DSGroup request object</param>
        /// <returns>Task of DSGroupResponse</returns>
        public async System.Threading.Tasks.Task<DSGroupResponse> AddDSGroupAsync(Guid? organizationId, Guid? accountId, DSGroupAddRequest addRequest)
        {
             ApiResponse<DSGroupResponse> localVarResponse = await AddDSGroupAsyncWithHttpInfo(organizationId, accountId, addRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="addRequest">Add DSGroup request object</param>
        /// <returns>Task of ApiResponse (DSGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSGroupResponse>> AddDSGroupAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, DSGroupAddRequest addRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->AddDSGroup");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->AddDSGroup");
            // verify the required parameter 'addRequest' is set
            if (addRequest == null)
                throw new ApiException(400, "Missing required parameter 'addRequest' when calling DSGroupsApi->AddDSGroup");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (addRequest != null && addRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(addRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDSGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSGroupResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DSGroupResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DSGroupResponse)));
        }


        /// <summary>
        /// Add list of users to a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersAddRequest">Add DSGroup users request object</param>
        /// <returns>AddDSGroupAndUsersResponse</returns>
        public AddDSGroupAndUsersResponse AddDSGroupUsers(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersAddRequest dSGroupUsersAddRequest)
        {
             ApiResponse<AddDSGroupAndUsersResponse> localVarResponse = AddDSGroupUsersWithHttpInfo(organizationId, accountId, dsGroupId, dSGroupUsersAddRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add list of users to a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersAddRequest">Add DSGroup users request object</param>
        /// <returns>ApiResponse of AddDSGroupAndUsersResponse</returns>
        public ApiResponse<AddDSGroupAndUsersResponse> AddDSGroupUsersWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersAddRequest dSGroupUsersAddRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->AddDSGroupUsers");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->AddDSGroupUsers");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->AddDSGroupUsers");
            // verify the required parameter 'dSGroupUsersAddRequest' is set
            if (dSGroupUsersAddRequest == null)
                throw new ApiException(400, "Missing required parameter 'dSGroupUsersAddRequest' when calling DSGroupsApi->AddDSGroupUsers");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter
            if (dSGroupUsersAddRequest != null && dSGroupUsersAddRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(dSGroupUsersAddRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dSGroupUsersAddRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDSGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddDSGroupAndUsersResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AddDSGroupAndUsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(AddDSGroupAndUsersResponse)));
        }

        /// <summary>
        /// Add list of users to a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersAddRequest">Add DSGroup users request object</param>
        /// <returns>Task of AddDSGroupAndUsersResponse</returns>
        public async System.Threading.Tasks.Task<AddDSGroupAndUsersResponse> AddDSGroupUsersAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersAddRequest dSGroupUsersAddRequest)
        {
             ApiResponse<AddDSGroupAndUsersResponse> localVarResponse = await AddDSGroupUsersAsyncWithHttpInfo(organizationId, accountId, dsGroupId, dSGroupUsersAddRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add list of users to a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersAddRequest">Add DSGroup users request object</param>
        /// <returns>Task of ApiResponse (AddDSGroupAndUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddDSGroupAndUsersResponse>> AddDSGroupUsersAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersAddRequest dSGroupUsersAddRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->AddDSGroupUsers");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->AddDSGroupUsers");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->AddDSGroupUsers");
            // verify the required parameter 'dSGroupUsersAddRequest' is set
            if (dSGroupUsersAddRequest == null)
                throw new ApiException(400, "Missing required parameter 'dSGroupUsersAddRequest' when calling DSGroupsApi->AddDSGroupUsers");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter
            if (dSGroupUsersAddRequest != null && dSGroupUsersAddRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(dSGroupUsersAddRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dSGroupUsersAddRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDSGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddDSGroupAndUsersResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AddDSGroupAndUsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(AddDSGroupAndUsersResponse)));
        }


        /// <summary>
        /// Delete a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <returns></returns>
        public void DeleteDSGroup(Guid? organizationId, Guid? accountId, Guid? dsGroupId)
        {
             DeleteDSGroupWithHttpInfo(organizationId, accountId, dsGroupId);
        }

        /// <summary>
        /// Delete a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDSGroupWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->DeleteDSGroup");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->DeleteDSGroup");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->DeleteDSGroup");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDSGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDSGroupAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId)
        {
             await DeleteDSGroupAsyncWithHttpInfo(organizationId, accountId, dsGroupId);
        }

        /// <summary>
        /// Delete a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDSGroupAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->DeleteDSGroup");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->DeleteDSGroup");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->DeleteDSGroup");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDSGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }


        /// <summary>
        /// Get list of DSGroup Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The dsGroup ID GUID</param>
        /// <returns>DSGroupResponse</returns>
        public DSGroupResponse GetDSGroup(Guid? organizationId, Guid? accountId, Guid? dsGroupId)
        {
             ApiResponse<DSGroupResponse> localVarResponse = GetDSGroupWithHttpInfo(organizationId, accountId, dsGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of DSGroup Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The dsGroup ID GUID</param>
        /// <returns>ApiResponse of DSGroupResponse</returns>
        public ApiResponse<DSGroupResponse> GetDSGroupWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->GetDSGroup");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->GetDSGroup");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->GetDSGroup");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDSGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSGroupResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DSGroupResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DSGroupResponse)));
        }

        /// <summary>
        /// Get list of DSGroup Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The dsGroup ID GUID</param>
        /// <returns>Task of DSGroupResponse</returns>
        public async System.Threading.Tasks.Task<DSGroupResponse> GetDSGroupAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId)
        {
             ApiResponse<DSGroupResponse> localVarResponse = await GetDSGroupAsyncWithHttpInfo(organizationId, accountId, dsGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of DSGroup Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The dsGroup ID GUID</param>
        /// <returns>Task of ApiResponse (DSGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSGroupResponse>> GetDSGroupAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->GetDSGroup");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->GetDSGroup");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->GetDSGroup");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDSGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSGroupResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DSGroupResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DSGroupResponse)));
        }

        /// <summary>
        /// Get list of users in a DSGroup Required scopes: user_read
        /// </summary>
        public class GetDSGroupUsersOptions
        {
            /// Start page of dsgroup users 
            public int? page {get; set;}
            /// Page size of dsgroup users 
            public int? pageSize {get; set;}
        }

        /// <summary>
        /// Get list of users in a DSGroup Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>DSGroupAndUsersResponse</returns>
        public DSGroupAndUsersResponse GetDSGroupUsers(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupsApi.GetDSGroupUsersOptions options = null)
        {
             ApiResponse<DSGroupAndUsersResponse> localVarResponse = GetDSGroupUsersWithHttpInfo(organizationId, accountId, dsGroupId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of users in a DSGroup Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of DSGroupAndUsersResponse</returns>
        public ApiResponse<DSGroupAndUsersResponse> GetDSGroupUsersWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupsApi.GetDSGroupUsersOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->GetDSGroupUsers");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->GetDSGroupUsers");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->GetDSGroupUsers");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter
            if (options != null)
            {
                if (options.page != null) localVarQueryParams.Add("page", this.ApiClient.ParameterToString(options.page)); // query parameter
                if (options.pageSize != null) localVarQueryParams.Add("page_size", this.ApiClient.ParameterToString(options.pageSize)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDSGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSGroupAndUsersResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DSGroupAndUsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DSGroupAndUsersResponse)));
        }

        /// <summary>
        /// Get list of users in a DSGroup Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of DSGroupAndUsersResponse</returns>
        public async System.Threading.Tasks.Task<DSGroupAndUsersResponse> GetDSGroupUsersAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupsApi.GetDSGroupUsersOptions options = null)
        {
             ApiResponse<DSGroupAndUsersResponse> localVarResponse = await GetDSGroupUsersAsyncWithHttpInfo(organizationId, accountId, dsGroupId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of users in a DSGroup Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (DSGroupAndUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSGroupAndUsersResponse>> GetDSGroupUsersAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupsApi.GetDSGroupUsersOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->GetDSGroupUsers");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->GetDSGroupUsers");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->GetDSGroupUsers");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter
            if (options != null)
            {
                if (options.page != null) localVarQueryParams.Add("page", this.ApiClient.ParameterToString(options.page)); // query parameter
                if (options.pageSize != null) localVarQueryParams.Add("page_size", this.ApiClient.ParameterToString(options.pageSize)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDSGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSGroupAndUsersResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DSGroupAndUsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DSGroupAndUsersResponse)));
        }

        /// <summary>
        /// Get list of DSGroups Required scopes: user_read
        /// </summary>
        public class GetDSGroupsOptions
        {
            /// Start page of dsgroups 
            public int? page {get; set;}
            /// Page size of dsgroups 
            public int? pageSize {get; set;}
        }

        /// <summary>
        /// Get list of DSGroups Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>DSGroupListResponse</returns>
        public DSGroupListResponse GetDSGroups(Guid? organizationId, Guid? accountId, DSGroupsApi.GetDSGroupsOptions options = null)
        {
             ApiResponse<DSGroupListResponse> localVarResponse = GetDSGroupsWithHttpInfo(organizationId, accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of DSGroups Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of DSGroupListResponse</returns>
        public ApiResponse<DSGroupListResponse> GetDSGroupsWithHttpInfo(Guid? organizationId, Guid? accountId, DSGroupsApi.GetDSGroupsOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->GetDSGroups");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->GetDSGroups");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.page != null) localVarQueryParams.Add("page", this.ApiClient.ParameterToString(options.page)); // query parameter
                if (options.pageSize != null) localVarQueryParams.Add("page_size", this.ApiClient.ParameterToString(options.pageSize)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDSGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSGroupListResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DSGroupListResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DSGroupListResponse)));
        }

        /// <summary>
        /// Get list of DSGroups Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of DSGroupListResponse</returns>
        public async System.Threading.Tasks.Task<DSGroupListResponse> GetDSGroupsAsync(Guid? organizationId, Guid? accountId, DSGroupsApi.GetDSGroupsOptions options = null)
        {
             ApiResponse<DSGroupListResponse> localVarResponse = await GetDSGroupsAsyncWithHttpInfo(organizationId, accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of DSGroups Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (DSGroupListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DSGroupListResponse>> GetDSGroupsAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, DSGroupsApi.GetDSGroupsOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->GetDSGroups");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->GetDSGroups");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.page != null) localVarQueryParams.Add("page", this.ApiClient.ParameterToString(options.page)); // query parameter
                if (options.pageSize != null) localVarQueryParams.Add("page_size", this.ApiClient.ParameterToString(options.pageSize)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDSGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DSGroupListResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DSGroupListResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DSGroupListResponse)));
        }


        /// <summary>
        /// Remove users from a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersRemoveRequest">Remove DSGroup users request object</param>
        /// <returns>RemoveDSGroupUsersResponse</returns>
        public RemoveDSGroupUsersResponse RemoveDSGroupUsers(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersRemoveRequest dSGroupUsersRemoveRequest)
        {
             ApiResponse<RemoveDSGroupUsersResponse> localVarResponse = RemoveDSGroupUsersWithHttpInfo(organizationId, accountId, dsGroupId, dSGroupUsersRemoveRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersRemoveRequest">Remove DSGroup users request object</param>
        /// <returns>ApiResponse of RemoveDSGroupUsersResponse</returns>
        public ApiResponse<RemoveDSGroupUsersResponse> RemoveDSGroupUsersWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersRemoveRequest dSGroupUsersRemoveRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->RemoveDSGroupUsers");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->RemoveDSGroupUsers");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->RemoveDSGroupUsers");
            // verify the required parameter 'dSGroupUsersRemoveRequest' is set
            if (dSGroupUsersRemoveRequest == null)
                throw new ApiException(400, "Missing required parameter 'dSGroupUsersRemoveRequest' when calling DSGroupsApi->RemoveDSGroupUsers");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter
            if (dSGroupUsersRemoveRequest != null && dSGroupUsersRemoveRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(dSGroupUsersRemoveRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dSGroupUsersRemoveRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDSGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveDSGroupUsersResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (RemoveDSGroupUsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(RemoveDSGroupUsersResponse)));
        }

        /// <summary>
        /// Remove users from a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersRemoveRequest">Remove DSGroup users request object</param>
        /// <returns>Task of RemoveDSGroupUsersResponse</returns>
        public async System.Threading.Tasks.Task<RemoveDSGroupUsersResponse> RemoveDSGroupUsersAsync(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersRemoveRequest dSGroupUsersRemoveRequest)
        {
             ApiResponse<RemoveDSGroupUsersResponse> localVarResponse = await RemoveDSGroupUsersAsyncWithHttpInfo(organizationId, accountId, dsGroupId, dSGroupUsersRemoveRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from a DSGroup Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="dsGroupId">The DSGroup ID GUID</param>
        /// <param name="dSGroupUsersRemoveRequest">Remove DSGroup users request object</param>
        /// <returns>Task of ApiResponse (RemoveDSGroupUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveDSGroupUsersResponse>> RemoveDSGroupUsersAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? dsGroupId, DSGroupUsersRemoveRequest dSGroupUsersRemoveRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling DSGroupsApi->RemoveDSGroupUsers");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DSGroupsApi->RemoveDSGroupUsers");
            // verify the required parameter 'dsGroupId' is set
            if (dsGroupId == null)
                throw new ApiException(400, "Missing required parameter 'dsGroupId' when calling DSGroupsApi->RemoveDSGroupUsers");
            // verify the required parameter 'dSGroupUsersRemoveRequest' is set
            if (dSGroupUsersRemoveRequest == null)
                throw new ApiException(400, "Missing required parameter 'dSGroupUsersRemoveRequest' when calling DSGroupsApi->RemoveDSGroupUsers");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (dsGroupId != null) localVarPathParams.Add("dsGroupId", this.ApiClient.ParameterToString(dsGroupId)); // path parameter
            if (dSGroupUsersRemoveRequest != null && dSGroupUsersRemoveRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(dSGroupUsersRemoveRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dSGroupUsersRemoveRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDSGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveDSGroupUsersResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (RemoveDSGroupUsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(RemoveDSGroupUsersResponse)));
        }

    }
}