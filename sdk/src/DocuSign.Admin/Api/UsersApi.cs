/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Admin.Client;
using DocuSign.Admin.Model;

namespace DocuSign.Admin.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activates user memberships
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="membershipId">The membership ID Guid</param>
        /// <param name="request">Additional details about the user&#39;s membership</param>
        /// <returns></returns>
        UpdateResponse ActivateMembership(Guid? organizationId, Guid? userId, Guid? membershipId, ForceActivateMembershipRequest request);

        /// <summary>
        /// Activates user memberships
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="membershipId">The membership ID Guid</param>
        /// <param name="request">Additional details about the user&#39;s membership</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UpdateResponse> ActivateMembershipWithHttpInfo(Guid? organizationId, Guid? userId, Guid? membershipId, ForceActivateMembershipRequest request);
        /// <summary>
        /// Creates and updates a multi-product user
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="request">The request object</param>
        /// <returns></returns>
        AddUserResponse AddOrUpdateUser(Guid? organizationId, Guid? accountId, NewMultiProductUserAddRequest request);

        /// <summary>
        /// Creates and updates a multi-product user
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="request">The request object</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<AddUserResponse> AddOrUpdateUserWithHttpInfo(Guid? organizationId, Guid? accountId, NewMultiProductUserAddRequest request);
        /// <summary>
        /// Adds users to an account.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="request">The details for the users to add to the account</param>
        /// <returns></returns>
        NewUserResponse AddUsers(Guid? organizationId, Guid? accountId, NewAccountUserRequest request);

        /// <summary>
        /// Adds users to an account.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="request">The details for the users to add to the account</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<NewUserResponse> AddUsersWithHttpInfo(Guid? organizationId, Guid? accountId, NewAccountUserRequest request);
        /// <summary>
        /// Closes a user&#39;s memberships.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="request">The details about which membership to close</param>
        /// <returns></returns>
        DeleteMembershipsResponse CloseMemberships(Guid? organizationId, Guid? userId, DeleteMembershipsRequest request);

        /// <summary>
        /// Closes a user&#39;s memberships.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="request">The details about which membership to close</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DeleteMembershipsResponse> CloseMembershipsWithHttpInfo(Guid? organizationId, Guid? userId, DeleteMembershipsRequest request);
        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Details about the user to be added</param>
        /// <returns></returns>
        NewUserResponse CreateUser(Guid? organizationId, NewUserRequest request);

        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Details about the user to be added</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<NewUserResponse> CreateUserWithHttpInfo(Guid? organizationId, NewUserRequest request);
        /// <summary>
        /// Deletes user identities.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="requestModel">The details for the user identities to be deleted</param>
        /// <returns></returns>
        DeleteResponse DeleteIdentities(Guid? organizationId, Guid? userId, DeleteUserIdentityRequest requestModel);

        /// <summary>
        /// Deletes user identities.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="requestModel">The details for the user identities to be deleted</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<DeleteResponse> DeleteIdentitiesWithHttpInfo(Guid? organizationId, Guid? userId, DeleteUserIdentityRequest requestModel);
        /// <summary>
        /// Returns user information using the userId for lookup.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        UsersDrilldownResponse GetUserDSProfile(Guid? organizationId, Guid? userId, UsersApi.GetUserDSProfileOptions options = null);

        /// <summary>
        /// Returns user information using the userId for lookup.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UsersDrilldownResponse> GetUserDSProfileWithHttpInfo(Guid? organizationId, Guid? userId, UsersApi.GetUserDSProfileOptions options = null);
        /// <summary>
        /// Returns DS user profile information.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        UsersDrilldownResponse GetUserDSProfilesByEmail(Guid? organizationId, UsersApi.GetUserDSProfilesByEmailOptions options = null);

        /// <summary>
        /// Returns DS user profile information.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UsersDrilldownResponse> GetUserDSProfilesByEmailWithHttpInfo(Guid? organizationId, UsersApi.GetUserDSProfilesByEmailOptions options = null);
        /// <summary>
        /// Returns user information.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        UsersDrilldownResponse GetUserProfiles(Guid? organizationId, UsersApi.GetUserProfilesOptions options = null);

        /// <summary>
        /// Returns user information.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UsersDrilldownResponse> GetUserProfilesWithHttpInfo(Guid? organizationId, UsersApi.GetUserProfilesOptions options = null);
        /// <summary>
        /// Returns information about the users in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        OrganizationUsersResponse GetUsers(Guid? organizationId, UsersApi.GetUsersOptions options = null);

        /// <summary>
        /// Returns information about the users in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationUsersResponse> GetUsersWithHttpInfo(Guid? organizationId, UsersApi.GetUsersOptions options = null);
        /// <summary>
        /// Updates a user&#39;s email address.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The details about which email addresses to update</param>
        /// <returns></returns>
        UsersUpdateResponse UpdateEmailAddress(Guid? organizationId, UpdateUsersEmailRequest request);

        /// <summary>
        /// Updates a user&#39;s email address.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The details about which email addresses to update</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UsersUpdateResponse> UpdateEmailAddressWithHttpInfo(Guid? organizationId, UpdateUsersEmailRequest request);
        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The user details to update</param>
        /// <returns></returns>
        UsersUpdateResponse UpdateUser(Guid? organizationId, UpdateUsersRequest request);

        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The user details to update</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UsersUpdateResponse> UpdateUserWithHttpInfo(Guid? organizationId, UpdateUsersRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activates user memberships
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="membershipId">The membership ID Guid</param>
        /// <param name="request">Additional details about the user&#39;s membership</param>
        /// <returns>Task of UpdateResponse</returns>
        System.Threading.Tasks.Task<UpdateResponse> ActivateMembershipAsync(Guid? organizationId, Guid? userId, Guid? membershipId, ForceActivateMembershipRequest request);

        /// <summary>
        /// Activates user memberships
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="membershipId">The membership ID Guid</param>
        /// <param name="request">Additional details about the user&#39;s membership</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> ActivateMembershipAsyncWithHttpInfo(Guid? organizationId, Guid? userId, Guid? membershipId, ForceActivateMembershipRequest request);
        /// <summary>
        /// Creates and updates a multi-product user
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="request">The request object</param>
        /// <returns>Task of AddUserResponse</returns>
        System.Threading.Tasks.Task<AddUserResponse> AddOrUpdateUserAsync(Guid? organizationId, Guid? accountId, NewMultiProductUserAddRequest request);

        /// <summary>
        /// Creates and updates a multi-product user
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="request">The request object</param>
        /// <returns>Task of ApiResponse (AddUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddUserResponse>> AddOrUpdateUserAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, NewMultiProductUserAddRequest request);
        /// <summary>
        /// Adds users to an account.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="request">The details for the users to add to the account</param>
        /// <returns>Task of NewUserResponse</returns>
        System.Threading.Tasks.Task<NewUserResponse> AddUsersAsync(Guid? organizationId, Guid? accountId, NewAccountUserRequest request);

        /// <summary>
        /// Adds users to an account.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="request">The details for the users to add to the account</param>
        /// <returns>Task of ApiResponse (NewUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewUserResponse>> AddUsersAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, NewAccountUserRequest request);
        /// <summary>
        /// Closes a user&#39;s memberships.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="request">The details about which membership to close</param>
        /// <returns>Task of DeleteMembershipsResponse</returns>
        System.Threading.Tasks.Task<DeleteMembershipsResponse> CloseMembershipsAsync(Guid? organizationId, Guid? userId, DeleteMembershipsRequest request);

        /// <summary>
        /// Closes a user&#39;s memberships.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="request">The details about which membership to close</param>
        /// <returns>Task of ApiResponse (DeleteMembershipsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteMembershipsResponse>> CloseMembershipsAsyncWithHttpInfo(Guid? organizationId, Guid? userId, DeleteMembershipsRequest request);
        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Details about the user to be added</param>
        /// <returns>Task of NewUserResponse</returns>
        System.Threading.Tasks.Task<NewUserResponse> CreateUserAsync(Guid? organizationId, NewUserRequest request);

        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Details about the user to be added</param>
        /// <returns>Task of ApiResponse (NewUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewUserResponse>> CreateUserAsyncWithHttpInfo(Guid? organizationId, NewUserRequest request);
        /// <summary>
        /// Deletes user identities.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="requestModel">The details for the user identities to be deleted</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> DeleteIdentitiesAsync(Guid? organizationId, Guid? userId, DeleteUserIdentityRequest requestModel);

        /// <summary>
        /// Deletes user identities.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="requestModel">The details for the user identities to be deleted</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteIdentitiesAsyncWithHttpInfo(Guid? organizationId, Guid? userId, DeleteUserIdentityRequest requestModel);
        /// <summary>
        /// Returns user information using the userId for lookup.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UsersDrilldownResponse</returns>
        System.Threading.Tasks.Task<UsersDrilldownResponse> GetUserDSProfileAsync(Guid? organizationId, Guid? userId, UsersApi.GetUserDSProfileOptions options = null);

        /// <summary>
        /// Returns user information using the userId for lookup.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UsersDrilldownResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersDrilldownResponse>> GetUserDSProfileAsyncWithHttpInfo(Guid? organizationId, Guid? userId, UsersApi.GetUserDSProfileOptions options = null);
        /// <summary>
        /// Returns DS user profile information.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UsersDrilldownResponse</returns>
        System.Threading.Tasks.Task<UsersDrilldownResponse> GetUserDSProfilesByEmailAsync(Guid? organizationId, UsersApi.GetUserDSProfilesByEmailOptions options = null);

        /// <summary>
        /// Returns DS user profile information.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UsersDrilldownResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersDrilldownResponse>> GetUserDSProfilesByEmailAsyncWithHttpInfo(Guid? organizationId, UsersApi.GetUserDSProfilesByEmailOptions options = null);
        /// <summary>
        /// Returns user information.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UsersDrilldownResponse</returns>
        System.Threading.Tasks.Task<UsersDrilldownResponse> GetUserProfilesAsync(Guid? organizationId, UsersApi.GetUserProfilesOptions options = null);

        /// <summary>
        /// Returns user information.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UsersDrilldownResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersDrilldownResponse>> GetUserProfilesAsyncWithHttpInfo(Guid? organizationId, UsersApi.GetUserProfilesOptions options = null);
        /// <summary>
        /// Returns information about the users in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of OrganizationUsersResponse</returns>
        System.Threading.Tasks.Task<OrganizationUsersResponse> GetUsersAsync(Guid? organizationId, UsersApi.GetUsersOptions options = null);

        /// <summary>
        /// Returns information about the users in the organization
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (OrganizationUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationUsersResponse>> GetUsersAsyncWithHttpInfo(Guid? organizationId, UsersApi.GetUsersOptions options = null);
        /// <summary>
        /// Updates a user&#39;s email address.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The details about which email addresses to update</param>
        /// <returns>Task of UsersUpdateResponse</returns>
        System.Threading.Tasks.Task<UsersUpdateResponse> UpdateEmailAddressAsync(Guid? organizationId, UpdateUsersEmailRequest request);

        /// <summary>
        /// Updates a user&#39;s email address.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The details about which email addresses to update</param>
        /// <returns>Task of ApiResponse (UsersUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersUpdateResponse>> UpdateEmailAddressAsyncWithHttpInfo(Guid? organizationId, UpdateUsersEmailRequest request);
        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The user details to update</param>
        /// <returns>Task of UsersUpdateResponse</returns>
        System.Threading.Tasks.Task<UsersUpdateResponse> UpdateUserAsync(Guid? organizationId, UpdateUsersRequest request);

        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The user details to update</param>
        /// <returns>Task of ApiResponse (UsersUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersUpdateResponse>> UpdateUserAsyncWithHttpInfo(Guid? organizationId, UpdateUsersRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private DocuSign.Admin.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public UsersApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Admin.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Activates user memberships Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="membershipId">The membership ID Guid</param>
        /// <param name="request">Additional details about the user&#39;s membership</param>
        /// <returns>UpdateResponse</returns>
        public UpdateResponse ActivateMembership(Guid? organizationId, Guid? userId, Guid? membershipId, ForceActivateMembershipRequest request)
        {
             ApiResponse<UpdateResponse> localVarResponse = ActivateMembershipWithHttpInfo(organizationId, userId, membershipId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activates user memberships Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="membershipId">The membership ID Guid</param>
        /// <param name="request">Additional details about the user&#39;s membership</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        public ApiResponse<UpdateResponse> ActivateMembershipWithHttpInfo(Guid? organizationId, Guid? userId, Guid? membershipId, ForceActivateMembershipRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->ActivateMembership");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ActivateMembership");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling UsersApi->ActivateMembership");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->ActivateMembership");

            var localVarPath = "/v2/organizations/{organizationId}/users/{userId}/memberships/{membershipId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", this.ApiClient.ParameterToString(membershipId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UpdateResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UpdateResponse)));
        }

        /// <summary>
        /// Activates user memberships Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="membershipId">The membership ID Guid</param>
        /// <param name="request">Additional details about the user&#39;s membership</param>
        /// <returns>Task of UpdateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateResponse> ActivateMembershipAsync(Guid? organizationId, Guid? userId, Guid? membershipId, ForceActivateMembershipRequest request)
        {
             ApiResponse<UpdateResponse> localVarResponse = await ActivateMembershipAsyncWithHttpInfo(organizationId, userId, membershipId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activates user memberships Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="membershipId">The membership ID Guid</param>
        /// <param name="request">Additional details about the user&#39;s membership</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> ActivateMembershipAsyncWithHttpInfo(Guid? organizationId, Guid? userId, Guid? membershipId, ForceActivateMembershipRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->ActivateMembership");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ActivateMembership");
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
                throw new ApiException(400, "Missing required parameter 'membershipId' when calling UsersApi->ActivateMembership");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->ActivateMembership");

            var localVarPath = "/v2/organizations/{organizationId}/users/{userId}/memberships/{membershipId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (membershipId != null) localVarPathParams.Add("membershipId", this.ApiClient.ParameterToString(membershipId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateMembership", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UpdateResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UpdateResponse)));
        }


        /// <summary>
        /// Creates and updates a multi-product user Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="request">The request object</param>
        /// <returns>AddUserResponse</returns>
        public AddUserResponse AddOrUpdateUser(Guid? organizationId, Guid? accountId, NewMultiProductUserAddRequest request)
        {
             ApiResponse<AddUserResponse> localVarResponse = AddOrUpdateUserWithHttpInfo(organizationId, accountId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates and updates a multi-product user Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="request">The request object</param>
        /// <returns>ApiResponse of AddUserResponse</returns>
        public ApiResponse<AddUserResponse> AddOrUpdateUserWithHttpInfo(Guid? organizationId, Guid? accountId, NewMultiProductUserAddRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->AddOrUpdateUser");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->AddOrUpdateUser");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->AddOrUpdateUser");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrUpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddUserResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AddUserResponse)this.ApiClient.Deserialize(localVarResponse, typeof(AddUserResponse)));
        }

        /// <summary>
        /// Creates and updates a multi-product user Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="request">The request object</param>
        /// <returns>Task of AddUserResponse</returns>
        public async System.Threading.Tasks.Task<AddUserResponse> AddOrUpdateUserAsync(Guid? organizationId, Guid? accountId, NewMultiProductUserAddRequest request)
        {
             ApiResponse<AddUserResponse> localVarResponse = await AddOrUpdateUserAsyncWithHttpInfo(organizationId, accountId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates and updates a multi-product user Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="request">The request object</param>
        /// <returns>Task of ApiResponse (AddUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddUserResponse>> AddOrUpdateUserAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, NewMultiProductUserAddRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->AddOrUpdateUser");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->AddOrUpdateUser");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->AddOrUpdateUser");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrUpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddUserResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AddUserResponse)this.ApiClient.Deserialize(localVarResponse, typeof(AddUserResponse)));
        }


        /// <summary>
        /// Adds users to an account. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="request">The details for the users to add to the account</param>
        /// <returns>NewUserResponse</returns>
        public NewUserResponse AddUsers(Guid? organizationId, Guid? accountId, NewAccountUserRequest request)
        {
             ApiResponse<NewUserResponse> localVarResponse = AddUsersWithHttpInfo(organizationId, accountId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds users to an account. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="request">The details for the users to add to the account</param>
        /// <returns>ApiResponse of NewUserResponse</returns>
        public ApiResponse<NewUserResponse> AddUsersWithHttpInfo(Guid? organizationId, Guid? accountId, NewAccountUserRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->AddUsers");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->AddUsers");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->AddUsers");

            var localVarPath = "/v2/organizations/{organizationId}/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewUserResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (NewUserResponse)this.ApiClient.Deserialize(localVarResponse, typeof(NewUserResponse)));
        }

        /// <summary>
        /// Adds users to an account. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="request">The details for the users to add to the account</param>
        /// <returns>Task of NewUserResponse</returns>
        public async System.Threading.Tasks.Task<NewUserResponse> AddUsersAsync(Guid? organizationId, Guid? accountId, NewAccountUserRequest request)
        {
             ApiResponse<NewUserResponse> localVarResponse = await AddUsersAsyncWithHttpInfo(organizationId, accountId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds users to an account. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="accountId">The account ID Guid</param>
        /// <param name="request">The details for the users to add to the account</param>
        /// <returns>Task of ApiResponse (NewUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewUserResponse>> AddUsersAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, NewAccountUserRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->AddUsers");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->AddUsers");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->AddUsers");

            var localVarPath = "/v2/organizations/{organizationId}/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewUserResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (NewUserResponse)this.ApiClient.Deserialize(localVarResponse, typeof(NewUserResponse)));
        }


        /// <summary>
        /// Closes a user&#39;s memberships. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="request">The details about which membership to close</param>
        /// <returns>DeleteMembershipsResponse</returns>
        public DeleteMembershipsResponse CloseMemberships(Guid? organizationId, Guid? userId, DeleteMembershipsRequest request)
        {
             ApiResponse<DeleteMembershipsResponse> localVarResponse = CloseMembershipsWithHttpInfo(organizationId, userId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closes a user&#39;s memberships. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="request">The details about which membership to close</param>
        /// <returns>ApiResponse of DeleteMembershipsResponse</returns>
        public ApiResponse<DeleteMembershipsResponse> CloseMembershipsWithHttpInfo(Guid? organizationId, Guid? userId, DeleteMembershipsRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->CloseMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->CloseMemberships");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->CloseMemberships");

            var localVarPath = "/v2/organizations/{organizationId}/users/{userId}/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteMembershipsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DeleteMembershipsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DeleteMembershipsResponse)));
        }

        /// <summary>
        /// Closes a user&#39;s memberships. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="request">The details about which membership to close</param>
        /// <returns>Task of DeleteMembershipsResponse</returns>
        public async System.Threading.Tasks.Task<DeleteMembershipsResponse> CloseMembershipsAsync(Guid? organizationId, Guid? userId, DeleteMembershipsRequest request)
        {
             ApiResponse<DeleteMembershipsResponse> localVarResponse = await CloseMembershipsAsyncWithHttpInfo(organizationId, userId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Closes a user&#39;s memberships. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="request">The details about which membership to close</param>
        /// <returns>Task of ApiResponse (DeleteMembershipsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteMembershipsResponse>> CloseMembershipsAsyncWithHttpInfo(Guid? organizationId, Guid? userId, DeleteMembershipsRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->CloseMemberships");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->CloseMemberships");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->CloseMemberships");

            var localVarPath = "/v2/organizations/{organizationId}/users/{userId}/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteMembershipsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DeleteMembershipsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DeleteMembershipsResponse)));
        }


        /// <summary>
        /// Creates a new user Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Details about the user to be added</param>
        /// <returns>NewUserResponse</returns>
        public NewUserResponse CreateUser(Guid? organizationId, NewUserRequest request)
        {
             ApiResponse<NewUserResponse> localVarResponse = CreateUserWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new user Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Details about the user to be added</param>
        /// <returns>ApiResponse of NewUserResponse</returns>
        public ApiResponse<NewUserResponse> CreateUserWithHttpInfo(Guid? organizationId, NewUserRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->CreateUser");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->CreateUser");

            var localVarPath = "/v2/organizations/{organizationId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewUserResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (NewUserResponse)this.ApiClient.Deserialize(localVarResponse, typeof(NewUserResponse)));
        }

        /// <summary>
        /// Creates a new user Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Details about the user to be added</param>
        /// <returns>Task of NewUserResponse</returns>
        public async System.Threading.Tasks.Task<NewUserResponse> CreateUserAsync(Guid? organizationId, NewUserRequest request)
        {
             ApiResponse<NewUserResponse> localVarResponse = await CreateUserAsyncWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new user Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Details about the user to be added</param>
        /// <returns>Task of ApiResponse (NewUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewUserResponse>> CreateUserAsyncWithHttpInfo(Guid? organizationId, NewUserRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->CreateUser");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->CreateUser");

            var localVarPath = "/v2/organizations/{organizationId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewUserResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (NewUserResponse)this.ApiClient.Deserialize(localVarResponse, typeof(NewUserResponse)));
        }


        /// <summary>
        /// Deletes user identities. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="requestModel">The details for the user identities to be deleted</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse DeleteIdentities(Guid? organizationId, Guid? userId, DeleteUserIdentityRequest requestModel)
        {
             ApiResponse<DeleteResponse> localVarResponse = DeleteIdentitiesWithHttpInfo(organizationId, userId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes user identities. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="requestModel">The details for the user identities to be deleted</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse<DeleteResponse> DeleteIdentitiesWithHttpInfo(Guid? organizationId, Guid? userId, DeleteUserIdentityRequest requestModel)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->DeleteIdentities");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DeleteIdentities");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling UsersApi->DeleteIdentities");

            var localVarPath = "/v2/organizations/{organizationId}/users/{userId}/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DeleteResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Deletes user identities. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="requestModel">The details for the user identities to be deleted</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> DeleteIdentitiesAsync(Guid? organizationId, Guid? userId, DeleteUserIdentityRequest requestModel)
        {
             ApiResponse<DeleteResponse> localVarResponse = await DeleteIdentitiesAsyncWithHttpInfo(organizationId, userId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes user identities. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="requestModel">The details for the user identities to be deleted</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteIdentitiesAsyncWithHttpInfo(Guid? organizationId, Guid? userId, DeleteUserIdentityRequest requestModel)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->DeleteIdentities");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->DeleteIdentities");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling UsersApi->DeleteIdentities");

            var localVarPath = "/v2/organizations/{organizationId}/users/{userId}/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (DeleteResponse)this.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Returns user information using the userId for lookup. Required scopes: user_read
        /// </summary>
        public class GetUserDSProfileOptions
        {
            /// Sorts user information by account name ascending 
            public bool? sort {get; set;}
        }

        /// <summary>
        /// Returns user information using the userId for lookup. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>UsersDrilldownResponse</returns>
        public UsersDrilldownResponse GetUserDSProfile(Guid? organizationId, Guid? userId, UsersApi.GetUserDSProfileOptions options = null)
        {
             ApiResponse<UsersDrilldownResponse> localVarResponse = GetUserDSProfileWithHttpInfo(organizationId, userId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns user information using the userId for lookup. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of UsersDrilldownResponse</returns>
        public ApiResponse<UsersDrilldownResponse> GetUserDSProfileWithHttpInfo(Guid? organizationId, Guid? userId, UsersApi.GetUserDSProfileOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetUserDSProfile");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserDSProfile");

            var localVarPath = "/v2.1/organizations/{organizationId}/users/{userId}/dsprofile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (options != null)
            {
                if (options.sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(options.sort)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDSProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDrilldownResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersDrilldownResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersDrilldownResponse)));
        }

        /// <summary>
        /// Returns user information using the userId for lookup. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UsersDrilldownResponse</returns>
        public async System.Threading.Tasks.Task<UsersDrilldownResponse> GetUserDSProfileAsync(Guid? organizationId, Guid? userId, UsersApi.GetUserDSProfileOptions options = null)
        {
             ApiResponse<UsersDrilldownResponse> localVarResponse = await GetUserDSProfileAsyncWithHttpInfo(organizationId, userId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns user information using the userId for lookup. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="userId">The user ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UsersDrilldownResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersDrilldownResponse>> GetUserDSProfileAsyncWithHttpInfo(Guid? organizationId, Guid? userId, UsersApi.GetUserDSProfileOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetUserDSProfile");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserDSProfile");

            var localVarPath = "/v2.1/organizations/{organizationId}/users/{userId}/dsprofile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (options != null)
            {
                if (options.sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(options.sort)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDSProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDrilldownResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersDrilldownResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersDrilldownResponse)));
        }

        /// <summary>
        /// Returns DS user profile information. Required scopes: user_read
        /// </summary>
        public class GetUserDSProfilesByEmailOptions
        {
            /// The email address of the user 
            public string email {get; set;}
            /// Sorts user information by account name ascending 
            public bool? sort {get; set;}
        }

        /// <summary>
        /// Returns DS user profile information. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>UsersDrilldownResponse</returns>
        public UsersDrilldownResponse GetUserDSProfilesByEmail(Guid? organizationId, UsersApi.GetUserDSProfilesByEmailOptions options = null)
        {
             ApiResponse<UsersDrilldownResponse> localVarResponse = GetUserDSProfilesByEmailWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns DS user profile information. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of UsersDrilldownResponse</returns>
        public ApiResponse<UsersDrilldownResponse> GetUserDSProfilesByEmailWithHttpInfo(Guid? organizationId, UsersApi.GetUserDSProfilesByEmailOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetUserDSProfilesByEmail");

            var localVarPath = "/v2.1/organizations/{organizationId}/users/dsprofile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(options.email)); // query parameter
                if (options.sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(options.sort)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDSProfilesByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDrilldownResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersDrilldownResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersDrilldownResponse)));
        }

        /// <summary>
        /// Returns DS user profile information. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UsersDrilldownResponse</returns>
        public async System.Threading.Tasks.Task<UsersDrilldownResponse> GetUserDSProfilesByEmailAsync(Guid? organizationId, UsersApi.GetUserDSProfilesByEmailOptions options = null)
        {
             ApiResponse<UsersDrilldownResponse> localVarResponse = await GetUserDSProfilesByEmailAsyncWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns DS user profile information. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UsersDrilldownResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersDrilldownResponse>> GetUserDSProfilesByEmailAsyncWithHttpInfo(Guid? organizationId, UsersApi.GetUserDSProfilesByEmailOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetUserDSProfilesByEmail");

            var localVarPath = "/v2.1/organizations/{organizationId}/users/dsprofile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(options.email)); // query parameter
                if (options.sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(options.sort)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDSProfilesByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDrilldownResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersDrilldownResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersDrilldownResponse)));
        }

        /// <summary>
        /// Returns user information. Required scopes: user_read
        /// </summary>
        public class GetUserProfilesOptions
        {
            /// The email address 
            public string email {get; set;}
        }

        /// <summary>
        /// Returns user information. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>UsersDrilldownResponse</returns>
        public UsersDrilldownResponse GetUserProfiles(Guid? organizationId, UsersApi.GetUserProfilesOptions options = null)
        {
             ApiResponse<UsersDrilldownResponse> localVarResponse = GetUserProfilesWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns user information. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of UsersDrilldownResponse</returns>
        public ApiResponse<UsersDrilldownResponse> GetUserProfilesWithHttpInfo(Guid? organizationId, UsersApi.GetUserProfilesOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetUserProfiles");

            var localVarPath = "/v2/organizations/{organizationId}/users/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(options.email)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDrilldownResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersDrilldownResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersDrilldownResponse)));
        }

        /// <summary>
        /// Returns user information. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UsersDrilldownResponse</returns>
        public async System.Threading.Tasks.Task<UsersDrilldownResponse> GetUserProfilesAsync(Guid? organizationId, UsersApi.GetUserProfilesOptions options = null)
        {
             ApiResponse<UsersDrilldownResponse> localVarResponse = await GetUserProfilesAsyncWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns user information. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UsersDrilldownResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersDrilldownResponse>> GetUserProfilesAsyncWithHttpInfo(Guid? organizationId, UsersApi.GetUserProfilesOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetUserProfiles");

            var localVarPath = "/v2/organizations/{organizationId}/users/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(options.email)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersDrilldownResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersDrilldownResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersDrilldownResponse)));
        }

        /// <summary>
        /// Returns information about the users in the organization Required scopes: user_read
        /// </summary>
        public class GetUsersOptions
        {
            /// Index of first item to include in the response  Default value: 0 
            public int? start {get; set;}
            /// Page size of the response  Default value: 20 
            public int? take {get; set;}
            /// Index of the last item to include in the response. Ignored if &#39;take&#39; parameter is specfied 
            public int? end {get; set;}
            /// Email address of the desired user. At least one of email, account_id or organization_reserved_domain_id must be specified. 
            public string email {get; set;}
            /// Selects users by pattern matching on the user&#39;s email address 
            public string emailUserNameLike {get; set;}
            /// Select users based on user status 
            public string status {get; set;}
            /// Select users based on membership status 
            public string membershipStatus {get; set;}
            /// Select users that are members of the specified account. At least one of email, account_id or organization_reserved_domain_id must be specified. 
            public Guid? accountId {get; set;}
            /// Select users that are in the specified domain. At least one of email, account_id or organization_reserved_domain_id must be specified. 
            public Guid? organizationReservedDomainId {get; set;}
            /// Select users whose data have been modified since the date specified;  account_id or organization_reserved_domain_id must be specified. 
            public string lastModifiedSince {get; set;}
        }

        /// <summary>
        /// Returns information about the users in the organization Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>OrganizationUsersResponse</returns>
        public OrganizationUsersResponse GetUsers(Guid? organizationId, UsersApi.GetUsersOptions options = null)
        {
             ApiResponse<OrganizationUsersResponse> localVarResponse = GetUsersWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the users in the organization Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of OrganizationUsersResponse</returns>
        public ApiResponse<OrganizationUsersResponse> GetUsersWithHttpInfo(Guid? organizationId, UsersApi.GetUsersOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetUsers");

            var localVarPath = "/v2/organizations/{organizationId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.start != null) localVarQueryParams.Add("start", this.ApiClient.ParameterToString(options.start)); // query parameter
                if (options.take != null) localVarQueryParams.Add("take", this.ApiClient.ParameterToString(options.take)); // query parameter
                if (options.end != null) localVarQueryParams.Add("end", this.ApiClient.ParameterToString(options.end)); // query parameter
                if (options.email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(options.email)); // query parameter
                if (options.emailUserNameLike != null) localVarQueryParams.Add("email_user_name_like", this.ApiClient.ParameterToString(options.emailUserNameLike)); // query parameter
                if (options.status != null) localVarQueryParams.Add("status", this.ApiClient.ParameterToString(options.status)); // query parameter
                if (options.membershipStatus != null) localVarQueryParams.Add("membership_status", this.ApiClient.ParameterToString(options.membershipStatus)); // query parameter
                if (options.accountId != null) localVarQueryParams.Add("account_id", this.ApiClient.ParameterToString(options.accountId)); // query parameter
                if (options.organizationReservedDomainId != null) localVarQueryParams.Add("organization_reserved_domain_id", this.ApiClient.ParameterToString(options.organizationReservedDomainId)); // query parameter
                if (options.lastModifiedSince != null) localVarQueryParams.Add("last_modified_since", this.ApiClient.ParameterToString(options.lastModifiedSince)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationUsersResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationUsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationUsersResponse)));
        }

        /// <summary>
        /// Returns information about the users in the organization Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of OrganizationUsersResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationUsersResponse> GetUsersAsync(Guid? organizationId, UsersApi.GetUsersOptions options = null)
        {
             ApiResponse<OrganizationUsersResponse> localVarResponse = await GetUsersAsyncWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about the users in the organization Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (OrganizationUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationUsersResponse>> GetUsersAsyncWithHttpInfo(Guid? organizationId, UsersApi.GetUsersOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->GetUsers");

            var localVarPath = "/v2/organizations/{organizationId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.start != null) localVarQueryParams.Add("start", this.ApiClient.ParameterToString(options.start)); // query parameter
                if (options.take != null) localVarQueryParams.Add("take", this.ApiClient.ParameterToString(options.take)); // query parameter
                if (options.end != null) localVarQueryParams.Add("end", this.ApiClient.ParameterToString(options.end)); // query parameter
                if (options.email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(options.email)); // query parameter
                if (options.emailUserNameLike != null) localVarQueryParams.Add("email_user_name_like", this.ApiClient.ParameterToString(options.emailUserNameLike)); // query parameter
                if (options.status != null) localVarQueryParams.Add("status", this.ApiClient.ParameterToString(options.status)); // query parameter
                if (options.membershipStatus != null) localVarQueryParams.Add("membership_status", this.ApiClient.ParameterToString(options.membershipStatus)); // query parameter
                if (options.accountId != null) localVarQueryParams.Add("account_id", this.ApiClient.ParameterToString(options.accountId)); // query parameter
                if (options.organizationReservedDomainId != null) localVarQueryParams.Add("organization_reserved_domain_id", this.ApiClient.ParameterToString(options.organizationReservedDomainId)); // query parameter
                if (options.lastModifiedSince != null) localVarQueryParams.Add("last_modified_since", this.ApiClient.ParameterToString(options.lastModifiedSince)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationUsersResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationUsersResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationUsersResponse)));
        }


        /// <summary>
        /// Updates a user&#39;s email address. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The details about which email addresses to update</param>
        /// <returns>UsersUpdateResponse</returns>
        public UsersUpdateResponse UpdateEmailAddress(Guid? organizationId, UpdateUsersEmailRequest request)
        {
             ApiResponse<UsersUpdateResponse> localVarResponse = UpdateEmailAddressWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a user&#39;s email address. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The details about which email addresses to update</param>
        /// <returns>ApiResponse of UsersUpdateResponse</returns>
        public ApiResponse<UsersUpdateResponse> UpdateEmailAddressWithHttpInfo(Guid? organizationId, UpdateUsersEmailRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->UpdateEmailAddress");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->UpdateEmailAddress");

            var localVarPath = "/v2/organizations/{organizationId}/users/email_addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersUpdateResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersUpdateResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersUpdateResponse)));
        }

        /// <summary>
        /// Updates a user&#39;s email address. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The details about which email addresses to update</param>
        /// <returns>Task of UsersUpdateResponse</returns>
        public async System.Threading.Tasks.Task<UsersUpdateResponse> UpdateEmailAddressAsync(Guid? organizationId, UpdateUsersEmailRequest request)
        {
             ApiResponse<UsersUpdateResponse> localVarResponse = await UpdateEmailAddressAsyncWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a user&#39;s email address. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The details about which email addresses to update</param>
        /// <returns>Task of ApiResponse (UsersUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersUpdateResponse>> UpdateEmailAddressAsyncWithHttpInfo(Guid? organizationId, UpdateUsersEmailRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->UpdateEmailAddress");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->UpdateEmailAddress");

            var localVarPath = "/v2/organizations/{organizationId}/users/email_addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersUpdateResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersUpdateResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersUpdateResponse)));
        }


        /// <summary>
        /// Updates a user. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The user details to update</param>
        /// <returns>UsersUpdateResponse</returns>
        public UsersUpdateResponse UpdateUser(Guid? organizationId, UpdateUsersRequest request)
        {
             ApiResponse<UsersUpdateResponse> localVarResponse = UpdateUserWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a user. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The user details to update</param>
        /// <returns>ApiResponse of UsersUpdateResponse</returns>
        public ApiResponse<UsersUpdateResponse> UpdateUserWithHttpInfo(Guid? organizationId, UpdateUsersRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->UpdateUser");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->UpdateUser");

            var localVarPath = "/v2/organizations/{organizationId}/users/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersUpdateResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersUpdateResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersUpdateResponse)));
        }

        /// <summary>
        /// Updates a user. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The user details to update</param>
        /// <returns>Task of UsersUpdateResponse</returns>
        public async System.Threading.Tasks.Task<UsersUpdateResponse> UpdateUserAsync(Guid? organizationId, UpdateUsersRequest request)
        {
             ApiResponse<UsersUpdateResponse> localVarResponse = await UpdateUserAsyncWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a user. Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">The user details to update</param>
        /// <returns>Task of ApiResponse (UsersUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersUpdateResponse>> UpdateUserAsyncWithHttpInfo(Guid? organizationId, UpdateUsersRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling UsersApi->UpdateUser");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling UsersApi->UpdateUser");

            var localVarPath = "/v2/organizations/{organizationId}/users/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersUpdateResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UsersUpdateResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UsersUpdateResponse)));
        }

    }
}