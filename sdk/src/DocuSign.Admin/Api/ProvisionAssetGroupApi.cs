/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Admin.Client;
using DocuSign.Admin.Model;

namespace DocuSign.Admin.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvisionAssetGroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clones an existing DocuSign account to a new DocuSign account.
        /// </summary>
        /// <remarks>
        /// Currently this only clones eSign settings and asset group information.  Required scopes: asset_group_account_clone_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="request">The request defails for the new asset group account clone.</param>
        /// <returns></returns>
        AssetGroupAccountClone CloneAssetGroupAccount(Guid? organizationId, AssetGroupAccountClone request);

        /// <summary>
        /// Clones an existing DocuSign account to a new DocuSign account.
        /// </summary>
        /// <remarks>
        /// Currently this only clones eSign settings and asset group information.  Required scopes: asset_group_account_clone_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="request">The request defails for the new asset group account clone.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<AssetGroupAccountClone> CloneAssetGroupAccountWithHttpInfo(Guid? organizationId, AssetGroupAccountClone request);
        /// <summary>
        /// Gets an asset group account clone by the asset group work id.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_clone_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="assetGroupId">The Guid representing the asset group id.</param>
        /// <param name="assetGroupWorkId">The Guid representing the asset group account clone id</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        AssetGroupAccountClone GetAssetGroupAccountClone(Guid? organizationId, Guid? assetGroupId, Guid? assetGroupWorkId, ProvisionAssetGroupApi.GetAssetGroupAccountCloneOptions options = null);

        /// <summary>
        /// Gets an asset group account clone by the asset group work id.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_clone_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="assetGroupId">The Guid representing the asset group id.</param>
        /// <param name="assetGroupWorkId">The Guid representing the asset group account clone id</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<AssetGroupAccountClone> GetAssetGroupAccountCloneWithHttpInfo(Guid? organizationId, Guid? assetGroupId, Guid? assetGroupWorkId, ProvisionAssetGroupApi.GetAssetGroupAccountCloneOptions options = null);
        /// <summary>
        /// Gets all asset group account clone(s) for an organization id.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_clone_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        AssetGroupAccountClones GetAssetGroupAccountClonesByOrgId(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountClonesByOrgIdOptions options = null);

        /// <summary>
        /// Gets all asset group account clone(s) for an organization id.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_clone_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<AssetGroupAccountClones> GetAssetGroupAccountClonesByOrgIdWithHttpInfo(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountClonesByOrgIdOptions options = null);
        /// <summary>
        /// Get all accounts in asset groups for the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        AssetGroupAccountsResponse GetAssetGroupAccounts(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountsOptions options = null);

        /// <summary>
        /// Get all accounts in asset groups for the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<AssetGroupAccountsResponse> GetAssetGroupAccountsWithHttpInfo(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountsOptions options = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clones an existing DocuSign account to a new DocuSign account.
        /// </summary>
        /// <remarks>
        /// Currently this only clones eSign settings and asset group information.  Required scopes: asset_group_account_clone_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="request">The request defails for the new asset group account clone.</param>
        /// <returns>Task of AssetGroupAccountClone</returns>
        System.Threading.Tasks.Task<AssetGroupAccountClone> CloneAssetGroupAccountAsync(Guid? organizationId, AssetGroupAccountClone request);

        /// <summary>
        /// Clones an existing DocuSign account to a new DocuSign account.
        /// </summary>
        /// <remarks>
        /// Currently this only clones eSign settings and asset group information.  Required scopes: asset_group_account_clone_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="request">The request defails for the new asset group account clone.</param>
        /// <returns>Task of ApiResponse (AssetGroupAccountClone)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetGroupAccountClone>> CloneAssetGroupAccountAsyncWithHttpInfo(Guid? organizationId, AssetGroupAccountClone request);
        /// <summary>
        /// Gets an asset group account clone by the asset group work id.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_clone_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="assetGroupId">The Guid representing the asset group id.</param>
        /// <param name="assetGroupWorkId">The Guid representing the asset group account clone id</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of AssetGroupAccountClone</returns>
        System.Threading.Tasks.Task<AssetGroupAccountClone> GetAssetGroupAccountCloneAsync(Guid? organizationId, Guid? assetGroupId, Guid? assetGroupWorkId, ProvisionAssetGroupApi.GetAssetGroupAccountCloneOptions options = null);

        /// <summary>
        /// Gets an asset group account clone by the asset group work id.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_clone_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="assetGroupId">The Guid representing the asset group id.</param>
        /// <param name="assetGroupWorkId">The Guid representing the asset group account clone id</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (AssetGroupAccountClone)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetGroupAccountClone>> GetAssetGroupAccountCloneAsyncWithHttpInfo(Guid? organizationId, Guid? assetGroupId, Guid? assetGroupWorkId, ProvisionAssetGroupApi.GetAssetGroupAccountCloneOptions options = null);
        /// <summary>
        /// Gets all asset group account clone(s) for an organization id.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_clone_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of AssetGroupAccountClones</returns>
        System.Threading.Tasks.Task<AssetGroupAccountClones> GetAssetGroupAccountClonesByOrgIdAsync(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountClonesByOrgIdOptions options = null);

        /// <summary>
        /// Gets all asset group account clone(s) for an organization id.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_clone_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (AssetGroupAccountClones)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetGroupAccountClones>> GetAssetGroupAccountClonesByOrgIdAsyncWithHttpInfo(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountClonesByOrgIdOptions options = null);
        /// <summary>
        /// Get all accounts in asset groups for the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of AssetGroupAccountsResponse</returns>
        System.Threading.Tasks.Task<AssetGroupAccountsResponse> GetAssetGroupAccountsAsync(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountsOptions options = null);

        /// <summary>
        /// Get all accounts in asset groups for the organization.
        /// </summary>
        /// <remarks>
        /// Required scopes: asset_group_account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (AssetGroupAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetGroupAccountsResponse>> GetAssetGroupAccountsAsyncWithHttpInfo(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountsOptions options = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProvisionAssetGroupApi : IProvisionAssetGroupApi
    {
        private DocuSign.Admin.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisionAssetGroupApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public ProvisionAssetGroupApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Admin.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Clones an existing DocuSign account to a new DocuSign account. Currently this only clones eSign settings and asset group information.  Required scopes: asset_group_account_clone_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="request">The request defails for the new asset group account clone.</param>
        /// <returns>AssetGroupAccountClone</returns>
        public AssetGroupAccountClone CloneAssetGroupAccount(Guid? organizationId, AssetGroupAccountClone request)
        {
             ApiResponse<AssetGroupAccountClone> localVarResponse = CloneAssetGroupAccountWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clones an existing DocuSign account to a new DocuSign account. Currently this only clones eSign settings and asset group information.  Required scopes: asset_group_account_clone_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="request">The request defails for the new asset group account clone.</param>
        /// <returns>ApiResponse of AssetGroupAccountClone</returns>
        public ApiResponse<AssetGroupAccountClone> CloneAssetGroupAccountWithHttpInfo(Guid? organizationId, AssetGroupAccountClone request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProvisionAssetGroupApi->CloneAssetGroupAccount");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ProvisionAssetGroupApi->CloneAssetGroupAccount");

            var localVarPath = "/v1/organizations/{organizationId}/assetGroups/accountClone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneAssetGroupAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetGroupAccountClone>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AssetGroupAccountClone)this.ApiClient.Deserialize(localVarResponse, typeof(AssetGroupAccountClone)));
        }

        /// <summary>
        /// Clones an existing DocuSign account to a new DocuSign account. Currently this only clones eSign settings and asset group information.  Required scopes: asset_group_account_clone_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="request">The request defails for the new asset group account clone.</param>
        /// <returns>Task of AssetGroupAccountClone</returns>
        public async System.Threading.Tasks.Task<AssetGroupAccountClone> CloneAssetGroupAccountAsync(Guid? organizationId, AssetGroupAccountClone request)
        {
             ApiResponse<AssetGroupAccountClone> localVarResponse = await CloneAssetGroupAccountAsyncWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clones an existing DocuSign account to a new DocuSign account. Currently this only clones eSign settings and asset group information.  Required scopes: asset_group_account_clone_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="request">The request defails for the new asset group account clone.</param>
        /// <returns>Task of ApiResponse (AssetGroupAccountClone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetGroupAccountClone>> CloneAssetGroupAccountAsyncWithHttpInfo(Guid? organizationId, AssetGroupAccountClone request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProvisionAssetGroupApi->CloneAssetGroupAccount");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ProvisionAssetGroupApi->CloneAssetGroupAccount");

            var localVarPath = "/v1/organizations/{organizationId}/assetGroups/accountClone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneAssetGroupAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetGroupAccountClone>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AssetGroupAccountClone)this.ApiClient.Deserialize(localVarResponse, typeof(AssetGroupAccountClone)));
        }

        /// <summary>
        /// Gets an asset group account clone by the asset group work id. Required scopes: asset_group_account_clone_read
        /// </summary>
        public class GetAssetGroupAccountCloneOptions
        {
            /// When true, include details for the asset group account clone. 
            public bool? includeDetails {get; set;}
        }

        /// <summary>
        /// Gets an asset group account clone by the asset group work id. Required scopes: asset_group_account_clone_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="assetGroupId">The Guid representing the asset group id.</param>
        /// <param name="assetGroupWorkId">The Guid representing the asset group account clone id</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>AssetGroupAccountClone</returns>
        public AssetGroupAccountClone GetAssetGroupAccountClone(Guid? organizationId, Guid? assetGroupId, Guid? assetGroupWorkId, ProvisionAssetGroupApi.GetAssetGroupAccountCloneOptions options = null)
        {
             ApiResponse<AssetGroupAccountClone> localVarResponse = GetAssetGroupAccountCloneWithHttpInfo(organizationId, assetGroupId, assetGroupWorkId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an asset group account clone by the asset group work id. Required scopes: asset_group_account_clone_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="assetGroupId">The Guid representing the asset group id.</param>
        /// <param name="assetGroupWorkId">The Guid representing the asset group account clone id</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of AssetGroupAccountClone</returns>
        public ApiResponse<AssetGroupAccountClone> GetAssetGroupAccountCloneWithHttpInfo(Guid? organizationId, Guid? assetGroupId, Guid? assetGroupWorkId, ProvisionAssetGroupApi.GetAssetGroupAccountCloneOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProvisionAssetGroupApi->GetAssetGroupAccountClone");
            // verify the required parameter 'assetGroupId' is set
            if (assetGroupId == null)
                throw new ApiException(400, "Missing required parameter 'assetGroupId' when calling ProvisionAssetGroupApi->GetAssetGroupAccountClone");
            // verify the required parameter 'assetGroupWorkId' is set
            if (assetGroupWorkId == null)
                throw new ApiException(400, "Missing required parameter 'assetGroupWorkId' when calling ProvisionAssetGroupApi->GetAssetGroupAccountClone");

            var localVarPath = "/v1/organizations/{organizationId}/assetGroups/{assetGroupId}/accountClones/{assetGroupWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (assetGroupId != null) localVarPathParams.Add("assetGroupId", this.ApiClient.ParameterToString(assetGroupId)); // path parameter
            if (assetGroupWorkId != null) localVarPathParams.Add("assetGroupWorkId", this.ApiClient.ParameterToString(assetGroupWorkId)); // path parameter
            if (options != null)
            {
                if (options.includeDetails != null) localVarQueryParams.Add("include_details", this.ApiClient.ParameterToString(options.includeDetails)); // query parameter
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetGroupAccountClone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetGroupAccountClone>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AssetGroupAccountClone)this.ApiClient.Deserialize(localVarResponse, typeof(AssetGroupAccountClone)));
        }

        /// <summary>
        /// Gets an asset group account clone by the asset group work id. Required scopes: asset_group_account_clone_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="assetGroupId">The Guid representing the asset group id.</param>
        /// <param name="assetGroupWorkId">The Guid representing the asset group account clone id</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of AssetGroupAccountClone</returns>
        public async System.Threading.Tasks.Task<AssetGroupAccountClone> GetAssetGroupAccountCloneAsync(Guid? organizationId, Guid? assetGroupId, Guid? assetGroupWorkId, ProvisionAssetGroupApi.GetAssetGroupAccountCloneOptions options = null)
        {
             ApiResponse<AssetGroupAccountClone> localVarResponse = await GetAssetGroupAccountCloneAsyncWithHttpInfo(organizationId, assetGroupId, assetGroupWorkId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an asset group account clone by the asset group work id. Required scopes: asset_group_account_clone_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="assetGroupId">The Guid representing the asset group id.</param>
        /// <param name="assetGroupWorkId">The Guid representing the asset group account clone id</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (AssetGroupAccountClone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetGroupAccountClone>> GetAssetGroupAccountCloneAsyncWithHttpInfo(Guid? organizationId, Guid? assetGroupId, Guid? assetGroupWorkId, ProvisionAssetGroupApi.GetAssetGroupAccountCloneOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProvisionAssetGroupApi->GetAssetGroupAccountClone");
            // verify the required parameter 'assetGroupId' is set
            if (assetGroupId == null)
                throw new ApiException(400, "Missing required parameter 'assetGroupId' when calling ProvisionAssetGroupApi->GetAssetGroupAccountClone");
            // verify the required parameter 'assetGroupWorkId' is set
            if (assetGroupWorkId == null)
                throw new ApiException(400, "Missing required parameter 'assetGroupWorkId' when calling ProvisionAssetGroupApi->GetAssetGroupAccountClone");

            var localVarPath = "/v1/organizations/{organizationId}/assetGroups/{assetGroupId}/accountClones/{assetGroupWorkId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (assetGroupId != null) localVarPathParams.Add("assetGroupId", this.ApiClient.ParameterToString(assetGroupId)); // path parameter
            if (assetGroupWorkId != null) localVarPathParams.Add("assetGroupWorkId", this.ApiClient.ParameterToString(assetGroupWorkId)); // path parameter
            if (options != null)
            {
                if (options.includeDetails != null) localVarQueryParams.Add("include_details", this.ApiClient.ParameterToString(options.includeDetails)); // query parameter
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetGroupAccountClone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetGroupAccountClone>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AssetGroupAccountClone)this.ApiClient.Deserialize(localVarResponse, typeof(AssetGroupAccountClone)));
        }

        /// <summary>
        /// Gets all asset group account clone(s) for an organization id. Required scopes: asset_group_account_clone_read
        /// </summary>
        public class GetAssetGroupAccountClonesByOrgIdOptions
        {
            /// When provided and is in the past, only return asset group account clone(s) that is updated after the date. 
            public DateTime? sinceUpdatedDate {get; set;}
            /// When true, include details for the asset group account clone(s). 
            public bool? includeDetails {get; set;}
        }

        /// <summary>
        /// Gets all asset group account clone(s) for an organization id. Required scopes: asset_group_account_clone_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>AssetGroupAccountClones</returns>
        public AssetGroupAccountClones GetAssetGroupAccountClonesByOrgId(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountClonesByOrgIdOptions options = null)
        {
             ApiResponse<AssetGroupAccountClones> localVarResponse = GetAssetGroupAccountClonesByOrgIdWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all asset group account clone(s) for an organization id. Required scopes: asset_group_account_clone_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of AssetGroupAccountClones</returns>
        public ApiResponse<AssetGroupAccountClones> GetAssetGroupAccountClonesByOrgIdWithHttpInfo(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountClonesByOrgIdOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProvisionAssetGroupApi->GetAssetGroupAccountClonesByOrgId");

            var localVarPath = "/v1/organizations/{organizationId}/assetGroups/accountClones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.sinceUpdatedDate != null) localVarQueryParams.Add("since_updated_date", this.ApiClient.ParameterToString(options.sinceUpdatedDate)); // query parameter
                if (options.includeDetails != null) localVarQueryParams.Add("include_details", this.ApiClient.ParameterToString(options.includeDetails)); // query parameter
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetGroupAccountClonesByOrgId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetGroupAccountClones>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AssetGroupAccountClones)this.ApiClient.Deserialize(localVarResponse, typeof(AssetGroupAccountClones)));
        }

        /// <summary>
        /// Gets all asset group account clone(s) for an organization id. Required scopes: asset_group_account_clone_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of AssetGroupAccountClones</returns>
        public async System.Threading.Tasks.Task<AssetGroupAccountClones> GetAssetGroupAccountClonesByOrgIdAsync(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountClonesByOrgIdOptions options = null)
        {
             ApiResponse<AssetGroupAccountClones> localVarResponse = await GetAssetGroupAccountClonesByOrgIdAsyncWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all asset group account clone(s) for an organization id. Required scopes: asset_group_account_clone_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (AssetGroupAccountClones)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetGroupAccountClones>> GetAssetGroupAccountClonesByOrgIdAsyncWithHttpInfo(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountClonesByOrgIdOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProvisionAssetGroupApi->GetAssetGroupAccountClonesByOrgId");

            var localVarPath = "/v1/organizations/{organizationId}/assetGroups/accountClones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.sinceUpdatedDate != null) localVarQueryParams.Add("since_updated_date", this.ApiClient.ParameterToString(options.sinceUpdatedDate)); // query parameter
                if (options.includeDetails != null) localVarQueryParams.Add("include_details", this.ApiClient.ParameterToString(options.includeDetails)); // query parameter
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetGroupAccountClonesByOrgId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetGroupAccountClones>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AssetGroupAccountClones)this.ApiClient.Deserialize(localVarResponse, typeof(AssetGroupAccountClones)));
        }

        /// <summary>
        /// Get all accounts in asset groups for the organization. Required scopes: asset_group_account_read
        /// </summary>
        public class GetAssetGroupAccountsOptions
        {
            /// Whether to return accounts that are compliant. When provided, account responses will not include compliant field. 
            public bool? compliant {get; set;}
        }

        /// <summary>
        /// Get all accounts in asset groups for the organization. Required scopes: asset_group_account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>AssetGroupAccountsResponse</returns>
        public AssetGroupAccountsResponse GetAssetGroupAccounts(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountsOptions options = null)
        {
             ApiResponse<AssetGroupAccountsResponse> localVarResponse = GetAssetGroupAccountsWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all accounts in asset groups for the organization. Required scopes: asset_group_account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of AssetGroupAccountsResponse</returns>
        public ApiResponse<AssetGroupAccountsResponse> GetAssetGroupAccountsWithHttpInfo(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountsOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProvisionAssetGroupApi->GetAssetGroupAccounts");

            var localVarPath = "/v1/organizations/{organizationId}/assetGroups/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.compliant != null) localVarQueryParams.Add("compliant", this.ApiClient.ParameterToString(options.compliant)); // query parameter
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetGroupAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetGroupAccountsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AssetGroupAccountsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(AssetGroupAccountsResponse)));
        }

        /// <summary>
        /// Get all accounts in asset groups for the organization. Required scopes: asset_group_account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of AssetGroupAccountsResponse</returns>
        public async System.Threading.Tasks.Task<AssetGroupAccountsResponse> GetAssetGroupAccountsAsync(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountsOptions options = null)
        {
             ApiResponse<AssetGroupAccountsResponse> localVarResponse = await GetAssetGroupAccountsAsyncWithHttpInfo(organizationId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all accounts in asset groups for the organization. Required scopes: asset_group_account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The Guid representing the organization id.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (AssetGroupAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetGroupAccountsResponse>> GetAssetGroupAccountsAsyncWithHttpInfo(Guid? organizationId, ProvisionAssetGroupApi.GetAssetGroupAccountsOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProvisionAssetGroupApi->GetAssetGroupAccounts");

            var localVarPath = "/v1/organizations/{organizationId}/assetGroups/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (options != null)
            {
                if (options.compliant != null) localVarQueryParams.Add("compliant", this.ApiClient.ParameterToString(options.compliant)); // query parameter
            }



            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetGroupAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetGroupAccountsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (AssetGroupAccountsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(AssetGroupAccountsResponse)));
        }

    }
}