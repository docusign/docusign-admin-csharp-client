/* 
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Admin.Client;
using DocuSign.Admin.Model;

namespace DocuSign.Admin.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBulkExportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a  new Account Setting Export request.
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about the accounts be compared</param>
        /// <returns></returns>
        OrganizationExportResponse CreateAccountSettingsExport(Guid? organizationId, OrganizationAccountsRequest request);

        /// <summary>
        /// Creates a  new Account Setting Export request.
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about the accounts be compared</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationExportResponse> CreateAccountSettingsExportWithHttpInfo(Guid? organizationId, OrganizationAccountsRequest request);
        /// <summary>
        /// Creates a new User List Export request.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about what is to be exported</param>
        /// <returns></returns>
        OrganizationExportResponse CreateUserListExport(Guid? organizationId, OrganizationExportRequest request);

        /// <summary>
        /// Creates a new User List Export request.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about what is to be exported</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationExportResponse> CreateUserListExportWithHttpInfo(Guid? organizationId, OrganizationExportRequest request);
        /// <summary>
        /// Deletes a single Account Settings Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns></returns>
        Object DeleteAccountSettingsExport(Guid? organizationId, Guid? exportId);

        /// <summary>
        /// Deletes a single Account Settings Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Object> DeleteAccountSettingsExportWithHttpInfo(Guid? organizationId, Guid? exportId);
        /// <summary>
        /// Deletes a single User List Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns></returns>
        Object DeleteUserListExport(Guid? organizationId, Guid? exportId);

        /// <summary>
        /// Deletes a single User List Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Object> DeleteUserListExportWithHttpInfo(Guid? organizationId, Guid? exportId);
        /// <summary>
        /// Returns the details/metadata for a single Account Setting Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns></returns>
        OrganizationExportResponse GetAccountSettingsExport(Guid? organizationId, Guid? exportId);

        /// <summary>
        /// Returns the details/metadata for a single Account Setting Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationExportResponse> GetAccountSettingsExportWithHttpInfo(Guid? organizationId, Guid? exportId);
        /// <summary>
        /// Returns the details/metadata for Account Setting Export requests
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns></returns>
        OrganizationExportsResponse GetAccountSettingsExports(Guid? organizationId);

        /// <summary>
        /// Returns the details/metadata for Account Setting Export requests
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationExportsResponse> GetAccountSettingsExportsWithHttpInfo(Guid? organizationId);
        /// <summary>
        /// Returns the details/metadata for a single User List Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns></returns>
        OrganizationExportResponse GetUserListExport(Guid? organizationId, Guid? exportId);

        /// <summary>
        /// Returns the details/metadata for a single User List Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationExportResponse> GetUserListExportWithHttpInfo(Guid? organizationId, Guid? exportId);
        /// <summary>
        /// Returns a list of existing User List Exports (requests and completed exports) and their details/metadata
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns></returns>
        OrganizationExportsResponse GetUserListExports(Guid? organizationId);

        /// <summary>
        /// Returns a list of existing User List Exports (requests and completed exports) and their details/metadata
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<OrganizationExportsResponse> GetUserListExportsWithHttpInfo(Guid? organizationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a  new Account Setting Export request.
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about the accounts be compared</param>
        /// <returns>Task of OrganizationExportResponse</returns>
        System.Threading.Tasks.Task<OrganizationExportResponse> CreateAccountSettingsExportAsync(Guid? organizationId, OrganizationAccountsRequest request);

        /// <summary>
        /// Creates a  new Account Setting Export request.
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about the accounts be compared</param>
        /// <returns>Task of ApiResponse (OrganizationExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationExportResponse>> CreateAccountSettingsExportAsyncWithHttpInfo(Guid? organizationId, OrganizationAccountsRequest request);
        /// <summary>
        /// Creates a new User List Export request.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about what is to be exported</param>
        /// <returns>Task of OrganizationExportResponse</returns>
        System.Threading.Tasks.Task<OrganizationExportResponse> CreateUserListExportAsync(Guid? organizationId, OrganizationExportRequest request);

        /// <summary>
        /// Creates a new User List Export request.
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about what is to be exported</param>
        /// <returns>Task of ApiResponse (OrganizationExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationExportResponse>> CreateUserListExportAsyncWithHttpInfo(Guid? organizationId, OrganizationExportRequest request);
        /// <summary>
        /// Deletes a single Account Settings Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAccountSettingsExportAsync(Guid? organizationId, Guid? exportId);

        /// <summary>
        /// Deletes a single Account Settings Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountSettingsExportAsyncWithHttpInfo(Guid? organizationId, Guid? exportId);
        /// <summary>
        /// Deletes a single User List Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteUserListExportAsync(Guid? organizationId, Guid? exportId);

        /// <summary>
        /// Deletes a single User List Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserListExportAsyncWithHttpInfo(Guid? organizationId, Guid? exportId);
        /// <summary>
        /// Returns the details/metadata for a single Account Setting Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of OrganizationExportResponse</returns>
        System.Threading.Tasks.Task<OrganizationExportResponse> GetAccountSettingsExportAsync(Guid? organizationId, Guid? exportId);

        /// <summary>
        /// Returns the details/metadata for a single Account Setting Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of ApiResponse (OrganizationExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationExportResponse>> GetAccountSettingsExportAsyncWithHttpInfo(Guid? organizationId, Guid? exportId);
        /// <summary>
        /// Returns the details/metadata for Account Setting Export requests
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationExportsResponse</returns>
        System.Threading.Tasks.Task<OrganizationExportsResponse> GetAccountSettingsExportsAsync(Guid? organizationId);

        /// <summary>
        /// Returns the details/metadata for Account Setting Export requests
        /// </summary>
        /// <remarks>
        /// Required scopes: account_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationExportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationExportsResponse>> GetAccountSettingsExportsAsyncWithHttpInfo(Guid? organizationId);
        /// <summary>
        /// Returns the details/metadata for a single User List Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of OrganizationExportResponse</returns>
        System.Threading.Tasks.Task<OrganizationExportResponse> GetUserListExportAsync(Guid? organizationId, Guid? exportId);

        /// <summary>
        /// Returns the details/metadata for a single User List Export request
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of ApiResponse (OrganizationExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationExportResponse>> GetUserListExportAsyncWithHttpInfo(Guid? organizationId, Guid? exportId);
        /// <summary>
        /// Returns a list of existing User List Exports (requests and completed exports) and their details/metadata
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationExportsResponse</returns>
        System.Threading.Tasks.Task<OrganizationExportsResponse> GetUserListExportsAsync(Guid? organizationId);

        /// <summary>
        /// Returns a list of existing User List Exports (requests and completed exports) and their details/metadata
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationExportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationExportsResponse>> GetUserListExportsAsyncWithHttpInfo(Guid? organizationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BulkExportsApi : IBulkExportsApi
    {
        private DocuSign.Admin.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkExportsApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public BulkExportsApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Admin.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Creates a  new Account Setting Export request. Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about the accounts be compared</param>
        /// <returns>OrganizationExportResponse</returns>
        public OrganizationExportResponse CreateAccountSettingsExport(Guid? organizationId, OrganizationAccountsRequest request)
        {
             ApiResponse<OrganizationExportResponse> localVarResponse = CreateAccountSettingsExportWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a  new Account Setting Export request. Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about the accounts be compared</param>
        /// <returns>ApiResponse of OrganizationExportResponse</returns>
        public ApiResponse<OrganizationExportResponse> CreateAccountSettingsExportWithHttpInfo(Guid? organizationId, OrganizationAccountsRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->CreateAccountSettingsExport");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BulkExportsApi->CreateAccountSettingsExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/account_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountSettingsExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportResponse)));
        }

        /// <summary>
        /// Creates a  new Account Setting Export request. Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about the accounts be compared</param>
        /// <returns>Task of OrganizationExportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationExportResponse> CreateAccountSettingsExportAsync(Guid? organizationId, OrganizationAccountsRequest request)
        {
             ApiResponse<OrganizationExportResponse> localVarResponse = await CreateAccountSettingsExportAsyncWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a  new Account Setting Export request. Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about the accounts be compared</param>
        /// <returns>Task of ApiResponse (OrganizationExportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationExportResponse>> CreateAccountSettingsExportAsyncWithHttpInfo(Guid? organizationId, OrganizationAccountsRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->CreateAccountSettingsExport");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BulkExportsApi->CreateAccountSettingsExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/account_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountSettingsExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportResponse)));
        }


        /// <summary>
        /// Creates a new User List Export request. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about what is to be exported</param>
        /// <returns>OrganizationExportResponse</returns>
        public OrganizationExportResponse CreateUserListExport(Guid? organizationId, OrganizationExportRequest request)
        {
             ApiResponse<OrganizationExportResponse> localVarResponse = CreateUserListExportWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new User List Export request. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about what is to be exported</param>
        /// <returns>ApiResponse of OrganizationExportResponse</returns>
        public ApiResponse<OrganizationExportResponse> CreateUserListExportWithHttpInfo(Guid? organizationId, OrganizationExportRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->CreateUserListExport");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BulkExportsApi->CreateUserListExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/user_list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserListExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportResponse)));
        }

        /// <summary>
        /// Creates a new User List Export request. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about what is to be exported</param>
        /// <returns>Task of OrganizationExportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationExportResponse> CreateUserListExportAsync(Guid? organizationId, OrganizationExportRequest request)
        {
             ApiResponse<OrganizationExportResponse> localVarResponse = await CreateUserListExportAsyncWithHttpInfo(organizationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new User List Export request. Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="request">Request body containing details about what is to be exported</param>
        /// <returns>Task of ApiResponse (OrganizationExportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationExportResponse>> CreateUserListExportAsyncWithHttpInfo(Guid? organizationId, OrganizationExportRequest request)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->CreateUserListExport");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BulkExportsApi->CreateUserListExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/user_list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserListExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportResponse)));
        }


        /// <summary>
        /// Deletes a single Account Settings Export request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Object</returns>
        public Object DeleteAccountSettingsExport(Guid? organizationId, Guid? exportId)
        {
             ApiResponse<Object> localVarResponse = DeleteAccountSettingsExportWithHttpInfo(organizationId, exportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a single Account Settings Export request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteAccountSettingsExportWithHttpInfo(Guid? organizationId, Guid? exportId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->DeleteAccountSettingsExport");
            // verify the required parameter 'exportId' is set
            if (exportId == null)
                throw new ApiException(400, "Missing required parameter 'exportId' when calling BulkExportsApi->DeleteAccountSettingsExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/account_settings/{exportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (exportId != null) localVarPathParams.Add("exportId", this.ApiClient.ParameterToString(exportId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountSettingsExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Deletes a single Account Settings Export request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAccountSettingsExportAsync(Guid? organizationId, Guid? exportId)
        {
             ApiResponse<Object> localVarResponse = await DeleteAccountSettingsExportAsyncWithHttpInfo(organizationId, exportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a single Account Settings Export request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountSettingsExportAsyncWithHttpInfo(Guid? organizationId, Guid? exportId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->DeleteAccountSettingsExport");
            // verify the required parameter 'exportId' is set
            if (exportId == null)
                throw new ApiException(400, "Missing required parameter 'exportId' when calling BulkExportsApi->DeleteAccountSettingsExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/account_settings/{exportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (exportId != null) localVarPathParams.Add("exportId", this.ApiClient.ParameterToString(exportId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountSettingsExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }


        /// <summary>
        /// Deletes a single User List Export request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Object</returns>
        public Object DeleteUserListExport(Guid? organizationId, Guid? exportId)
        {
             ApiResponse<Object> localVarResponse = DeleteUserListExportWithHttpInfo(organizationId, exportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a single User List Export request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteUserListExportWithHttpInfo(Guid? organizationId, Guid? exportId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->DeleteUserListExport");
            // verify the required parameter 'exportId' is set
            if (exportId == null)
                throw new ApiException(400, "Missing required parameter 'exportId' when calling BulkExportsApi->DeleteUserListExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/user_list/{exportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (exportId != null) localVarPathParams.Add("exportId", this.ApiClient.ParameterToString(exportId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserListExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Deletes a single User List Export request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteUserListExportAsync(Guid? organizationId, Guid? exportId)
        {
             ApiResponse<Object> localVarResponse = await DeleteUserListExportAsyncWithHttpInfo(organizationId, exportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a single User List Export request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserListExportAsyncWithHttpInfo(Guid? organizationId, Guid? exportId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->DeleteUserListExport");
            // verify the required parameter 'exportId' is set
            if (exportId == null)
                throw new ApiException(400, "Missing required parameter 'exportId' when calling BulkExportsApi->DeleteUserListExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/user_list/{exportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (exportId != null) localVarPathParams.Add("exportId", this.ApiClient.ParameterToString(exportId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserListExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Object)this.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }


        /// <summary>
        /// Returns the details/metadata for a single Account Setting Export request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>OrganizationExportResponse</returns>
        public OrganizationExportResponse GetAccountSettingsExport(Guid? organizationId, Guid? exportId)
        {
             ApiResponse<OrganizationExportResponse> localVarResponse = GetAccountSettingsExportWithHttpInfo(organizationId, exportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for a single Account Setting Export request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>ApiResponse of OrganizationExportResponse</returns>
        public ApiResponse<OrganizationExportResponse> GetAccountSettingsExportWithHttpInfo(Guid? organizationId, Guid? exportId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->GetAccountSettingsExport");
            // verify the required parameter 'exportId' is set
            if (exportId == null)
                throw new ApiException(400, "Missing required parameter 'exportId' when calling BulkExportsApi->GetAccountSettingsExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/account_settings/{exportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (exportId != null) localVarPathParams.Add("exportId", this.ApiClient.ParameterToString(exportId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountSettingsExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportResponse)));
        }

        /// <summary>
        /// Returns the details/metadata for a single Account Setting Export request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of OrganizationExportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationExportResponse> GetAccountSettingsExportAsync(Guid? organizationId, Guid? exportId)
        {
             ApiResponse<OrganizationExportResponse> localVarResponse = await GetAccountSettingsExportAsyncWithHttpInfo(organizationId, exportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for a single Account Setting Export request Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of ApiResponse (OrganizationExportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationExportResponse>> GetAccountSettingsExportAsyncWithHttpInfo(Guid? organizationId, Guid? exportId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->GetAccountSettingsExport");
            // verify the required parameter 'exportId' is set
            if (exportId == null)
                throw new ApiException(400, "Missing required parameter 'exportId' when calling BulkExportsApi->GetAccountSettingsExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/account_settings/{exportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (exportId != null) localVarPathParams.Add("exportId", this.ApiClient.ParameterToString(exportId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountSettingsExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportResponse)));
        }


        /// <summary>
        /// Returns the details/metadata for Account Setting Export requests Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>OrganizationExportsResponse</returns>
        public OrganizationExportsResponse GetAccountSettingsExports(Guid? organizationId)
        {
             ApiResponse<OrganizationExportsResponse> localVarResponse = GetAccountSettingsExportsWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for Account Setting Export requests Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of OrganizationExportsResponse</returns>
        public ApiResponse<OrganizationExportsResponse> GetAccountSettingsExportsWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->GetAccountSettingsExports");

            var localVarPath = "/v2/organizations/{organizationId}/exports/account_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountSettingsExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportsResponse)));
        }

        /// <summary>
        /// Returns the details/metadata for Account Setting Export requests Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationExportsResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationExportsResponse> GetAccountSettingsExportsAsync(Guid? organizationId)
        {
             ApiResponse<OrganizationExportsResponse> localVarResponse = await GetAccountSettingsExportsAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for Account Setting Export requests Required scopes: account_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationExportsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationExportsResponse>> GetAccountSettingsExportsAsyncWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->GetAccountSettingsExports");

            var localVarPath = "/v2/organizations/{organizationId}/exports/account_settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountSettingsExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportsResponse)));
        }


        /// <summary>
        /// Returns the details/metadata for a single User List Export request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>OrganizationExportResponse</returns>
        public OrganizationExportResponse GetUserListExport(Guid? organizationId, Guid? exportId)
        {
             ApiResponse<OrganizationExportResponse> localVarResponse = GetUserListExportWithHttpInfo(organizationId, exportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for a single User List Export request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>ApiResponse of OrganizationExportResponse</returns>
        public ApiResponse<OrganizationExportResponse> GetUserListExportWithHttpInfo(Guid? organizationId, Guid? exportId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->GetUserListExport");
            // verify the required parameter 'exportId' is set
            if (exportId == null)
                throw new ApiException(400, "Missing required parameter 'exportId' when calling BulkExportsApi->GetUserListExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/user_list/{exportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (exportId != null) localVarPathParams.Add("exportId", this.ApiClient.ParameterToString(exportId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserListExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportResponse)));
        }

        /// <summary>
        /// Returns the details/metadata for a single User List Export request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of OrganizationExportResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationExportResponse> GetUserListExportAsync(Guid? organizationId, Guid? exportId)
        {
             ApiResponse<OrganizationExportResponse> localVarResponse = await GetUserListExportAsyncWithHttpInfo(organizationId, exportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details/metadata for a single User List Export request Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <param name="exportId">The export ID Guid for the request</param>
        /// <returns>Task of ApiResponse (OrganizationExportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationExportResponse>> GetUserListExportAsyncWithHttpInfo(Guid? organizationId, Guid? exportId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->GetUserListExport");
            // verify the required parameter 'exportId' is set
            if (exportId == null)
                throw new ApiException(400, "Missing required parameter 'exportId' when calling BulkExportsApi->GetUserListExport");

            var localVarPath = "/v2/organizations/{organizationId}/exports/user_list/{exportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (exportId != null) localVarPathParams.Add("exportId", this.ApiClient.ParameterToString(exportId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserListExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportResponse)));
        }


        /// <summary>
        /// Returns a list of existing User List Exports (requests and completed exports) and their details/metadata Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>OrganizationExportsResponse</returns>
        public OrganizationExportsResponse GetUserListExports(Guid? organizationId)
        {
             ApiResponse<OrganizationExportsResponse> localVarResponse = GetUserListExportsWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of existing User List Exports (requests and completed exports) and their details/metadata Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>ApiResponse of OrganizationExportsResponse</returns>
        public ApiResponse<OrganizationExportsResponse> GetUserListExportsWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->GetUserListExports");

            var localVarPath = "/v2/organizations/{organizationId}/exports/user_list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserListExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportsResponse)));
        }

        /// <summary>
        /// Returns a list of existing User List Exports (requests and completed exports) and their details/metadata Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of OrganizationExportsResponse</returns>
        public async System.Threading.Tasks.Task<OrganizationExportsResponse> GetUserListExportsAsync(Guid? organizationId)
        {
             ApiResponse<OrganizationExportsResponse> localVarResponse = await GetUserListExportsAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of existing User List Exports (requests and completed exports) and their details/metadata Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID Guid</param>
        /// <returns>Task of ApiResponse (OrganizationExportsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationExportsResponse>> GetUserListExportsAsyncWithHttpInfo(Guid? organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling BulkExportsApi->GetUserListExports");

            var localVarPath = "/v2/organizations/{organizationId}/exports/user_list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserListExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationExportsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (OrganizationExportsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(OrganizationExportsResponse)));
        }

    }
}