/* 
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Admin.Client;
using DocuSign.Admin.Model;

namespace DocuSign.Admin.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductPermissionProfilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign user to permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <param name="productPermissionProfilesRequest">Request object</param>
        /// <returns></returns>
        UserProductPermissionProfilesResponse AddUserProductPermissionProfiles(Guid? organizationId, Guid? accountId, Guid? userId, ProductPermissionProfilesRequest productPermissionProfilesRequest);

        /// <summary>
        /// Assign user to permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <param name="productPermissionProfilesRequest">Request object</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UserProductPermissionProfilesResponse> AddUserProductPermissionProfilesWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? userId, ProductPermissionProfilesRequest productPermissionProfilesRequest);
        /// <summary>
        /// Assign user to permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns></returns>
        UserProductPermissionProfilesResponse AddUserProductPermissionProfilesByEmail(Guid? organizationId, Guid? accountId, UserProductPermissionProfilesRequest userProductPermissionProfilesRequest);

        /// <summary>
        /// Assign user to permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UserProductPermissionProfilesResponse> AddUserProductPermissionProfilesByEmailWithHttpInfo(Guid? organizationId, Guid? accountId, UserProductPermissionProfilesRequest userProductPermissionProfilesRequest);
        /// <summary>
        /// Get products associated with the account and the available permission profiles
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <returns></returns>
        ProductPermissionProfilesResponse GetProductPermissionProfiles(Guid? organizationId, Guid? accountId);

        /// <summary>
        /// Get products associated with the account and the available permission profiles
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ProductPermissionProfilesResponse> GetProductPermissionProfilesWithHttpInfo(Guid? organizationId, Guid? accountId);
        /// <summary>
        /// Retrieve list of user&#39;s permission profiles for each account&#39;s product
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <returns></returns>
        ProductPermissionProfilesResponse GetUserProductPermissionProfiles(Guid? organizationId, Guid? accountId, Guid? userId);

        /// <summary>
        /// Retrieve list of user&#39;s permission profiles for each account&#39;s product
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<ProductPermissionProfilesResponse> GetUserProductPermissionProfilesWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? userId);
        /// <summary>
        /// Remove user from permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        UserProductPermissionProfilesResponse GetUserProductPermissionProfilesByEmail(Guid? organizationId, Guid? accountId, ProductPermissionProfilesApi.GetUserProductPermissionProfilesByEmailOptions options = null);

        /// <summary>
        /// Remove user from permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<UserProductPermissionProfilesResponse> GetUserProductPermissionProfilesByEmailWithHttpInfo(Guid? organizationId, Guid? accountId, ProductPermissionProfilesApi.GetUserProductPermissionProfilesByEmailOptions options = null);
        /// <summary>
        /// Remove user from permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns></returns>
        RemoveUserProductsResponse RemoveUserProductPermission(Guid? organizationId, Guid? accountId, UserProductProfileDeleteRequest userProductPermissionProfilesRequest);

        /// <summary>
        /// Remove user from permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<RemoveUserProductsResponse> RemoveUserProductPermissionWithHttpInfo(Guid? organizationId, Guid? accountId, UserProductProfileDeleteRequest userProductPermissionProfilesRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign user to permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <param name="productPermissionProfilesRequest">Request object</param>
        /// <returns>Task of UserProductPermissionProfilesResponse</returns>
        System.Threading.Tasks.Task<UserProductPermissionProfilesResponse> AddUserProductPermissionProfilesAsync(Guid? organizationId, Guid? accountId, Guid? userId, ProductPermissionProfilesRequest productPermissionProfilesRequest);

        /// <summary>
        /// Assign user to permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <param name="productPermissionProfilesRequest">Request object</param>
        /// <returns>Task of ApiResponse (UserProductPermissionProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProductPermissionProfilesResponse>> AddUserProductPermissionProfilesAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? userId, ProductPermissionProfilesRequest productPermissionProfilesRequest);
        /// <summary>
        /// Assign user to permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>Task of UserProductPermissionProfilesResponse</returns>
        System.Threading.Tasks.Task<UserProductPermissionProfilesResponse> AddUserProductPermissionProfilesByEmailAsync(Guid? organizationId, Guid? accountId, UserProductPermissionProfilesRequest userProductPermissionProfilesRequest);

        /// <summary>
        /// Assign user to permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>Task of ApiResponse (UserProductPermissionProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProductPermissionProfilesResponse>> AddUserProductPermissionProfilesByEmailAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, UserProductPermissionProfilesRequest userProductPermissionProfilesRequest);
        /// <summary>
        /// Get products associated with the account and the available permission profiles
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <returns>Task of ProductPermissionProfilesResponse</returns>
        System.Threading.Tasks.Task<ProductPermissionProfilesResponse> GetProductPermissionProfilesAsync(Guid? organizationId, Guid? accountId);

        /// <summary>
        /// Get products associated with the account and the available permission profiles
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <returns>Task of ApiResponse (ProductPermissionProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPermissionProfilesResponse>> GetProductPermissionProfilesAsyncWithHttpInfo(Guid? organizationId, Guid? accountId);
        /// <summary>
        /// Retrieve list of user&#39;s permission profiles for each account&#39;s product
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <returns>Task of ProductPermissionProfilesResponse</returns>
        System.Threading.Tasks.Task<ProductPermissionProfilesResponse> GetUserProductPermissionProfilesAsync(Guid? organizationId, Guid? accountId, Guid? userId);

        /// <summary>
        /// Retrieve list of user&#39;s permission profiles for each account&#39;s product
        /// </summary>
        /// <remarks>
        /// Required scopes: user_read
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <returns>Task of ApiResponse (ProductPermissionProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPermissionProfilesResponse>> GetUserProductPermissionProfilesAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? userId);
        /// <summary>
        /// Remove user from permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UserProductPermissionProfilesResponse</returns>
        System.Threading.Tasks.Task<UserProductPermissionProfilesResponse> GetUserProductPermissionProfilesByEmailAsync(Guid? organizationId, Guid? accountId, ProductPermissionProfilesApi.GetUserProductPermissionProfilesByEmailOptions options = null);

        /// <summary>
        /// Remove user from permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UserProductPermissionProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProductPermissionProfilesResponse>> GetUserProductPermissionProfilesByEmailAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, ProductPermissionProfilesApi.GetUserProductPermissionProfilesByEmailOptions options = null);
        /// <summary>
        /// Remove user from permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>Task of RemoveUserProductsResponse</returns>
        System.Threading.Tasks.Task<RemoveUserProductsResponse> RemoveUserProductPermissionAsync(Guid? organizationId, Guid? accountId, UserProductProfileDeleteRequest userProductPermissionProfilesRequest);

        /// <summary>
        /// Remove user from permission profiles for one or more products
        /// </summary>
        /// <remarks>
        /// Required scopes: user_write
        /// </remarks>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>Task of ApiResponse (RemoveUserProductsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveUserProductsResponse>> RemoveUserProductPermissionAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, UserProductProfileDeleteRequest userProductPermissionProfilesRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductPermissionProfilesApi : IProductPermissionProfilesApi
    {
        private DocuSign.Admin.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPermissionProfilesApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public ProductPermissionProfilesApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Admin.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Assign user to permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <param name="productPermissionProfilesRequest">Request object</param>
        /// <returns>UserProductPermissionProfilesResponse</returns>
        public UserProductPermissionProfilesResponse AddUserProductPermissionProfiles(Guid? organizationId, Guid? accountId, Guid? userId, ProductPermissionProfilesRequest productPermissionProfilesRequest)
        {
             ApiResponse<UserProductPermissionProfilesResponse> localVarResponse = AddUserProductPermissionProfilesWithHttpInfo(organizationId, accountId, userId, productPermissionProfilesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign user to permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <param name="productPermissionProfilesRequest">Request object</param>
        /// <returns>ApiResponse of UserProductPermissionProfilesResponse</returns>
        public ApiResponse<UserProductPermissionProfilesResponse> AddUserProductPermissionProfilesWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? userId, ProductPermissionProfilesRequest productPermissionProfilesRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfiles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfiles");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfiles");
            // verify the required parameter 'productPermissionProfilesRequest' is set
            if (productPermissionProfilesRequest == null)
                throw new ApiException(400, "Missing required parameter 'productPermissionProfilesRequest' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfiles");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users/{userId}/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (productPermissionProfilesRequest != null && productPermissionProfilesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(productPermissionProfilesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = productPermissionProfilesRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUserProductPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UserProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UserProductPermissionProfilesResponse)));
        }

        /// <summary>
        /// Assign user to permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <param name="productPermissionProfilesRequest">Request object</param>
        /// <returns>Task of UserProductPermissionProfilesResponse</returns>
        public async System.Threading.Tasks.Task<UserProductPermissionProfilesResponse> AddUserProductPermissionProfilesAsync(Guid? organizationId, Guid? accountId, Guid? userId, ProductPermissionProfilesRequest productPermissionProfilesRequest)
        {
             ApiResponse<UserProductPermissionProfilesResponse> localVarResponse = await AddUserProductPermissionProfilesAsyncWithHttpInfo(organizationId, accountId, userId, productPermissionProfilesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign user to permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <param name="productPermissionProfilesRequest">Request object</param>
        /// <returns>Task of ApiResponse (UserProductPermissionProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProductPermissionProfilesResponse>> AddUserProductPermissionProfilesAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? userId, ProductPermissionProfilesRequest productPermissionProfilesRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfiles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfiles");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfiles");
            // verify the required parameter 'productPermissionProfilesRequest' is set
            if (productPermissionProfilesRequest == null)
                throw new ApiException(400, "Missing required parameter 'productPermissionProfilesRequest' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfiles");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users/{userId}/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter
            if (productPermissionProfilesRequest != null && productPermissionProfilesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(productPermissionProfilesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = productPermissionProfilesRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUserProductPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UserProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UserProductPermissionProfilesResponse)));
        }


        /// <summary>
        /// Assign user to permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>UserProductPermissionProfilesResponse</returns>
        public UserProductPermissionProfilesResponse AddUserProductPermissionProfilesByEmail(Guid? organizationId, Guid? accountId, UserProductPermissionProfilesRequest userProductPermissionProfilesRequest)
        {
             ApiResponse<UserProductPermissionProfilesResponse> localVarResponse = AddUserProductPermissionProfilesByEmailWithHttpInfo(organizationId, accountId, userProductPermissionProfilesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign user to permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>ApiResponse of UserProductPermissionProfilesResponse</returns>
        public ApiResponse<UserProductPermissionProfilesResponse> AddUserProductPermissionProfilesByEmailWithHttpInfo(Guid? organizationId, Guid? accountId, UserProductPermissionProfilesRequest userProductPermissionProfilesRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfilesByEmail");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfilesByEmail");
            // verify the required parameter 'userProductPermissionProfilesRequest' is set
            if (userProductPermissionProfilesRequest == null)
                throw new ApiException(400, "Missing required parameter 'userProductPermissionProfilesRequest' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfilesByEmail");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userProductPermissionProfilesRequest != null && userProductPermissionProfilesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userProductPermissionProfilesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userProductPermissionProfilesRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUserProductPermissionProfilesByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UserProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UserProductPermissionProfilesResponse)));
        }

        /// <summary>
        /// Assign user to permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>Task of UserProductPermissionProfilesResponse</returns>
        public async System.Threading.Tasks.Task<UserProductPermissionProfilesResponse> AddUserProductPermissionProfilesByEmailAsync(Guid? organizationId, Guid? accountId, UserProductPermissionProfilesRequest userProductPermissionProfilesRequest)
        {
             ApiResponse<UserProductPermissionProfilesResponse> localVarResponse = await AddUserProductPermissionProfilesByEmailAsyncWithHttpInfo(organizationId, accountId, userProductPermissionProfilesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign user to permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>Task of ApiResponse (UserProductPermissionProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProductPermissionProfilesResponse>> AddUserProductPermissionProfilesByEmailAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, UserProductPermissionProfilesRequest userProductPermissionProfilesRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfilesByEmail");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfilesByEmail");
            // verify the required parameter 'userProductPermissionProfilesRequest' is set
            if (userProductPermissionProfilesRequest == null)
                throw new ApiException(400, "Missing required parameter 'userProductPermissionProfilesRequest' when calling ProductPermissionProfilesApi->AddUserProductPermissionProfilesByEmail");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userProductPermissionProfilesRequest != null && userProductPermissionProfilesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userProductPermissionProfilesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userProductPermissionProfilesRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUserProductPermissionProfilesByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UserProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UserProductPermissionProfilesResponse)));
        }


        /// <summary>
        /// Get products associated with the account and the available permission profiles Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <returns>ProductPermissionProfilesResponse</returns>
        public ProductPermissionProfilesResponse GetProductPermissionProfiles(Guid? organizationId, Guid? accountId)
        {
             ApiResponse<ProductPermissionProfilesResponse> localVarResponse = GetProductPermissionProfilesWithHttpInfo(organizationId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get products associated with the account and the available permission profiles Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <returns>ApiResponse of ProductPermissionProfilesResponse</returns>
        public ApiResponse<ProductPermissionProfilesResponse> GetProductPermissionProfilesWithHttpInfo(Guid? organizationId, Guid? accountId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->GetProductPermissionProfiles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->GetProductPermissionProfiles");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(ProductPermissionProfilesResponse)));
        }

        /// <summary>
        /// Get products associated with the account and the available permission profiles Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <returns>Task of ProductPermissionProfilesResponse</returns>
        public async System.Threading.Tasks.Task<ProductPermissionProfilesResponse> GetProductPermissionProfilesAsync(Guid? organizationId, Guid? accountId)
        {
             ApiResponse<ProductPermissionProfilesResponse> localVarResponse = await GetProductPermissionProfilesAsyncWithHttpInfo(organizationId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get products associated with the account and the available permission profiles Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <returns>Task of ApiResponse (ProductPermissionProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductPermissionProfilesResponse>> GetProductPermissionProfilesAsyncWithHttpInfo(Guid? organizationId, Guid? accountId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->GetProductPermissionProfiles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->GetProductPermissionProfiles");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(ProductPermissionProfilesResponse)));
        }


        /// <summary>
        /// Retrieve list of user&#39;s permission profiles for each account&#39;s product Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <returns>ProductPermissionProfilesResponse</returns>
        public ProductPermissionProfilesResponse GetUserProductPermissionProfiles(Guid? organizationId, Guid? accountId, Guid? userId)
        {
             ApiResponse<ProductPermissionProfilesResponse> localVarResponse = GetUserProductPermissionProfilesWithHttpInfo(organizationId, accountId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve list of user&#39;s permission profiles for each account&#39;s product Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <returns>ApiResponse of ProductPermissionProfilesResponse</returns>
        public ApiResponse<ProductPermissionProfilesResponse> GetUserProductPermissionProfilesWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? userId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfiles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfiles");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfiles");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users/{userId}/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProductPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(ProductPermissionProfilesResponse)));
        }

        /// <summary>
        /// Retrieve list of user&#39;s permission profiles for each account&#39;s product Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <returns>Task of ProductPermissionProfilesResponse</returns>
        public async System.Threading.Tasks.Task<ProductPermissionProfilesResponse> GetUserProductPermissionProfilesAsync(Guid? organizationId, Guid? accountId, Guid? userId)
        {
             ApiResponse<ProductPermissionProfilesResponse> localVarResponse = await GetUserProductPermissionProfilesAsyncWithHttpInfo(organizationId, accountId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve list of user&#39;s permission profiles for each account&#39;s product Required scopes: user_read
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userId">The user ID GUID</param>
        /// <returns>Task of ApiResponse (ProductPermissionProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductPermissionProfilesResponse>> GetUserProductPermissionProfilesAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, Guid? userId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfiles");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfiles");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfiles");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users/{userId}/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProductPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (ProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(ProductPermissionProfilesResponse)));
        }

        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        public class GetUserProductPermissionProfilesByEmailOptions
        {
            /// Email address of the requested user 
            public string email {get; set;}
        }

        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>UserProductPermissionProfilesResponse</returns>
        public UserProductPermissionProfilesResponse GetUserProductPermissionProfilesByEmail(Guid? organizationId, Guid? accountId, ProductPermissionProfilesApi.GetUserProductPermissionProfilesByEmailOptions options = null)
        {
             ApiResponse<UserProductPermissionProfilesResponse> localVarResponse = GetUserProductPermissionProfilesByEmailWithHttpInfo(organizationId, accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of UserProductPermissionProfilesResponse</returns>
        public ApiResponse<UserProductPermissionProfilesResponse> GetUserProductPermissionProfilesByEmailWithHttpInfo(Guid? organizationId, Guid? accountId, ProductPermissionProfilesApi.GetUserProductPermissionProfilesByEmailOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfilesByEmail");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfilesByEmail");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(options.email)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProductPermissionProfilesByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UserProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UserProductPermissionProfilesResponse)));
        }

        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of UserProductPermissionProfilesResponse</returns>
        public async System.Threading.Tasks.Task<UserProductPermissionProfilesResponse> GetUserProductPermissionProfilesByEmailAsync(Guid? organizationId, Guid? accountId, ProductPermissionProfilesApi.GetUserProductPermissionProfilesByEmailOptions options = null)
        {
             ApiResponse<UserProductPermissionProfilesResponse> localVarResponse = await GetUserProductPermissionProfilesByEmailAsyncWithHttpInfo(organizationId, accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (UserProductPermissionProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProductPermissionProfilesResponse>> GetUserProductPermissionProfilesByEmailAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, ProductPermissionProfilesApi.GetUserProductPermissionProfilesByEmailOptions options = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfilesByEmail");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->GetUserProductPermissionProfilesByEmail");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/permission_profiles/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.email != null) localVarQueryParams.Add("email", this.ApiClient.ParameterToString(options.email)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProductPermissionProfilesByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProductPermissionProfilesResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (UserProductPermissionProfilesResponse)this.ApiClient.Deserialize(localVarResponse, typeof(UserProductPermissionProfilesResponse)));
        }


        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>RemoveUserProductsResponse</returns>
        public RemoveUserProductsResponse RemoveUserProductPermission(Guid? organizationId, Guid? accountId, UserProductProfileDeleteRequest userProductPermissionProfilesRequest)
        {
             ApiResponse<RemoveUserProductsResponse> localVarResponse = RemoveUserProductPermissionWithHttpInfo(organizationId, accountId, userProductPermissionProfilesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>ApiResponse of RemoveUserProductsResponse</returns>
        public ApiResponse<RemoveUserProductsResponse> RemoveUserProductPermissionWithHttpInfo(Guid? organizationId, Guid? accountId, UserProductProfileDeleteRequest userProductPermissionProfilesRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->RemoveUserProductPermission");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->RemoveUserProductPermission");
            // verify the required parameter 'userProductPermissionProfilesRequest' is set
            if (userProductPermissionProfilesRequest == null)
                throw new ApiException(400, "Missing required parameter 'userProductPermissionProfilesRequest' when calling ProductPermissionProfilesApi->RemoveUserProductPermission");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userProductPermissionProfilesRequest != null && userProductPermissionProfilesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userProductPermissionProfilesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userProductPermissionProfilesRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserProductPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveUserProductsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (RemoveUserProductsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(RemoveUserProductsResponse)));
        }

        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>Task of RemoveUserProductsResponse</returns>
        public async System.Threading.Tasks.Task<RemoveUserProductsResponse> RemoveUserProductPermissionAsync(Guid? organizationId, Guid? accountId, UserProductProfileDeleteRequest userProductPermissionProfilesRequest)
        {
             ApiResponse<RemoveUserProductsResponse> localVarResponse = await RemoveUserProductPermissionAsyncWithHttpInfo(organizationId, accountId, userProductPermissionProfilesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from permission profiles for one or more products Required scopes: user_write
        /// </summary>
        /// <exception cref="DocuSign.Admin.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The organization ID GUID</param>
        /// <param name="accountId">The account ID GUID</param>
        /// <param name="userProductPermissionProfilesRequest">Request object</param>
        /// <returns>Task of ApiResponse (RemoveUserProductsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveUserProductsResponse>> RemoveUserProductPermissionAsyncWithHttpInfo(Guid? organizationId, Guid? accountId, UserProductProfileDeleteRequest userProductPermissionProfilesRequest)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling ProductPermissionProfilesApi->RemoveUserProductPermission");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ProductPermissionProfilesApi->RemoveUserProductPermission");
            // verify the required parameter 'userProductPermissionProfilesRequest' is set
            if (userProductPermissionProfilesRequest == null)
                throw new ApiException(400, "Missing required parameter 'userProductPermissionProfilesRequest' when calling ProductPermissionProfilesApi->RemoveUserProductPermission");

            var localVarPath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/products/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (organizationId != null) localVarPathParams.Add("organizationId", this.ApiClient.ParameterToString(organizationId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (userProductPermissionProfilesRequest != null && userProductPermissionProfilesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(userProductPermissionProfilesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userProductPermissionProfilesRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserProductPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveUserProductsResponse>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (RemoveUserProductsResponse)this.ApiClient.Deserialize(localVarResponse, typeof(RemoveUserProductsResponse)));
        }

    }
}